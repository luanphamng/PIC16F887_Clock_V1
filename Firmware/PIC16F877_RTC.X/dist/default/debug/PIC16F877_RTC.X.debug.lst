

Microchip Technology PIC LITE Macro Assembler V1.43 build -156212558 
                                                                                               Sun Sep 10 04:30:55 2017

Microchip Technology Omniscient Code Generator v1.43 (Free mode) build 201707250354
     1                           	processor	16F887
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK0,global,class=CODE,delta=2
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
     7                           	psect	inittext,global,class=CODE,delta=2
     8                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
     9                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	maintext,global,class=CODE,split=1,delta=2
    11                           	psect	text1,local,class=CODE,merge=1,delta=2
    12                           	psect	text2,local,class=CODE,merge=1,delta=2
    13                           	psect	text3,local,class=CODE,merge=1,delta=2
    14                           	psect	text4,local,class=CODE,merge=1,delta=2
    15                           	psect	text5,local,class=CODE,merge=1,delta=2,group=2
    16                           	psect	text6,local,class=CODE,merge=1,delta=2
    17                           	psect	text7,local,class=CODE,merge=1,delta=2,group=2
    18                           	psect	text8,local,class=CODE,merge=1,delta=2,group=2
    19                           	psect	text9,local,class=CODE,merge=1,delta=2
    20                           	psect	text10,local,class=CODE,merge=1,delta=2
    21                           	psect	text11,local,class=CODE,merge=1,delta=2
    22                           	psect	text12,local,class=CODE,merge=1,delta=2
    23                           	psect	text13,local,class=CODE,merge=1,delta=2
    24                           	psect	text14,local,class=CODE,merge=1,delta=2
    25                           	psect	text15,local,class=CODE,merge=1,delta=2
    26                           	psect	text16,local,class=CODE,merge=1,delta=2
    27                           	psect	text17,local,class=CODE,merge=1,delta=2
    28                           	psect	text18,local,class=CODE,merge=1,delta=2
    29                           	psect	text19,local,class=CODE,merge=1,delta=2
    30                           	dabs	1,0x7E,2
    31  0000                     
    32                           ; Version 1.43
    33                           ; Generated 25/07/2017 GMT
    34                           ; 
    35                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    36                           ; All rights reserved.
    37                           ; 
    38                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    39                           ; 
    40                           ; Redistribution and use in source and binary forms, with or without modification, are
    41                           ; permitted provided that the following conditions are met:
    42                           ; 
    43                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    44                           ;        conditions and the following disclaimer.
    45                           ; 
    46                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    47                           ;        of conditions and the following disclaimer in the documentation and/or other
    48                           ;        materials provided with the distribution.
    49                           ; 
    50                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    51                           ;        software without specific prior written permission.
    52                           ; 
    53                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    54                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    55                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    56                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    57                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    58                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    59                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    60                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    61                           ; 
    62                           ; 
    63                           ; Code-generator required, PIC16F887 Definitions
    64                           ; 
    65                           ; SFR Addresses
    66  0000                     	;# 
    67  0001                     	;# 
    68  0002                     	;# 
    69  0003                     	;# 
    70  0004                     	;# 
    71  0005                     	;# 
    72  0006                     	;# 
    73  0007                     	;# 
    74  0008                     	;# 
    75  0009                     	;# 
    76  000A                     	;# 
    77  000B                     	;# 
    78  000C                     	;# 
    79  000D                     	;# 
    80  000E                     	;# 
    81  000E                     	;# 
    82  000F                     	;# 
    83  0010                     	;# 
    84  0011                     	;# 
    85  0012                     	;# 
    86  0013                     	;# 
    87  0014                     	;# 
    88  0015                     	;# 
    89  0015                     	;# 
    90  0016                     	;# 
    91  0017                     	;# 
    92  0018                     	;# 
    93  0019                     	;# 
    94  001A                     	;# 
    95  001B                     	;# 
    96  001B                     	;# 
    97  001C                     	;# 
    98  001D                     	;# 
    99  001E                     	;# 
   100  001F                     	;# 
   101  0081                     	;# 
   102  0085                     	;# 
   103  0086                     	;# 
   104  0087                     	;# 
   105  0088                     	;# 
   106  0089                     	;# 
   107  008C                     	;# 
   108  008D                     	;# 
   109  008E                     	;# 
   110  008F                     	;# 
   111  0090                     	;# 
   112  0091                     	;# 
   113  0092                     	;# 
   114  0093                     	;# 
   115  0093                     	;# 
   116  0093                     	;# 
   117  0094                     	;# 
   118  0095                     	;# 
   119  0096                     	;# 
   120  0097                     	;# 
   121  0098                     	;# 
   122  0099                     	;# 
   123  009A                     	;# 
   124  009B                     	;# 
   125  009C                     	;# 
   126  009D                     	;# 
   127  009E                     	;# 
   128  009F                     	;# 
   129  0105                     	;# 
   130  0107                     	;# 
   131  0108                     	;# 
   132  0109                     	;# 
   133  010C                     	;# 
   134  010C                     	;# 
   135  010D                     	;# 
   136  010E                     	;# 
   137  010F                     	;# 
   138  0185                     	;# 
   139  0187                     	;# 
   140  0188                     	;# 
   141  0189                     	;# 
   142  018C                     	;# 
   143  018D                     	;# 
   144  0000                     	;# 
   145  0001                     	;# 
   146  0002                     	;# 
   147  0003                     	;# 
   148  0004                     	;# 
   149  0005                     	;# 
   150  0006                     	;# 
   151  0007                     	;# 
   152  0008                     	;# 
   153  0009                     	;# 
   154  000A                     	;# 
   155  000B                     	;# 
   156  000C                     	;# 
   157  000D                     	;# 
   158  000E                     	;# 
   159  000E                     	;# 
   160  000F                     	;# 
   161  0010                     	;# 
   162  0011                     	;# 
   163  0012                     	;# 
   164  0013                     	;# 
   165  0014                     	;# 
   166  0015                     	;# 
   167  0015                     	;# 
   168  0016                     	;# 
   169  0017                     	;# 
   170  0018                     	;# 
   171  0019                     	;# 
   172  001A                     	;# 
   173  001B                     	;# 
   174  001B                     	;# 
   175  001C                     	;# 
   176  001D                     	;# 
   177  001E                     	;# 
   178  001F                     	;# 
   179  0081                     	;# 
   180  0085                     	;# 
   181  0086                     	;# 
   182  0087                     	;# 
   183  0088                     	;# 
   184  0089                     	;# 
   185  008C                     	;# 
   186  008D                     	;# 
   187  008E                     	;# 
   188  008F                     	;# 
   189  0090                     	;# 
   190  0091                     	;# 
   191  0092                     	;# 
   192  0093                     	;# 
   193  0093                     	;# 
   194  0093                     	;# 
   195  0094                     	;# 
   196  0095                     	;# 
   197  0096                     	;# 
   198  0097                     	;# 
   199  0098                     	;# 
   200  0099                     	;# 
   201  009A                     	;# 
   202  009B                     	;# 
   203  009C                     	;# 
   204  009D                     	;# 
   205  009E                     	;# 
   206  009F                     	;# 
   207  0105                     	;# 
   208  0107                     	;# 
   209  0108                     	;# 
   210  0109                     	;# 
   211  010C                     	;# 
   212  010C                     	;# 
   213  010D                     	;# 
   214  010E                     	;# 
   215  010F                     	;# 
   216  0185                     	;# 
   217  0187                     	;# 
   218  0188                     	;# 
   219  0189                     	;# 
   220  018C                     	;# 
   221  018D                     	;# 
   222  0000                     	;# 
   223  0001                     	;# 
   224  0002                     	;# 
   225  0003                     	;# 
   226  0004                     	;# 
   227  0005                     	;# 
   228  0006                     	;# 
   229  0007                     	;# 
   230  0008                     	;# 
   231  0009                     	;# 
   232  000A                     	;# 
   233  000B                     	;# 
   234  000C                     	;# 
   235  000D                     	;# 
   236  000E                     	;# 
   237  000E                     	;# 
   238  000F                     	;# 
   239  0010                     	;# 
   240  0011                     	;# 
   241  0012                     	;# 
   242  0013                     	;# 
   243  0014                     	;# 
   244  0015                     	;# 
   245  0015                     	;# 
   246  0016                     	;# 
   247  0017                     	;# 
   248  0018                     	;# 
   249  0019                     	;# 
   250  001A                     	;# 
   251  001B                     	;# 
   252  001B                     	;# 
   253  001C                     	;# 
   254  001D                     	;# 
   255  001E                     	;# 
   256  001F                     	;# 
   257  0081                     	;# 
   258  0085                     	;# 
   259  0086                     	;# 
   260  0087                     	;# 
   261  0088                     	;# 
   262  0089                     	;# 
   263  008C                     	;# 
   264  008D                     	;# 
   265  008E                     	;# 
   266  008F                     	;# 
   267  0090                     	;# 
   268  0091                     	;# 
   269  0092                     	;# 
   270  0093                     	;# 
   271  0093                     	;# 
   272  0093                     	;# 
   273  0094                     	;# 
   274  0095                     	;# 
   275  0096                     	;# 
   276  0097                     	;# 
   277  0098                     	;# 
   278  0099                     	;# 
   279  009A                     	;# 
   280  009B                     	;# 
   281  009C                     	;# 
   282  009D                     	;# 
   283  009E                     	;# 
   284  009F                     	;# 
   285  0105                     	;# 
   286  0107                     	;# 
   287  0108                     	;# 
   288  0109                     	;# 
   289  010C                     	;# 
   290  010C                     	;# 
   291  010D                     	;# 
   292  010E                     	;# 
   293  010F                     	;# 
   294  0185                     	;# 
   295  0187                     	;# 
   296  0188                     	;# 
   297  0189                     	;# 
   298  018C                     	;# 
   299  018D                     	;# 
   300  0000                     	;# 
   301  0001                     	;# 
   302  0002                     	;# 
   303  0003                     	;# 
   304  0004                     	;# 
   305  0005                     	;# 
   306  0006                     	;# 
   307  0007                     	;# 
   308  0008                     	;# 
   309  0009                     	;# 
   310  000A                     	;# 
   311  000B                     	;# 
   312  000C                     	;# 
   313  000D                     	;# 
   314  000E                     	;# 
   315  000E                     	;# 
   316  000F                     	;# 
   317  0010                     	;# 
   318  0011                     	;# 
   319  0012                     	;# 
   320  0013                     	;# 
   321  0014                     	;# 
   322  0015                     	;# 
   323  0015                     	;# 
   324  0016                     	;# 
   325  0017                     	;# 
   326  0018                     	;# 
   327  0019                     	;# 
   328  001A                     	;# 
   329  001B                     	;# 
   330  001B                     	;# 
   331  001C                     	;# 
   332  001D                     	;# 
   333  001E                     	;# 
   334  001F                     	;# 
   335  0081                     	;# 
   336  0085                     	;# 
   337  0086                     	;# 
   338  0087                     	;# 
   339  0088                     	;# 
   340  0089                     	;# 
   341  008C                     	;# 
   342  008D                     	;# 
   343  008E                     	;# 
   344  008F                     	;# 
   345  0090                     	;# 
   346  0091                     	;# 
   347  0092                     	;# 
   348  0093                     	;# 
   349  0093                     	;# 
   350  0093                     	;# 
   351  0094                     	;# 
   352  0095                     	;# 
   353  0096                     	;# 
   354  0097                     	;# 
   355  0098                     	;# 
   356  0099                     	;# 
   357  009A                     	;# 
   358  009B                     	;# 
   359  009C                     	;# 
   360  009D                     	;# 
   361  009E                     	;# 
   362  009F                     	;# 
   363  0105                     	;# 
   364  0107                     	;# 
   365  0108                     	;# 
   366  0109                     	;# 
   367  010C                     	;# 
   368  010C                     	;# 
   369  010D                     	;# 
   370  010E                     	;# 
   371  010F                     	;# 
   372  0185                     	;# 
   373  0187                     	;# 
   374  0188                     	;# 
   375  0189                     	;# 
   376  018C                     	;# 
   377  018D                     	;# 
   378  0000                     	;# 
   379  0001                     	;# 
   380  0002                     	;# 
   381  0003                     	;# 
   382  0004                     	;# 
   383  0005                     	;# 
   384  0006                     	;# 
   385  0007                     	;# 
   386  0008                     	;# 
   387  0009                     	;# 
   388  000A                     	;# 
   389  000B                     	;# 
   390  000C                     	;# 
   391  000D                     	;# 
   392  000E                     	;# 
   393  000E                     	;# 
   394  000F                     	;# 
   395  0010                     	;# 
   396  0011                     	;# 
   397  0012                     	;# 
   398  0013                     	;# 
   399  0014                     	;# 
   400  0015                     	;# 
   401  0015                     	;# 
   402  0016                     	;# 
   403  0017                     	;# 
   404  0018                     	;# 
   405  0019                     	;# 
   406  001A                     	;# 
   407  001B                     	;# 
   408  001B                     	;# 
   409  001C                     	;# 
   410  001D                     	;# 
   411  001E                     	;# 
   412  001F                     	;# 
   413  0081                     	;# 
   414  0085                     	;# 
   415  0086                     	;# 
   416  0087                     	;# 
   417  0088                     	;# 
   418  0089                     	;# 
   419  008C                     	;# 
   420  008D                     	;# 
   421  008E                     	;# 
   422  008F                     	;# 
   423  0090                     	;# 
   424  0091                     	;# 
   425  0092                     	;# 
   426  0093                     	;# 
   427  0093                     	;# 
   428  0093                     	;# 
   429  0094                     	;# 
   430  0095                     	;# 
   431  0096                     	;# 
   432  0097                     	;# 
   433  0098                     	;# 
   434  0099                     	;# 
   435  009A                     	;# 
   436  009B                     	;# 
   437  009C                     	;# 
   438  009D                     	;# 
   439  009E                     	;# 
   440  009F                     	;# 
   441  0105                     	;# 
   442  0107                     	;# 
   443  0108                     	;# 
   444  0109                     	;# 
   445  010C                     	;# 
   446  010C                     	;# 
   447  010D                     	;# 
   448  010E                     	;# 
   449  010F                     	;# 
   450  0185                     	;# 
   451  0187                     	;# 
   452  0188                     	;# 
   453  0189                     	;# 
   454  018C                     	;# 
   455  018D                     	;# 
   456                           
   457                           	psect	idataBANK0
   458  0378                     __pidataBANK0:	
   459                           
   460                           ;initializer for _ucBCD_ARR
   461  0378  34FC               	retlw	252
   462  0379  3460               	retlw	96
   463  037A  34DA               	retlw	218
   464  037B  34F2               	retlw	242
   465  037C  3466               	retlw	102
   466  037D  34B6               	retlw	182
   467  037E  34BE               	retlw	190
   468  037F  34E0               	retlw	224
   469  0380  34FE               	retlw	254
   470  0381  34F6               	retlw	246
   471  0008                     _PORTD	set	8
   472  0013                     _SSPBUF	set	19
   473  0014                     _SSPCON	set	20
   474  0007                     _PORTCbits	set	7
   475  0006                     _PORTBbits	set	6
   476  0006                     _PORTB	set	6
   477  0093                     _SSPADD	set	147
   478  0094                     _SSPSTAT	set	148
   479  0096                     _IOCB	set	150
   480  0081                     _OPTION_REGbits	set	129
   481  0095                     _WPUBbits	set	149
   482  0089                     _TRISEbits	set	137
   483  0086                     _TRISBbits	set	134
   484  0088                     _TRISD	set	136
   485  0087                     _TRISCbits	set	135
   486  048C                     _ACKEN	set	1164
   487  048D                     _ACKDT	set	1165
   488  04A2                     _R_W	set	1186
   489  048B                     _RCEN	set	1163
   490  04A0                     _BF	set	1184
   491  048A                     _PEN	set	1162
   492  0488                     _SEN	set	1160
   493  043C                     _TRISC4	set	1084
   494  043B                     _TRISC3	set	1083
   495  0489                     _RSEN	set	1161
   496  0188                     _ANSELbits	set	392
   497  0189                     _ANSELHbits	set	393
   498                           
   499                           ; #config settings
   500  0000                     
   501                           	psect	cinit
   502  07F0                     start_initialization:	
   503  07F0                     __initialization:	
   504                           
   505                           ; Initialize objects allocated to BANK0
   506  07F0  1383               	bcf	3,7	;select IRP bank0
   507  07F1  303F               	movlw	low (__pdataBANK0+10)
   508  07F2  00FD               	movwf	btemp+-1
   509  07F3  3003               	movlw	high __pidataBANK0
   510  07F4  00FE               	movwf	btemp
   511  07F5  3078               	movlw	low __pidataBANK0
   512  07F6  00FF               	movwf	btemp+1
   513  07F7  3035               	movlw	low __pdataBANK0
   514  07F8  0084               	movwf	4
   515  07F9  120A  118A  23C8   	fcall	init_ram0
   516  07FC                     end_of_initialization:	
   517                           ;End of C runtime variable initialization code
   518                           
   519  07FC                     __end_of__initialization:	
   520  07FC  0183               	clrf	3
   521  07FD  120A  118A  2E5A   	ljmp	_main	;jump to C main() function
   522                           
   523                           	psect	dataBANK0
   524  0035                     __pdataBANK0:	
   525  0035                     _ucBCD_ARR:	
   526  0035                     	ds	10
   527                           
   528                           	psect	inittext
   529  03C4                     init_fetch0:	
   530                           ;	Called with low address in FSR and high address in W
   531                           
   532  03C4  087E               	movf	126,w
   533  03C5  008A               	movwf	10
   534  03C6  087F               	movf	127,w
   535  03C7  0082               	movwf	2
   536  03C8                     init_ram0:	
   537                           ;Called with:
   538                           ;	high address of idata address in btemp 
   539                           ;	low address of idata address in btemp+1 
   540                           ;	low address of data in FSR
   541                           ;	high address + 1 of data in btemp-1
   542                           
   543  03C8  23C4  120A  118A   	fcall	init_fetch0
   544  03CB  0080               	movwf	0
   545  03CC  0A84               	incf	4,f
   546  03CD  0804               	movf	4,w
   547  03CE  067D               	xorwf	125,w
   548  03CF  1903               	btfsc	3,2
   549  03D0  3400               	retlw	0
   550  03D1  0AFF               	incf	127,f
   551  03D2  1903               	btfsc	3,2
   552  03D3  0AFE               	incf	126,f
   553  03D4  2BC8               	goto	init_ram0
   554                           
   555                           	psect	cstackCOMMON
   556  0071                     __pcstackCOMMON:	
   557  0071                     ?_RTC_Init:	
   558  0071                     ?_RTC_GetDateTime:	
   559                           ; 1 bytes @ 0x0
   560                           
   561  0071                     ?_ui8Hex2DECDisplay:	
   562                           ; 1 bytes @ 0x0
   563                           
   564  0071                     ?_ui8Dec2HexDisplay:	
   565                           ; 1 bytes @ 0x0
   566                           
   567  0071                     ?_RTC_SetDateTime:	
   568                           ; 1 bytes @ 0x0
   569                           
   570  0071                     ?_DELAY_us:	
   571                           ; 1 bytes @ 0x0
   572                           
   573  0071                     ?_i2c_WaitForIdle:	
   574                           ; 1 bytes @ 0x0
   575                           
   576  0071                     ??_i2c_WaitForIdle:	
   577                           ; 1 bytes @ 0x0
   578                           
   579  0071                     ?_i2c_Ack:	
   580                           ; 1 bytes @ 0x0
   581                           
   582  0071                     ??_i2c_Ack:	
   583                           ; 1 bytes @ 0x0
   584                           
   585  0071                     ?_i2c_NoAck:	
   586                           ; 1 bytes @ 0x0
   587                           
   588  0071                     ??_i2c_NoAck:	
   589                           ; 1 bytes @ 0x0
   590                           
   591  0071                     ?_I2C_Init:	
   592                           ; 1 bytes @ 0x0
   593                           
   594  0071                     ??_I2C_Init:	
   595                           ; 1 bytes @ 0x0
   596                           
   597  0071                     ?_I2C_Start:	
   598                           ; 1 bytes @ 0x0
   599                           
   600  0071                     ??_I2C_Start:	
   601                           ; 1 bytes @ 0x0
   602                           
   603  0071                     ?_I2C_Stop:	
   604                           ; 1 bytes @ 0x0
   605                           
   606  0071                     ??_I2C_Stop:	
   607                           ; 1 bytes @ 0x0
   608                           
   609  0071                     ?_I2C_Write:	
   610                           ; 1 bytes @ 0x0
   611                           
   612  0071                     ??_I2C_Write:	
   613                           ; 1 bytes @ 0x0
   614                           
   615  0071                     ?_I2C_Read:	
   616                           ; 1 bytes @ 0x0
   617                           
   618  0071                     ??_I2C_Read:	
   619                           ; 1 bytes @ 0x0
   620                           
   621  0071                     ?___bmul:	
   622                           ; 1 bytes @ 0x0
   623                           
   624  0071                     ?_main:	
   625                           ; 1 bytes @ 0x0
   626                           
   627  0071                     ?___awdiv:	
   628                           ; 2 bytes @ 0x0
   629                           
   630  0071                     ?___awmod:	
   631                           ; 2 bytes @ 0x0
   632                           
   633  0071                     I2C_Write@v_i2cData_u8:	
   634                           ; 2 bytes @ 0x0
   635                           
   636  0071                     ___bmul@multiplicand:	
   637                           ; 1 bytes @ 0x0
   638                           
   639  0071                     DELAY_us@us_count:	
   640                           ; 1 bytes @ 0x0
   641                           
   642  0071                     ___awdiv@divisor:	
   643                           ; 2 bytes @ 0x0
   644                           
   645  0071                     ___awmod@divisor:	
   646                           ; 2 bytes @ 0x0
   647                           
   648                           
   649                           ; 2 bytes @ 0x0
   650  0071                     	ds	1
   651  0072                     ??_RTC_Init:	
   652  0072                     ??_RTC_SetDateTime:	
   653                           ; 1 bytes @ 0x1
   654                           
   655  0072                     ??___bmul:	
   656                           ; 1 bytes @ 0x1
   657                           
   658  0072                     I2C_Read@v_ackOption_u8:	
   659                           ; 1 bytes @ 0x1
   660                           
   661  0072                     RTC_SetDateTime@rtc:	
   662                           ; 1 bytes @ 0x1
   663                           
   664                           
   665                           ; 1 bytes @ 0x1
   666  0072                     	ds	1
   667  0073                     ?_DELAY_ms:	
   668  0073                     ??_DELAY_us:	
   669                           ; 1 bytes @ 0x2
   670                           
   671  0073                     I2C_Read@v_i2cData_u8:	
   672                           ; 1 bytes @ 0x2
   673                           
   674  0073                     ___bmul@product:	
   675                           ; 1 bytes @ 0x2
   676                           
   677  0073                     DELAY_ms@ms_count:	
   678                           ; 1 bytes @ 0x2
   679                           
   680  0073                     ___awdiv@dividend:	
   681                           ; 2 bytes @ 0x2
   682                           
   683  0073                     ___awmod@dividend:	
   684                           ; 2 bytes @ 0x2
   685                           
   686                           
   687                           ; 2 bytes @ 0x2
   688  0073                     	ds	1
   689  0074                     ??_RTC_GetDateTime:	
   690  0074                     ___bmul@multiplier:	
   691                           ; 1 bytes @ 0x3
   692                           
   693                           
   694                           ; 1 bytes @ 0x3
   695  0074                     	ds	1
   696  0075                     ??_DELAY_ms:	
   697  0075                     ??_ui8Hex2DECDisplay:	
   698                           ; 1 bytes @ 0x4
   699                           
   700  0075                     ?_vDisplay:	
   701                           ; 1 bytes @ 0x4
   702                           
   703  0075                     ??___awdiv:	
   704                           ; 1 bytes @ 0x4
   705                           
   706  0075                     ??___awmod:	
   707                           ; 1 bytes @ 0x4
   708                           
   709  0075                     RTC_GetDateTime@rtc:	
   710                           ; 1 bytes @ 0x4
   711                           
   712  0075                     vDisplay@ui8Second:	
   713                           ; 1 bytes @ 0x4
   714                           
   715                           
   716                           ; 1 bytes @ 0x4
   717  0075                     	ds	1
   718  0076                     vDisplay@ui8Thrd:	
   719  0076                     ___awdiv@counter:	
   720                           ; 1 bytes @ 0x5
   721                           
   722  0076                     ___awmod@counter:	
   723                           ; 1 bytes @ 0x5
   724                           
   725                           
   726                           ; 1 bytes @ 0x5
   727  0076                     	ds	1
   728  0077                     vDisplay@ui8Fourth:	
   729  0077                     ui8Hex2DECDisplay@ui8Temp:	
   730                           ; 1 bytes @ 0x6
   731                           
   732  0077                     ___awdiv@sign:	
   733                           ; 1 bytes @ 0x6
   734                           
   735  0077                     ___awmod@sign:	
   736                           ; 1 bytes @ 0x6
   737                           
   738                           
   739                           ; 1 bytes @ 0x6
   740  0077                     	ds	1
   741  0078                     ??_vDisplay:	
   742  0078                     ui8Hex2DECDisplay@ui8Input:	
   743                           ; 1 bytes @ 0x7
   744                           
   745  0078                     ___awdiv@quotient:	
   746                           ; 1 bytes @ 0x7
   747                           
   748                           
   749                           ; 2 bytes @ 0x7
   750  0078                     	ds	1
   751  0079                     vDisplay@ui8First:	
   752                           
   753                           ; 1 bytes @ 0x8
   754  0079                     	ds	1
   755  007A                     ??_ui8Dec2HexDisplay:	
   756                           
   757                           ; 1 bytes @ 0x9
   758  007A                     	ds	3
   759                           
   760                           	psect	cstackBANK0
   761  0020                     __pcstackBANK0:	
   762  0020                     ui8Dec2HexDisplay@ui8Output:	
   763                           
   764                           ; 1 bytes @ 0x0
   765  0020                     	ds	1
   766  0021                     ui8Dec2HexDisplay@ui8Input:	
   767                           
   768                           ; 1 bytes @ 0x1
   769  0021                     	ds	1
   770  0022                     ui8Dec2HexDisplay@ui8Temp:	
   771                           
   772                           ; 1 bytes @ 0x2
   773  0022                     	ds	1
   774  0023                     ??_main:	
   775                           
   776                           ; 1 bytes @ 0x3
   777  0023                     	ds	3
   778  0026                     main@ucYear:	
   779                           
   780                           ; 1 bytes @ 0x6
   781  0026                     	ds	1
   782  0027                     main@ui8SetMode:	
   783                           
   784                           ; 1 bytes @ 0x7
   785  0027                     	ds	1
   786  0028                     main@ucSec:	
   787                           
   788                           ; 1 bytes @ 0x8
   789  0028                     	ds	1
   790  0029                     main@ucMin:	
   791                           
   792                           ; 1 bytes @ 0x9
   793  0029                     	ds	1
   794  002A                     main@ucHours:	
   795                           
   796                           ; 1 bytes @ 0xA
   797  002A                     	ds	1
   798  002B                     main@ucDate:	
   799                           
   800                           ; 1 bytes @ 0xB
   801  002B                     	ds	1
   802  002C                     main@ucMonth:	
   803                           
   804                           ; 1 bytes @ 0xC
   805  002C                     	ds	1
   806  002D                     main@ui8SetValue:	
   807                           
   808                           ; 1 bytes @ 0xD
   809  002D                     	ds	1
   810  002E                     main@rtc:	
   811                           
   812                           ; 7 bytes @ 0xE
   813  002E                     	ds	7
   814                           
   815                           	psect	maintext
   816  065A                     __pmaintext:	
   817 ;;
   818 ;;Main: autosize = 0, tempsize = 3, incstack = 0, save=0
   819 ;;
   820 ;; *************** function _main *****************
   821 ;; Defined at:
   822 ;;		line 23 in file "main.c"
   823 ;; Parameters:    Size  Location     Type
   824 ;;		None
   825 ;; Auto vars:     Size  Location     Type
   826 ;;  rtc             7   14[BANK0 ] struct .
   827 ;;  ui8SetValue     1   13[BANK0 ] unsigned char 
   828 ;;  ucMonth         1   12[BANK0 ] unsigned char 
   829 ;;  ucDate          1   11[BANK0 ] unsigned char 
   830 ;;  ucHours         1   10[BANK0 ] unsigned char 
   831 ;;  ucMin           1    9[BANK0 ] unsigned char 
   832 ;;  ucSec           1    8[BANK0 ] unsigned char 
   833 ;;  ui8SetMode      1    7[BANK0 ] unsigned char 
   834 ;;  ucYear          1    6[BANK0 ] unsigned char 
   835 ;; Return value:  Size  Location     Type
   836 ;;                  2   42[None  ] int 
   837 ;; Registers used:
   838 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   839 ;; Tracked objects:
   840 ;;		On entry : B00/0
   841 ;;		On exit  : 0/0
   842 ;;		Unchanged: 0/0
   843 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   844 ;;      Params:         0       0       0       0       0
   845 ;;      Locals:         0      15       0       0       0
   846 ;;      Temps:          0       3       0       0       0
   847 ;;      Totals:         0      18       0       0       0
   848 ;;Total ram usage:       18 bytes
   849 ;; Hardware stack levels required when called:    3
   850 ;; This function calls:
   851 ;;		_DELAY_ms
   852 ;;		_RTC_GetDateTime
   853 ;;		_RTC_Init
   854 ;;		_RTC_SetDateTime
   855 ;;		_ui8Dec2HexDisplay
   856 ;;		_ui8Hex2DECDisplay
   857 ;;		_vDisplay
   858 ;; This function is called by:
   859 ;;		Startup code after reset
   860 ;; This function uses a non-reentrant model
   861 ;;
   862                           
   863                           
   864                           ;psect for function _main
   865  065A                     _main:	
   866                           
   867                           ;main.c: 27: TRISCbits.TRISC5 = 0;
   868                           
   869                           ;incstack = 0
   870                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   871  065A  1683               	bsf	3,5	;RP0=1, select bank1
   872  065B  1303               	bcf	3,6	;RP1=0, select bank1
   873  065C  1287               	bcf	7,5	;volatile
   874                           
   875                           ;main.c: 28: TRISCbits.TRISC6 = 0;
   876  065D  1307               	bcf	7,6	;volatile
   877                           
   878                           ;main.c: 29: TRISCbits.TRISC7 = 0;
   879  065E  1387               	bcf	7,7	;volatile
   880                           
   881                           ;main.c: 31: TRISD = 0x00;
   882  065F  0188               	clrf	8	;volatile
   883                           
   884                           ;main.c: 33: TRISBbits.TRISB0 = 1;
   885  0660  1406               	bsf	6,0	;volatile
   886                           
   887                           ;main.c: 34: TRISBbits.TRISB1 = 1;
   888  0661  1486               	bsf	6,1	;volatile
   889                           
   890                           ;main.c: 35: TRISBbits.TRISB2 = 0;
   891  0662  1106               	bcf	6,2	;volatile
   892                           
   893                           ;main.c: 36: TRISBbits.TRISB3 = 0;
   894  0663  1186               	bcf	6,3	;volatile
   895                           
   896                           ;main.c: 37: TRISBbits.TRISB4 = 0;
   897  0664  1206               	bcf	6,4	;volatile
   898                           
   899                           ;main.c: 38: TRISBbits.TRISB5 = 0;
   900  0665  1286               	bcf	6,5	;volatile
   901                           
   902                           ;main.c: 40: TRISBbits.TRISB7 = 0;
   903  0666  1386               	bcf	6,7	;volatile
   904                           
   905                           ;main.c: 42: TRISEbits.TRISE0 = 0;
   906  0667  1009               	bcf	9,0	;volatile
   907                           
   908                           ;main.c: 44: WPUBbits.WPUB0 = 1;
   909  0668  1415               	bsf	21,0	;volatile
   910                           
   911                           ;main.c: 45: WPUBbits.WPUB1 = 1;
   912  0669  1495               	bsf	21,1	;volatile
   913                           
   914                           ;main.c: 46: WPUBbits.WPUB2 = 1;
   915  066A  1515               	bsf	21,2	;volatile
   916                           
   917                           ;main.c: 47: OPTION_REGbits.nRBPU = 0;
   918  066B  1381               	bcf	1,7	;volatile
   919                           
   920                           ;main.c: 49: ANSELHbits.ANS12 = 0;
   921  066C  1683               	bsf	3,5	;RP0=1, select bank3
   922  066D  1703               	bsf	3,6	;RP1=1, select bank3
   923  066E  1209               	bcf	9,4	;volatile
   924                           
   925                           ;main.c: 50: ANSELHbits.ANS10 = 0;
   926  066F  1109               	bcf	9,2	;volatile
   927                           
   928                           ;main.c: 51: ANSELHbits.ANS13 = 0;
   929  0670  1289               	bcf	9,5	;volatile
   930                           
   931                           ;main.c: 52: ANSELHbits.ANS11 = 0;
   932  0671  1189               	bcf	9,3	;volatile
   933                           
   934                           ;main.c: 53: ANSELHbits.ANS9 = 0;
   935  0672  1089               	bcf	9,1	;volatile
   936                           
   937                           ;main.c: 54: ANSELHbits.ANS8 = 0;
   938  0673  1009               	bcf	9,0	;volatile
   939                           
   940                           ;main.c: 55: ANSELbits.ANS5 = 0;
   941  0674  1288               	bcf	8,5	;volatile
   942                           
   943                           ;main.c: 57: IOCB = 0x00;
   944  0675  1683               	bsf	3,5	;RP0=1, select bank1
   945  0676  1303               	bcf	3,6	;RP1=0, select bank1
   946  0677  0196               	clrf	22	;volatile
   947                           
   948                           ;main.c: 59: PORTB = 0xFF;
   949  0678  30FF               	movlw	255
   950  0679  1283               	bcf	3,5	;RP0=0, select bank0
   951  067A  1303               	bcf	3,6	;RP1=0, select bank0
   952  067B  0086               	movwf	6	;volatile
   953                           
   954                           ;main.c: 62: uint8_t ucSec;
   955                           ;main.c: 63: uint8_t ucMin;
   956                           ;main.c: 64: uint8_t ucHours;
   957                           ;main.c: 65: uint8_t ucDate;
   958                           ;main.c: 66: uint8_t ucMonth;
   959                           ;main.c: 67: uint8_t ucYear;
   960                           ;main.c: 69: uint8_t ui8SetMode;
   961                           ;main.c: 70: uint8_t ui8SetValue;
   962                           ;main.c: 72: rtc_t rtc;
   963                           ;main.c: 76: ucSec = 0;
   964  067C  01A8               	clrf	main@ucSec
   965                           
   966                           ;main.c: 77: ucMin = 0;
   967  067D  01A9               	clrf	main@ucMin
   968                           
   969                           ;main.c: 78: ucHours = 0;
   970  067E  01AA               	clrf	main@ucHours
   971                           
   972                           ;main.c: 79: ucDate = 0;
   973  067F  01AB               	clrf	main@ucDate
   974                           
   975                           ;main.c: 80: ucMonth = 0;
   976  0680  01AC               	clrf	main@ucMonth
   977                           
   978                           ;main.c: 81: ucYear = 0;
   979  0681  01A6               	clrf	main@ucYear
   980                           
   981                           ;main.c: 83: ui8SetMode = 0;
   982  0682  01A7               	clrf	main@ui8SetMode
   983                           
   984                           ;main.c: 84: ui8SetValue = 0;
   985  0683  01AD               	clrf	main@ui8SetValue
   986                           
   987                           ;main.c: 87: RTC_Init();
   988  0684  120A  118A  241F  120A  118A  	fcall	_RTC_Init
   989                           
   990                           ;main.c: 91: rtc.hour = 0x00;
   991  0689  1283               	bcf	3,5	;RP0=0, select bank0
   992  068A  1303               	bcf	3,6	;RP1=0, select bank0
   993  068B  01B0               	clrf	main@rtc+2
   994                           
   995                           ;main.c: 92: rtc.min = 0x08;
   996  068C  3008               	movlw	8
   997  068D  00A3               	movwf	??_main
   998  068E  0823               	movf	??_main,w
   999  068F  00AF               	movwf	main@rtc+1
  1000                           
  1001                           ;main.c: 93: rtc.sec = 0x30;
  1002  0690  3030               	movlw	48
  1003  0691  00A3               	movwf	??_main
  1004  0692  0823               	movf	??_main,w
  1005  0693  00AE               	movwf	main@rtc
  1006                           
  1007                           ;main.c: 95: rtc.date = 0x31;
  1008  0694  3031               	movlw	49
  1009  0695  00A3               	movwf	??_main
  1010  0696  0823               	movf	??_main,w
  1011  0697  00B2               	movwf	main@rtc+4
  1012                           
  1013                           ;main.c: 96: rtc.month = 0x12;
  1014  0698  3012               	movlw	18
  1015  0699  00A3               	movwf	??_main
  1016  069A  0823               	movf	??_main,w
  1017  069B  00B3               	movwf	main@rtc+5
  1018                           
  1019                           ;main.c: 97: rtc.year = 0x16;
  1020  069C  3016               	movlw	22
  1021  069D  00A3               	movwf	??_main
  1022  069E  0823               	movf	??_main,w
  1023  069F  00B4               	movwf	main@rtc+6
  1024                           
  1025                           ;main.c: 98: rtc.weekDay = 5;
  1026  06A0  3005               	movlw	5
  1027  06A1  00A3               	movwf	??_main
  1028  06A2  0823               	movf	??_main,w
  1029  06A3  00B1               	movwf	main@rtc+3
  1030                           
  1031                           ;main.c: 140: switch(ui8SetMode)
  1032  06A4  2F4F               	goto	l1514
  1033  06A5                     l1546:	
  1034                           ;main.c: 141: {
  1035                           ;main.c: 142: case 1:
  1036                           
  1037                           
  1038                           ;main.c: 143: {
  1039                           ;main.c: 144: if(ui8SetValue == 1)
  1040  06A5  032D               	decf	main@ui8SetValue,w
  1041  06A6  1D03               	btfss	3,2
  1042  06A7  2EB1               	goto	l1556
  1043                           
  1044                           ;main.c: 145: {
  1045                           ;main.c: 146: ui8SetValue = 0;
  1046  06A8  01AD               	clrf	main@ui8SetValue
  1047                           
  1048                           ;main.c: 147: ucSec++;
  1049  06A9  3001               	movlw	1
  1050  06AA  00A3               	movwf	??_main
  1051  06AB  0823               	movf	??_main,w
  1052  06AC  07A8               	addwf	main@ucSec,f
  1053                           
  1054                           ;main.c: 148: if(ucSec >= 60)
  1055  06AD  303C               	movlw	60
  1056  06AE  0228               	subwf	main@ucSec,w
  1057  06AF  1803               	btfsc	3,0
  1058                           
  1059                           ;main.c: 149: {
  1060                           ;main.c: 150: ucSec = 0;
  1061  06B0  01A8               	clrf	main@ucSec
  1062  06B1                     l1556:	
  1063                           
  1064                           ;main.c: 151: }
  1065                           ;main.c: 152: }
  1066                           ;main.c: 154: vDisplay(1,2,3,4);
  1067  06B1  3002               	movlw	2
  1068  06B2  00A3               	movwf	??_main
  1069  06B3  0823               	movf	??_main,w
  1070  06B4  00F5               	movwf	vDisplay@ui8Second
  1071  06B5  3003               	movlw	3
  1072  06B6  00A4               	movwf	??_main+1
  1073  06B7  0824               	movf	??_main+1,w
  1074  06B8  00F6               	movwf	vDisplay@ui8Thrd
  1075  06B9  3004               	movlw	4
  1076  06BA  00A5               	movwf	??_main+2
  1077  06BB  0825               	movf	??_main+2,w
  1078  06BC  00F7               	movwf	vDisplay@ui8Fourth
  1079  06BD  3001               	movlw	1
  1080  06BE  120A  118A  2577  120A  118A  	fcall	_vDisplay
  1081                           
  1082                           ;main.c: 156: break;
  1083  06C3  2F4F               	goto	l1514
  1084  06C4                     l1558:	
  1085                           ;main.c: 157: }
  1086                           ;main.c: 158: case 2:
  1087                           
  1088                           
  1089                           ;main.c: 159: {
  1090                           ;main.c: 160: if(ui8SetValue == 1)
  1091  06C4  1283               	bcf	3,5	;RP0=0, select bank0
  1092  06C5  1303               	bcf	3,6	;RP1=0, select bank0
  1093  06C6  032D               	decf	main@ui8SetValue,w
  1094  06C7  1D03               	btfss	3,2
  1095  06C8  2F4F               	goto	l1514
  1096                           
  1097                           ;main.c: 161: {
  1098                           ;main.c: 162: ui8SetValue = 0;
  1099  06C9  01AD               	clrf	main@ui8SetValue
  1100                           
  1101                           ;main.c: 163: ucMin++;
  1102  06CA  3001               	movlw	1
  1103  06CB  00A3               	movwf	??_main
  1104  06CC  0823               	movf	??_main,w
  1105  06CD  07A9               	addwf	main@ucMin,f
  1106                           
  1107                           ;main.c: 164: if(ucMin >=60)
  1108  06CE  303C               	movlw	60
  1109  06CF  0229               	subwf	main@ucMin,w
  1110  06D0  1C03               	skipc
  1111  06D1  2F4F               	goto	l1514
  1112                           
  1113                           ;main.c: 165: {
  1114                           ;main.c: 166: ucMin = 0;
  1115  06D2  01A9               	clrf	main@ucMin
  1116                           
  1117                           ;main.c: 167: }
  1118                           ;main.c: 168: }
  1119                           ;main.c: 169: break;
  1120  06D3  2F4F               	goto	l1514
  1121  06D4                     l1568:	
  1122                           ;main.c: 170: }
  1123                           ;main.c: 171: case 3:
  1124                           
  1125                           
  1126                           ;main.c: 172: {
  1127                           ;main.c: 173: if(ui8SetValue == 1)
  1128  06D4  032D               	decf	main@ui8SetValue,w
  1129  06D5  1D03               	btfss	3,2
  1130  06D6  2F4F               	goto	l1514
  1131                           
  1132                           ;main.c: 174: {
  1133                           ;main.c: 175: ui8SetValue = 0;
  1134  06D7  01AD               	clrf	main@ui8SetValue
  1135                           
  1136                           ;main.c: 176: ucHours++;
  1137  06D8  3001               	movlw	1
  1138  06D9  00A3               	movwf	??_main
  1139  06DA  0823               	movf	??_main,w
  1140  06DB  07AA               	addwf	main@ucHours,f
  1141                           
  1142                           ;main.c: 177: if(ucHours >=13)
  1143  06DC  300D               	movlw	13
  1144  06DD  022A               	subwf	main@ucHours,w
  1145  06DE  1C03               	skipc
  1146  06DF  2F4F               	goto	l1514
  1147                           
  1148                           ;main.c: 178: {
  1149                           ;main.c: 179: ucHours = 0;
  1150  06E0  01AA               	clrf	main@ucHours
  1151                           
  1152                           ;main.c: 180: }
  1153                           ;main.c: 181: }
  1154                           ;main.c: 182: break;
  1155  06E1  2F4F               	goto	l1514
  1156  06E2                     l1578:	
  1157                           ;main.c: 183: }
  1158                           ;main.c: 184: case 4:
  1159                           
  1160                           
  1161                           ;main.c: 185: {
  1162                           ;main.c: 186: if(ui8SetValue == 1)
  1163  06E2  032D               	decf	main@ui8SetValue,w
  1164  06E3  1D03               	btfss	3,2
  1165  06E4  2F4F               	goto	l1514
  1166                           
  1167                           ;main.c: 187: {
  1168                           ;main.c: 188: ui8SetValue = 0;
  1169  06E5  01AD               	clrf	main@ui8SetValue
  1170                           
  1171                           ;main.c: 189: ucDate++;
  1172  06E6  3001               	movlw	1
  1173  06E7  00A3               	movwf	??_main
  1174  06E8  0823               	movf	??_main,w
  1175  06E9  07AB               	addwf	main@ucDate,f
  1176                           
  1177                           ;main.c: 190: if(ucDate >=31)
  1178  06EA  301F               	movlw	31
  1179  06EB  022B               	subwf	main@ucDate,w
  1180  06EC  1C03               	skipc
  1181  06ED  2F4F               	goto	l1514
  1182                           
  1183                           ;main.c: 191: {
  1184                           ;main.c: 192: ucDate = 0;
  1185  06EE  01AB               	clrf	main@ucDate
  1186                           
  1187                           ;main.c: 193: }
  1188                           ;main.c: 194: }
  1189                           ;main.c: 195: break;
  1190  06EF  2F4F               	goto	l1514
  1191  06F0                     l1588:	
  1192                           ;main.c: 196: }
  1193                           ;main.c: 197: case 5:
  1194                           
  1195                           
  1196                           ;main.c: 198: {
  1197                           ;main.c: 199: if(ui8SetValue == 1)
  1198  06F0  032D               	decf	main@ui8SetValue,w
  1199  06F1  1D03               	btfss	3,2
  1200  06F2  2F4F               	goto	l1514
  1201                           
  1202                           ;main.c: 200: {
  1203                           ;main.c: 201: ui8SetValue = 0;
  1204  06F3  01AD               	clrf	main@ui8SetValue
  1205                           
  1206                           ;main.c: 202: ucMonth++;
  1207  06F4  3001               	movlw	1
  1208  06F5  00A3               	movwf	??_main
  1209  06F6  0823               	movf	??_main,w
  1210  06F7  07AC               	addwf	main@ucMonth,f
  1211                           
  1212                           ;main.c: 203: if(ucMonth >=13)
  1213  06F8  300D               	movlw	13
  1214  06F9  022C               	subwf	main@ucMonth,w
  1215  06FA  1C03               	skipc
  1216  06FB  2F4F               	goto	l1514
  1217                           
  1218                           ;main.c: 204: {
  1219                           ;main.c: 205: ucMonth = 0;
  1220  06FC  01AC               	clrf	main@ucMonth
  1221                           
  1222                           ;main.c: 206: }
  1223                           ;main.c: 207: }
  1224                           ;main.c: 208: break;
  1225  06FD  2F4F               	goto	l1514
  1226  06FE                     l1598:	
  1227                           ;main.c: 209: }
  1228                           ;main.c: 210: case 6:
  1229                           
  1230                           
  1231                           ;main.c: 211: {
  1232                           ;main.c: 212: if(ui8SetValue == 1)
  1233  06FE  032D               	decf	main@ui8SetValue,w
  1234  06FF  1D03               	btfss	3,2
  1235  0700  2F4F               	goto	l1514
  1236                           
  1237                           ;main.c: 213: {
  1238                           ;main.c: 214: ui8SetValue = 0;
  1239  0701  01AD               	clrf	main@ui8SetValue
  1240                           
  1241                           ;main.c: 215: ucYear++;
  1242  0702  3001               	movlw	1
  1243  0703  00A3               	movwf	??_main
  1244  0704  0823               	movf	??_main,w
  1245  0705  07A6               	addwf	main@ucYear,f
  1246                           
  1247                           ;main.c: 216: if(ucYear >= 2099)
  1248  0706  2F4F               	goto	l1514
  1249  0707                     l1606:	
  1250                           ;main.c: 224: {
  1251                           ;main.c: 226: }
  1252                           ;main.c: 227: case 8:
  1253                           
  1254                           ;main.c: 222: }
  1255                           ;main.c: 223: case 7:
  1256                           
  1257                           ;main.c: 219: }
  1258                           ;main.c: 220: }
  1259                           ;main.c: 221: break;
  1260                           
  1261                           ;main.c: 217: {
  1262                           ;main.c: 218: ucYear = 0;
  1263                           
  1264                           
  1265                           ;main.c: 228: {
  1266                           ;main.c: 230: rtc.sec = ui8Dec2HexDisplay(ucSec);
  1267  0707  0828               	movf	main@ucSec,w
  1268  0708  120A  118A  243F  120A  118A  	fcall	_ui8Dec2HexDisplay
  1269  070D  1283               	bcf	3,5	;RP0=0, select bank0
  1270  070E  1303               	bcf	3,6	;RP1=0, select bank0
  1271  070F  00A3               	movwf	??_main
  1272  0710  0823               	movf	??_main,w
  1273  0711  00AE               	movwf	main@rtc
  1274                           
  1275                           ;main.c: 231: rtc.min = ui8Dec2HexDisplay(ucMin);
  1276  0712  0829               	movf	main@ucMin,w
  1277  0713  120A  118A  243F  120A  118A  	fcall	_ui8Dec2HexDisplay
  1278  0718  1283               	bcf	3,5	;RP0=0, select bank0
  1279  0719  1303               	bcf	3,6	;RP1=0, select bank0
  1280  071A  00A3               	movwf	??_main
  1281  071B  0823               	movf	??_main,w
  1282  071C  00AF               	movwf	main@rtc+1
  1283                           
  1284                           ;main.c: 232: rtc.hour = ui8Dec2HexDisplay(ucHours);
  1285  071D  082A               	movf	main@ucHours,w
  1286  071E  120A  118A  243F  120A  118A  	fcall	_ui8Dec2HexDisplay
  1287  0723  1283               	bcf	3,5	;RP0=0, select bank0
  1288  0724  1303               	bcf	3,6	;RP1=0, select bank0
  1289  0725  00A3               	movwf	??_main
  1290  0726  0823               	movf	??_main,w
  1291  0727  00B0               	movwf	main@rtc+2
  1292                           
  1293                           ;main.c: 233: rtc.date = ui8Dec2HexDisplay(ucDate);
  1294  0728  082B               	movf	main@ucDate,w
  1295  0729  120A  118A  243F  120A  118A  	fcall	_ui8Dec2HexDisplay
  1296  072E  1283               	bcf	3,5	;RP0=0, select bank0
  1297  072F  1303               	bcf	3,6	;RP1=0, select bank0
  1298  0730  00A3               	movwf	??_main
  1299  0731  0823               	movf	??_main,w
  1300  0732  00B2               	movwf	main@rtc+4
  1301                           
  1302                           ;main.c: 234: rtc.month = ui8Dec2HexDisplay(ucMonth);
  1303  0733  082C               	movf	main@ucMonth,w
  1304  0734  120A  118A  243F  120A  118A  	fcall	_ui8Dec2HexDisplay
  1305  0739  1283               	bcf	3,5	;RP0=0, select bank0
  1306  073A  1303               	bcf	3,6	;RP1=0, select bank0
  1307  073B  00A3               	movwf	??_main
  1308  073C  0823               	movf	??_main,w
  1309  073D  00B3               	movwf	main@rtc+5
  1310                           
  1311                           ;main.c: 235: rtc.year = ui8Dec2HexDisplay(ucYear);
  1312  073E  0826               	movf	main@ucYear,w
  1313  073F  120A  118A  243F  120A  118A  	fcall	_ui8Dec2HexDisplay
  1314  0744  1283               	bcf	3,5	;RP0=0, select bank0
  1315  0745  1303               	bcf	3,6	;RP1=0, select bank0
  1316  0746  00A3               	movwf	??_main
  1317  0747  0823               	movf	??_main,w
  1318  0748  00B4               	movwf	main@rtc+6
  1319                           
  1320                           ;main.c: 238: RTC_SetDateTime(&rtc);
  1321  0749  302E               	movlw	(low (main@rtc| 0))& (0+255)
  1322  074A  120A  118A  251D  120A  118A  	fcall	_RTC_SetDateTime
  1323  074F                     l1514:	
  1324                           ;main.c: 106: while(1)
  1325                           
  1326                           ;main.c: 244: }
  1327                           ;main.c: 245: }
  1328                           
  1329                           ;main.c: 242: {
  1330                           ;main.c: 243: break;
  1331                           
  1332                           ;main.c: 240: }
  1333                           ;main.c: 241: default:
  1334                           
  1335                           ;main.c: 239: break;
  1336                           
  1337                           
  1338                           ;main.c: 107: {
  1339                           ;main.c: 110: if(PORTBbits.RB1 == 0)
  1340  074F  1283               	bcf	3,5	;RP0=0, select bank0
  1341  0750  1303               	bcf	3,6	;RP1=0, select bank0
  1342  0751  1886               	btfsc	6,1	;volatile
  1343  0752  2F62               	goto	l1522
  1344                           
  1345                           ;main.c: 111: {
  1346                           ;main.c: 112: DELAY_ms(100);
  1347  0753  3064               	movlw	100
  1348  0754  00F3               	movwf	DELAY_ms@ms_count
  1349  0755  3000               	movlw	0
  1350  0756  00F4               	movwf	DELAY_ms@ms_count+1
  1351  0757  120A  118A  23D5  120A  118A  	fcall	_DELAY_ms
  1352                           
  1353                           ;main.c: 113: if(PORTBbits.RB1 == 0)
  1354  075C  1283               	bcf	3,5	;RP0=0, select bank0
  1355  075D  1303               	bcf	3,6	;RP1=0, select bank0
  1356  075E  1886               	btfsc	6,1	;volatile
  1357  075F  2F62               	goto	l1522
  1358                           
  1359                           ;main.c: 114: {
  1360                           ;main.c: 115: ui8SetMode = 1;
  1361  0760  01A7               	clrf	main@ui8SetMode
  1362  0761  0AA7               	incf	main@ui8SetMode,f
  1363  0762                     l1522:	
  1364                           
  1365                           ;main.c: 116: }
  1366                           ;main.c: 118: }
  1367                           ;main.c: 120: if(ui8SetMode!= 0)
  1368  0762  0827               	movf	main@ui8SetMode,w
  1369  0763  1903               	btfsc	3,2
  1370  0764  2FDD               	goto	l1614
  1371                           
  1372                           ;main.c: 121: {
  1373                           ;main.c: 122: if(PORTBbits.RB0 == 0)
  1374  0765  1806               	btfsc	6,0	;volatile
  1375  0766  2F76               	goto	l1532
  1376                           
  1377                           ;main.c: 123: {
  1378                           ;main.c: 124: DELAY_ms(100);
  1379  0767  3064               	movlw	100
  1380  0768  00F3               	movwf	DELAY_ms@ms_count
  1381  0769  3000               	movlw	0
  1382  076A  00F4               	movwf	DELAY_ms@ms_count+1
  1383  076B  120A  118A  23D5  120A  118A  	fcall	_DELAY_ms
  1384                           
  1385                           ;main.c: 125: if(PORTBbits.RB0 == 0)
  1386  0770  1283               	bcf	3,5	;RP0=0, select bank0
  1387  0771  1303               	bcf	3,6	;RP1=0, select bank0
  1388  0772  1806               	btfsc	6,0	;volatile
  1389  0773  2F76               	goto	l1532
  1390                           
  1391                           ;main.c: 126: {
  1392                           ;main.c: 127: ui8SetValue = 1;
  1393  0774  01AD               	clrf	main@ui8SetValue
  1394  0775  0AAD               	incf	main@ui8SetValue,f
  1395  0776                     l1532:	
  1396                           
  1397                           ;main.c: 128: }
  1398                           ;main.c: 129: }
  1399                           ;main.c: 131: RTC_GetDateTime(&rtc);
  1400  0776  302E               	movlw	(low (main@rtc| 0))& (0+255)
  1401  0777  120A  118A  25DB  120A  118A  	fcall	_RTC_GetDateTime
  1402                           
  1403                           ;main.c: 132: ucSec = ui8Hex2DECDisplay(rtc.sec);
  1404  077C  1283               	bcf	3,5	;RP0=0, select bank0
  1405  077D  1303               	bcf	3,6	;RP1=0, select bank0
  1406  077E  082E               	movf	main@rtc,w
  1407  077F  120A  118A  23E9  120A  118A  	fcall	_ui8Hex2DECDisplay
  1408  0784  1283               	bcf	3,5	;RP0=0, select bank0
  1409  0785  1303               	bcf	3,6	;RP1=0, select bank0
  1410  0786  00A3               	movwf	??_main
  1411  0787  0823               	movf	??_main,w
  1412  0788  00A8               	movwf	main@ucSec
  1413                           
  1414                           ;main.c: 133: ucMin = ui8Hex2DECDisplay(rtc.min);
  1415  0789  082F               	movf	main@rtc+1,w
  1416  078A  120A  118A  23E9  120A  118A  	fcall	_ui8Hex2DECDisplay
  1417  078F  1283               	bcf	3,5	;RP0=0, select bank0
  1418  0790  1303               	bcf	3,6	;RP1=0, select bank0
  1419  0791  00A3               	movwf	??_main
  1420  0792  0823               	movf	??_main,w
  1421  0793  00A9               	movwf	main@ucMin
  1422                           
  1423                           ;main.c: 134: ucHours = ui8Hex2DECDisplay(rtc.hour);
  1424  0794  0830               	movf	main@rtc+2,w
  1425  0795  120A  118A  23E9  120A  118A  	fcall	_ui8Hex2DECDisplay
  1426  079A  1283               	bcf	3,5	;RP0=0, select bank0
  1427  079B  1303               	bcf	3,6	;RP1=0, select bank0
  1428  079C  00A3               	movwf	??_main
  1429  079D  0823               	movf	??_main,w
  1430  079E  00AA               	movwf	main@ucHours
  1431                           
  1432                           ;main.c: 135: ucDate = ui8Hex2DECDisplay(rtc.date);
  1433  079F  0832               	movf	main@rtc+4,w
  1434  07A0  120A  118A  23E9  120A  118A  	fcall	_ui8Hex2DECDisplay
  1435  07A5  1283               	bcf	3,5	;RP0=0, select bank0
  1436  07A6  1303               	bcf	3,6	;RP1=0, select bank0
  1437  07A7  00A3               	movwf	??_main
  1438  07A8  0823               	movf	??_main,w
  1439  07A9  00AB               	movwf	main@ucDate
  1440                           
  1441                           ;main.c: 136: ucMonth = ui8Hex2DECDisplay(rtc.month);
  1442  07AA  0833               	movf	main@rtc+5,w
  1443  07AB  120A  118A  23E9  120A  118A  	fcall	_ui8Hex2DECDisplay
  1444  07B0  1283               	bcf	3,5	;RP0=0, select bank0
  1445  07B1  1303               	bcf	3,6	;RP1=0, select bank0
  1446  07B2  00A3               	movwf	??_main
  1447  07B3  0823               	movf	??_main,w
  1448  07B4  00AC               	movwf	main@ucMonth
  1449                           
  1450                           ;main.c: 137: ucYear = ui8Hex2DECDisplay(rtc.year);
  1451  07B5  0834               	movf	main@rtc+6,w
  1452  07B6  120A  118A  23E9  120A  118A  	fcall	_ui8Hex2DECDisplay
  1453  07BB  1283               	bcf	3,5	;RP0=0, select bank0
  1454  07BC  1303               	bcf	3,6	;RP1=0, select bank0
  1455  07BD  00A3               	movwf	??_main
  1456  07BE  0823               	movf	??_main,w
  1457  07BF  00A6               	movwf	main@ucYear
  1458  07C0  1283               	bcf	3,5	;RP0=0, select bank0
  1459  07C1  1303               	bcf	3,6	;RP1=0, select bank0
  1460  07C2  0827               	movf	main@ui8SetMode,w
  1461                           
  1462                           ; Switch size 1, requested type "space"
  1463                           ; Number of cases is 8, Range of values is 1 to 8
  1464                           ; switch strategies available:
  1465                           ; Name         Instructions Cycles
  1466                           ; simple_byte           25    13 (average)
  1467                           ; direct_byte           35    11 (fixed)
  1468                           ; jumptable            263     9 (fixed)
  1469                           ;	Chosen strategy is simple_byte
  1470  07C3  3A01               	xorlw	1	; case 1
  1471  07C4  1903               	skipnz
  1472  07C5  2EA5               	goto	l1546
  1473  07C6  3A03               	xorlw	3	; case 2
  1474  07C7  1903               	skipnz
  1475  07C8  2EC4               	goto	l1558
  1476  07C9  3A01               	xorlw	1	; case 3
  1477  07CA  1903               	skipnz
  1478  07CB  2ED4               	goto	l1568
  1479  07CC  3A07               	xorlw	7	; case 4
  1480  07CD  1903               	skipnz
  1481  07CE  2EE2               	goto	l1578
  1482  07CF  3A01               	xorlw	1	; case 5
  1483  07D0  1903               	skipnz
  1484  07D1  2EF0               	goto	l1588
  1485  07D2  3A03               	xorlw	3	; case 6
  1486  07D3  1903               	skipnz
  1487  07D4  2EFE               	goto	l1598
  1488  07D5  3A01               	xorlw	1	; case 7
  1489  07D6  1903               	skipnz
  1490  07D7  2F07               	goto	l1606
  1491  07D8  3A0F               	xorlw	15	; case 8
  1492  07D9  1903               	skipnz
  1493  07DA  2F07               	goto	l1606
  1494  07DB  2F4F               	goto	l1514
  1495                           
  1496                           ;main.c: 247: }
  1497  07DC  2F4F               	goto	l1514
  1498  07DD                     l1614:	
  1499                           
  1500                           ;main.c: 248: else
  1501                           ;main.c: 249: {
  1502                           ;main.c: 251: vDisplay(5,6,7,8);
  1503  07DD  3006               	movlw	6
  1504  07DE  00A3               	movwf	??_main
  1505  07DF  0823               	movf	??_main,w
  1506  07E0  00F5               	movwf	vDisplay@ui8Second
  1507  07E1  3007               	movlw	7
  1508  07E2  00A4               	movwf	??_main+1
  1509  07E3  0824               	movf	??_main+1,w
  1510  07E4  00F6               	movwf	vDisplay@ui8Thrd
  1511  07E5  3008               	movlw	8
  1512  07E6  00A5               	movwf	??_main+2
  1513  07E7  0825               	movf	??_main+2,w
  1514  07E8  00F7               	movwf	vDisplay@ui8Fourth
  1515  07E9  3005               	movlw	5
  1516  07EA  120A  118A  2577  120A  118A  	fcall	_vDisplay
  1517  07EF  2F4F               	goto	l1514
  1518  07F0                     __end_of_main:	
  1519                           ;main.c: 252: }
  1520                           ;main.c: 253: }
  1521                           ;main.c: 255: return (0);
  1522                           ;	Return value of _main is never used
  1523                           
  1524                           
  1525                           	psect	text1
  1526  0577                     __ptext1:	
  1527 ;; *************** function _vDisplay *****************
  1528 ;; Defined at:
  1529 ;;		line 12 in file "display.c"
  1530 ;; Parameters:    Size  Location     Type
  1531 ;;  ui8First        1    wreg     unsigned char 
  1532 ;;  ui8Second       1    4[COMMON] unsigned char 
  1533 ;;  ui8Thrd         1    5[COMMON] unsigned char 
  1534 ;;  ui8Fourth       1    6[COMMON] unsigned char 
  1535 ;; Auto vars:     Size  Location     Type
  1536 ;;  ui8First        1    8[COMMON] unsigned char 
  1537 ;; Return value:  Size  Location     Type
  1538 ;;                  1    wreg      void 
  1539 ;; Registers used:
  1540 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1541 ;; Tracked objects:
  1542 ;;		On entry : 0/0
  1543 ;;		On exit  : 0/0
  1544 ;;		Unchanged: 0/0
  1545 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1546 ;;      Params:         3       0       0       0       0
  1547 ;;      Locals:         1       0       0       0       0
  1548 ;;      Temps:          1       0       0       0       0
  1549 ;;      Totals:         5       0       0       0       0
  1550 ;;Total ram usage:        5 bytes
  1551 ;; Hardware stack levels used:    1
  1552 ;; Hardware stack levels required when called:    2
  1553 ;; This function calls:
  1554 ;;		_DELAY_ms
  1555 ;; This function is called by:
  1556 ;;		_main
  1557 ;; This function uses a non-reentrant model
  1558 ;;
  1559                           
  1560                           
  1561                           ;psect for function _vDisplay
  1562  0577                     _vDisplay:	
  1563                           
  1564                           ;incstack = 0
  1565                           ; Regs used in _vDisplay: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1566                           ;vDisplay@ui8First stored from wreg
  1567  0577  00F9               	movwf	vDisplay@ui8First
  1568                           
  1569                           ;display.c: 14: PORTD = ucBCD_ARR[ui8Fourth];
  1570  0578  0877               	movf	vDisplay@ui8Fourth,w
  1571  0579  3E35               	addlw	(low (_ucBCD_ARR| 0))& (0+255)
  1572  057A  0084               	movwf	4
  1573  057B  1383               	bcf	3,7	;select IRP bank0
  1574  057C  0800               	movf	0,w
  1575  057D  1283               	bcf	3,5	;RP0=0, select bank0
  1576  057E  1303               	bcf	3,6	;RP1=0, select bank0
  1577  057F  0088               	movwf	8	;volatile
  1578                           
  1579                           ;display.c: 15: PORTB |= 0x3C;
  1580  0580  303C               	movlw	60
  1581  0581  00F8               	movwf	??_vDisplay
  1582  0582  0878               	movf	??_vDisplay,w
  1583  0583  0486               	iorwf	6,f	;volatile
  1584                           
  1585                           ;display.c: 16: PORTB &= 0xDF;
  1586  0584  30DF               	movlw	223
  1587  0585  00F8               	movwf	??_vDisplay
  1588  0586  0878               	movf	??_vDisplay,w
  1589  0587  0586               	andwf	6,f	;volatile
  1590                           
  1591                           ;display.c: 17: DELAY_ms(5);
  1592  0588  3005               	movlw	5
  1593  0589  00F3               	movwf	DELAY_ms@ms_count
  1594  058A  3000               	movlw	0
  1595  058B  00F4               	movwf	DELAY_ms@ms_count+1
  1596  058C  120A  118A  23D5  120A  118A  	fcall	_DELAY_ms
  1597                           
  1598                           ;display.c: 19: PORTD = ucBCD_ARR[ui8Thrd];
  1599  0591  0876               	movf	vDisplay@ui8Thrd,w
  1600  0592  3E35               	addlw	(low (_ucBCD_ARR| 0))& (0+255)
  1601  0593  0084               	movwf	4
  1602  0594  1383               	bcf	3,7	;select IRP bank0
  1603  0595  0800               	movf	0,w
  1604  0596  1283               	bcf	3,5	;RP0=0, select bank0
  1605  0597  1303               	bcf	3,6	;RP1=0, select bank0
  1606  0598  0088               	movwf	8	;volatile
  1607                           
  1608                           ;display.c: 20: PORTB |= 0x3C;
  1609  0599  303C               	movlw	60
  1610  059A  00F8               	movwf	??_vDisplay
  1611  059B  0878               	movf	??_vDisplay,w
  1612  059C  0486               	iorwf	6,f	;volatile
  1613                           
  1614                           ;display.c: 21: PORTB &= 0xEF;
  1615  059D  30EF               	movlw	239
  1616  059E  00F8               	movwf	??_vDisplay
  1617  059F  0878               	movf	??_vDisplay,w
  1618  05A0  0586               	andwf	6,f	;volatile
  1619                           
  1620                           ;display.c: 22: DELAY_ms(5);
  1621  05A1  3005               	movlw	5
  1622  05A2  00F3               	movwf	DELAY_ms@ms_count
  1623  05A3  3000               	movlw	0
  1624  05A4  00F4               	movwf	DELAY_ms@ms_count+1
  1625  05A5  120A  118A  23D5  120A  118A  	fcall	_DELAY_ms
  1626                           
  1627                           ;display.c: 24: PORTD = ucBCD_ARR[ui8Second];
  1628  05AA  0875               	movf	vDisplay@ui8Second,w
  1629  05AB  3E35               	addlw	(low (_ucBCD_ARR| 0))& (0+255)
  1630  05AC  0084               	movwf	4
  1631  05AD  1383               	bcf	3,7	;select IRP bank0
  1632  05AE  0800               	movf	0,w
  1633  05AF  1283               	bcf	3,5	;RP0=0, select bank0
  1634  05B0  1303               	bcf	3,6	;RP1=0, select bank0
  1635  05B1  0088               	movwf	8	;volatile
  1636                           
  1637                           ;display.c: 25: PORTB |= 0x3C;
  1638  05B2  303C               	movlw	60
  1639  05B3  00F8               	movwf	??_vDisplay
  1640  05B4  0878               	movf	??_vDisplay,w
  1641  05B5  0486               	iorwf	6,f	;volatile
  1642                           
  1643                           ;display.c: 26: PORTB &= 0xF7;
  1644  05B6  30F7               	movlw	247
  1645  05B7  00F8               	movwf	??_vDisplay
  1646  05B8  0878               	movf	??_vDisplay,w
  1647  05B9  0586               	andwf	6,f	;volatile
  1648                           
  1649                           ;display.c: 27: DELAY_ms(5);
  1650  05BA  3005               	movlw	5
  1651  05BB  00F3               	movwf	DELAY_ms@ms_count
  1652  05BC  3000               	movlw	0
  1653  05BD  00F4               	movwf	DELAY_ms@ms_count+1
  1654  05BE  120A  118A  23D5  120A  118A  	fcall	_DELAY_ms
  1655                           
  1656                           ;display.c: 29: PORTD = ucBCD_ARR[ui8First];
  1657  05C3  0879               	movf	vDisplay@ui8First,w
  1658  05C4  3E35               	addlw	(low (_ucBCD_ARR| 0))& (0+255)
  1659  05C5  0084               	movwf	4
  1660  05C6  1383               	bcf	3,7	;select IRP bank0
  1661  05C7  0800               	movf	0,w
  1662  05C8  1283               	bcf	3,5	;RP0=0, select bank0
  1663  05C9  1303               	bcf	3,6	;RP1=0, select bank0
  1664  05CA  0088               	movwf	8	;volatile
  1665                           
  1666                           ;display.c: 30: PORTB |= 0x3C;
  1667  05CB  303C               	movlw	60
  1668  05CC  00F8               	movwf	??_vDisplay
  1669  05CD  0878               	movf	??_vDisplay,w
  1670  05CE  0486               	iorwf	6,f	;volatile
  1671                           
  1672                           ;display.c: 31: PORTB &= 0xFB;
  1673  05CF  30FB               	movlw	251
  1674  05D0  00F8               	movwf	??_vDisplay
  1675  05D1  0878               	movf	??_vDisplay,w
  1676  05D2  0586               	andwf	6,f	;volatile
  1677                           
  1678                           ;display.c: 32: DELAY_ms(5);
  1679  05D3  3005               	movlw	5
  1680  05D4  00F3               	movwf	DELAY_ms@ms_count
  1681  05D5  3000               	movlw	0
  1682  05D6  00F4               	movwf	DELAY_ms@ms_count+1
  1683  05D7  120A  118A  23D5   	fcall	_DELAY_ms
  1684  05DA  0008               	return
  1685  05DB                     __end_of_vDisplay:	
  1686                           
  1687                           	psect	text2
  1688  03D5                     __ptext2:	
  1689 ;; *************** function _DELAY_ms *****************
  1690 ;; Defined at:
  1691 ;;		line 75 in file "delay.c"
  1692 ;; Parameters:    Size  Location     Type
  1693 ;;  ms_count        2    2[COMMON] unsigned int 
  1694 ;; Auto vars:     Size  Location     Type
  1695 ;;		None
  1696 ;; Return value:  Size  Location     Type
  1697 ;;                  1    wreg      void 
  1698 ;; Registers used:
  1699 ;;		wreg, status,2, status,0, pclath, cstack
  1700 ;; Tracked objects:
  1701 ;;		On entry : 0/0
  1702 ;;		On exit  : 0/0
  1703 ;;		Unchanged: 0/0
  1704 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1705 ;;      Params:         2       0       0       0       0
  1706 ;;      Locals:         0       0       0       0       0
  1707 ;;      Temps:          0       0       0       0       0
  1708 ;;      Totals:         2       0       0       0       0
  1709 ;;Total ram usage:        2 bytes
  1710 ;; Hardware stack levels used:    1
  1711 ;; Hardware stack levels required when called:    1
  1712 ;; This function calls:
  1713 ;;		_DELAY_us
  1714 ;; This function is called by:
  1715 ;;		_main
  1716 ;;		_vDisplay
  1717 ;;		_DELAY_sec
  1718 ;; This function uses a non-reentrant model
  1719 ;;
  1720                           
  1721                           
  1722                           ;psect for function _DELAY_ms
  1723  03D5                     _DELAY_ms:	
  1724  03D5                     l1206:	
  1725                           ;delay.c: 77: while (ms_count != 0)
  1726                           
  1727                           ;incstack = 0
  1728                           ; Regs used in _DELAY_ms: [wreg+status,2+status,0+pclath+cstack]
  1729                           
  1730  03D5  0873               	movf	DELAY_ms@ms_count,w
  1731  03D6  0474               	iorwf	DELAY_ms@ms_count+1,w
  1732  03D7  1903               	btfsc	3,2
  1733  03D8  0008               	return
  1734                           
  1735                           ;delay.c: 78: {
  1736                           ;delay.c: 79: DELAY_us(300u);
  1737  03D9  302C               	movlw	44
  1738  03DA  00F1               	movwf	DELAY_us@us_count
  1739  03DB  3001               	movlw	1
  1740  03DC  00F2               	movwf	DELAY_us@us_count+1
  1741  03DD  120A  118A  238D  120A  118A  	fcall	_DELAY_us
  1742                           
  1743                           ;delay.c: 80: ms_count--;
  1744  03E2  3001               	movlw	1
  1745  03E3  02F3               	subwf	DELAY_ms@ms_count,f
  1746  03E4  3000               	movlw	0
  1747  03E5  1C03               	skipc
  1748  03E6  03F4               	decf	DELAY_ms@ms_count+1,f
  1749  03E7  02F4               	subwf	DELAY_ms@ms_count+1,f
  1750  03E8  2BD5               	goto	l1206
  1751  03E9                     __end_of_DELAY_ms:	
  1752                           
  1753                           	psect	text3
  1754  038D                     __ptext3:	
  1755 ;; *************** function _DELAY_us *****************
  1756 ;; Defined at:
  1757 ;;		line 56 in file "delay.c"
  1758 ;; Parameters:    Size  Location     Type
  1759 ;;  us_count        2    0[COMMON] unsigned int 
  1760 ;; Auto vars:     Size  Location     Type
  1761 ;;		None
  1762 ;; Return value:  Size  Location     Type
  1763 ;;                  1    wreg      void 
  1764 ;; Registers used:
  1765 ;;		wreg, status,2, status,0
  1766 ;; Tracked objects:
  1767 ;;		On entry : 0/0
  1768 ;;		On exit  : 0/0
  1769 ;;		Unchanged: 0/0
  1770 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1771 ;;      Params:         2       0       0       0       0
  1772 ;;      Locals:         0       0       0       0       0
  1773 ;;      Temps:          0       0       0       0       0
  1774 ;;      Totals:         2       0       0       0       0
  1775 ;;Total ram usage:        2 bytes
  1776 ;; Hardware stack levels used:    1
  1777 ;; This function calls:
  1778 ;;		Nothing
  1779 ;; This function is called by:
  1780 ;;		_DELAY_ms
  1781 ;;		_vSendData595
  1782 ;; This function uses a non-reentrant model
  1783 ;;
  1784                           
  1785                           
  1786                           ;psect for function _DELAY_us
  1787  038D                     _DELAY_us:	
  1788  038D                     l1184:	
  1789                           ;delay.c: 58: while (us_count != 0)
  1790                           
  1791                           ;incstack = 0
  1792                           ; Regs used in _DELAY_us: [wreg+status,2+status,0]
  1793                           
  1794  038D  0871               	movf	DELAY_us@us_count,w
  1795  038E  0472               	iorwf	DELAY_us@us_count+1,w
  1796  038F  1903               	btfsc	3,2
  1797  0390  0008               	return
  1798                           
  1799                           ;delay.c: 59: {
  1800                           ;delay.c: 60: us_count--;
  1801  0391  3001               	movlw	1
  1802  0392  02F1               	subwf	DELAY_us@us_count,f
  1803  0393  3000               	movlw	0
  1804  0394  1C03               	skipc
  1805  0395  03F2               	decf	DELAY_us@us_count+1,f
  1806  0396  02F2               	subwf	DELAY_us@us_count+1,f
  1807  0397  2B8D               	goto	l1184
  1808  0398                     __end_of_DELAY_us:	
  1809                           
  1810                           	psect	text4
  1811  03E9                     __ptext4:	
  1812 ;; *************** function _ui8Hex2DECDisplay *****************
  1813 ;; Defined at:
  1814 ;;		line 50 in file "display.c"
  1815 ;; Parameters:    Size  Location     Type
  1816 ;;  ui8Input        1    wreg     unsigned char 
  1817 ;; Auto vars:     Size  Location     Type
  1818 ;;  ui8Input        1    7[COMMON] unsigned char 
  1819 ;;  ui8Temp         1    6[COMMON] unsigned char 
  1820 ;; Return value:  Size  Location     Type
  1821 ;;                  1    wreg      unsigned char 
  1822 ;; Registers used:
  1823 ;;		wreg, status,2, status,0, pclath, cstack
  1824 ;; Tracked objects:
  1825 ;;		On entry : 0/0
  1826 ;;		On exit  : 0/0
  1827 ;;		Unchanged: 0/0
  1828 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1829 ;;      Params:         0       0       0       0       0
  1830 ;;      Locals:         2       0       0       0       0
  1831 ;;      Temps:          2       0       0       0       0
  1832 ;;      Totals:         4       0       0       0       0
  1833 ;;Total ram usage:        4 bytes
  1834 ;; Hardware stack levels used:    1
  1835 ;; Hardware stack levels required when called:    1
  1836 ;; This function calls:
  1837 ;;		___bmul
  1838 ;; This function is called by:
  1839 ;;		_main
  1840 ;; This function uses a non-reentrant model
  1841 ;;
  1842                           
  1843                           
  1844                           ;psect for function _ui8Hex2DECDisplay
  1845  03E9                     _ui8Hex2DECDisplay:	
  1846                           
  1847                           ;incstack = 0
  1848                           ; Regs used in _ui8Hex2DECDisplay: [wreg+status,2+status,0+pclath+cstack]
  1849                           ;ui8Hex2DECDisplay@ui8Input stored from wreg
  1850  03E9  00F8               	movwf	ui8Hex2DECDisplay@ui8Input
  1851                           
  1852                           ;display.c: 53: uint8_t ui8Temp;
  1853                           ;display.c: 54: ui8Temp = ui8Input & 0xF0;
  1854  03EA  0878               	movf	ui8Hex2DECDisplay@ui8Input,w
  1855  03EB  39F0               	andlw	240
  1856  03EC  00F5               	movwf	??_ui8Hex2DECDisplay
  1857  03ED  0875               	movf	??_ui8Hex2DECDisplay,w
  1858  03EE  00F7               	movwf	ui8Hex2DECDisplay@ui8Temp
  1859                           
  1860                           ;display.c: 55: ui8Temp >>= 4;
  1861  03EF  0EF7               	swapf	ui8Hex2DECDisplay@ui8Temp,f
  1862  03F0  300F               	movlw	15
  1863  03F1  05F7               	andwf	ui8Hex2DECDisplay@ui8Temp,f
  1864                           
  1865                           ;display.c: 56: return ((ui8Temp * 10) + (ui8Input & 0x0F));
  1866  03F2  300F               	movlw	15
  1867  03F3  0578               	andwf	ui8Hex2DECDisplay@ui8Input,w
  1868  03F4  00F5               	movwf	??_ui8Hex2DECDisplay
  1869  03F5  300A               	movlw	10
  1870  03F6  00F6               	movwf	??_ui8Hex2DECDisplay+1
  1871  03F7  0876               	movf	??_ui8Hex2DECDisplay+1,w
  1872  03F8  00F1               	movwf	___bmul@multiplicand
  1873  03F9  0877               	movf	ui8Hex2DECDisplay@ui8Temp,w
  1874  03FA  120A  118A  23B3   	fcall	___bmul
  1875  03FD  0775               	addwf	??_ui8Hex2DECDisplay,w
  1876  03FE  0008               	return
  1877  03FF                     __end_of_ui8Hex2DECDisplay:	
  1878                           
  1879                           	psect	text5
  1880  03B3                     __ptext5:	
  1881 ;; *************** function ___bmul *****************
  1882 ;; Defined at:
  1883 ;;		line 4 in file "/usr/microchip/xc8/v1.43/sources/common/Umul8.c"
  1884 ;; Parameters:    Size  Location     Type
  1885 ;;  multiplier      1    wreg     unsigned char 
  1886 ;;  multiplicand    1    0[COMMON] unsigned char 
  1887 ;; Auto vars:     Size  Location     Type
  1888 ;;  multiplier      1    3[COMMON] unsigned char 
  1889 ;;  product         1    2[COMMON] unsigned char 
  1890 ;; Return value:  Size  Location     Type
  1891 ;;                  1    wreg      unsigned char 
  1892 ;; Registers used:
  1893 ;;		wreg, status,2, status,0
  1894 ;; Tracked objects:
  1895 ;;		On entry : 0/0
  1896 ;;		On exit  : 0/0
  1897 ;;		Unchanged: 0/0
  1898 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1899 ;;      Params:         1       0       0       0       0
  1900 ;;      Locals:         2       0       0       0       0
  1901 ;;      Temps:          1       0       0       0       0
  1902 ;;      Totals:         4       0       0       0       0
  1903 ;;Total ram usage:        4 bytes
  1904 ;; Hardware stack levels used:    1
  1905 ;; This function calls:
  1906 ;;		Nothing
  1907 ;; This function is called by:
  1908 ;;		_ui8Hex2DECDisplay
  1909 ;; This function uses a non-reentrant model
  1910 ;;
  1911                           
  1912                           
  1913                           ;psect for function ___bmul
  1914  03B3                     ___bmul:	
  1915                           
  1916                           ;incstack = 0
  1917                           ; Regs used in ___bmul: [wreg+status,2+status,0]
  1918                           ;___bmul@multiplier stored from wreg
  1919  03B3  00F4               	movwf	___bmul@multiplier
  1920  03B4  01F3               	clrf	___bmul@product
  1921  03B5                     l1240:	
  1922  03B5  1C74               	btfss	___bmul@multiplier,0
  1923  03B6  2BBB               	goto	l1244
  1924  03B7  0871               	movf	___bmul@multiplicand,w
  1925  03B8  00F2               	movwf	??___bmul
  1926  03B9  0872               	movf	??___bmul,w
  1927  03BA  07F3               	addwf	___bmul@product,f
  1928  03BB                     l1244:	
  1929  03BB  1003               	clrc
  1930  03BC  0DF1               	rlf	___bmul@multiplicand,f
  1931  03BD  1003               	clrc
  1932  03BE  0CF4               	rrf	___bmul@multiplier,f
  1933  03BF  0874               	movf	___bmul@multiplier,w
  1934  03C0  1D03               	btfss	3,2
  1935  03C1  2BB5               	goto	l1240
  1936  03C2  0873               	movf	___bmul@product,w
  1937  03C3  0008               	return
  1938  03C4                     __end_of___bmul:	
  1939                           
  1940                           	psect	text6
  1941  043F                     __ptext6:	
  1942 ;; *************** function _ui8Dec2HexDisplay *****************
  1943 ;; Defined at:
  1944 ;;		line 35 in file "display.c"
  1945 ;; Parameters:    Size  Location     Type
  1946 ;;  ui8Input        1    wreg     unsigned char 
  1947 ;; Auto vars:     Size  Location     Type
  1948 ;;  ui8Input        1    1[BANK0 ] unsigned char 
  1949 ;;  ui8Temp         1    2[BANK0 ] unsigned char 
  1950 ;;  ui8Output       1    0[BANK0 ] unsigned char 
  1951 ;; Return value:  Size  Location     Type
  1952 ;;                  1    wreg      unsigned char 
  1953 ;; Registers used:
  1954 ;;		wreg, status,2, status,0, pclath, cstack
  1955 ;; Tracked objects:
  1956 ;;		On entry : 0/0
  1957 ;;		On exit  : 0/0
  1958 ;;		Unchanged: 0/0
  1959 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1960 ;;      Params:         0       0       0       0       0
  1961 ;;      Locals:         0       3       0       0       0
  1962 ;;      Temps:          3       0       0       0       0
  1963 ;;      Totals:         3       3       0       0       0
  1964 ;;Total ram usage:        6 bytes
  1965 ;; Hardware stack levels used:    1
  1966 ;; Hardware stack levels required when called:    1
  1967 ;; This function calls:
  1968 ;;		___awdiv
  1969 ;;		___awmod
  1970 ;; This function is called by:
  1971 ;;		_main
  1972 ;; This function uses a non-reentrant model
  1973 ;;
  1974                           
  1975                           
  1976                           ;psect for function _ui8Dec2HexDisplay
  1977  043F                     _ui8Dec2HexDisplay:	
  1978                           
  1979                           ;incstack = 0
  1980                           ; Regs used in _ui8Dec2HexDisplay: [wreg+status,2+status,0+pclath+cstack]
  1981                           ;ui8Dec2HexDisplay@ui8Input stored from wreg
  1982  043F  1283               	bcf	3,5	;RP0=0, select bank0
  1983  0440  1303               	bcf	3,6	;RP1=0, select bank0
  1984  0441  00A1               	movwf	ui8Dec2HexDisplay@ui8Input
  1985                           
  1986                           ;display.c: 37: uint8_t ui8Output;
  1987                           ;display.c: 38: uint8_t ui8Temp;
  1988                           ;display.c: 40: ui8Temp = (uint8_t)ui8Input/10;
  1989  0442  300A               	movlw	10
  1990  0443  00F1               	movwf	___awdiv@divisor
  1991  0444  3000               	movlw	0
  1992  0445  00F2               	movwf	___awdiv@divisor+1
  1993  0446  0821               	movf	ui8Dec2HexDisplay@ui8Input,w
  1994  0447  00FA               	movwf	??_ui8Dec2HexDisplay
  1995  0448  01FB               	clrf	??_ui8Dec2HexDisplay+1
  1996  0449  087A               	movf	??_ui8Dec2HexDisplay,w
  1997  044A  00F3               	movwf	___awdiv@dividend
  1998  044B  087B               	movf	??_ui8Dec2HexDisplay+1,w
  1999  044C  00F4               	movwf	___awdiv@dividend+1
  2000  044D  120A  118A  24C4  120A  118A  	fcall	___awdiv
  2001  0452  0871               	movf	?___awdiv,w
  2002  0453  00FC               	movwf	??_ui8Dec2HexDisplay+2
  2003  0454  087C               	movf	??_ui8Dec2HexDisplay+2,w
  2004  0455  1283               	bcf	3,5	;RP0=0, select bank0
  2005  0456  1303               	bcf	3,6	;RP1=0, select bank0
  2006  0457  00A2               	movwf	ui8Dec2HexDisplay@ui8Temp
  2007                           
  2008                           ;display.c: 41: ui8Output = ui8Temp;
  2009  0458  0822               	movf	ui8Dec2HexDisplay@ui8Temp,w
  2010  0459  00FA               	movwf	??_ui8Dec2HexDisplay
  2011  045A  087A               	movf	??_ui8Dec2HexDisplay,w
  2012  045B  00A0               	movwf	ui8Dec2HexDisplay@ui8Output
  2013                           
  2014                           ;display.c: 42: ui8Output <<= 4;
  2015  045C  0EA0               	swapf	ui8Dec2HexDisplay@ui8Output,f
  2016  045D  30F0               	movlw	240
  2017  045E  05A0               	andwf	ui8Dec2HexDisplay@ui8Output,f
  2018                           
  2019                           ;display.c: 44: ui8Temp = (uint8_t)ui8Input%10;
  2020  045F  300A               	movlw	10
  2021  0460  00F1               	movwf	___awmod@divisor
  2022  0461  3000               	movlw	0
  2023  0462  00F2               	movwf	___awmod@divisor+1
  2024  0463  0821               	movf	ui8Dec2HexDisplay@ui8Input,w
  2025  0464  00FA               	movwf	??_ui8Dec2HexDisplay
  2026  0465  01FB               	clrf	??_ui8Dec2HexDisplay+1
  2027  0466  087A               	movf	??_ui8Dec2HexDisplay,w
  2028  0467  00F3               	movwf	___awmod@dividend
  2029  0468  087B               	movf	??_ui8Dec2HexDisplay+1,w
  2030  0469  00F4               	movwf	___awmod@dividend+1
  2031  046A  120A  118A  2479   	fcall	___awmod
  2032  046D  0871               	movf	?___awmod,w
  2033  046E  00FC               	movwf	??_ui8Dec2HexDisplay+2
  2034  046F  087C               	movf	??_ui8Dec2HexDisplay+2,w
  2035  0470  1283               	bcf	3,5	;RP0=0, select bank0
  2036  0471  1303               	bcf	3,6	;RP1=0, select bank0
  2037  0472  00A2               	movwf	ui8Dec2HexDisplay@ui8Temp
  2038                           
  2039                           ;display.c: 45: ui8Output |= ui8Temp;
  2040  0473  0822               	movf	ui8Dec2HexDisplay@ui8Temp,w
  2041  0474  00FA               	movwf	??_ui8Dec2HexDisplay
  2042  0475  087A               	movf	??_ui8Dec2HexDisplay,w
  2043  0476  04A0               	iorwf	ui8Dec2HexDisplay@ui8Output,f
  2044                           
  2045                           ;display.c: 47: return ui8Output;
  2046  0477  0820               	movf	ui8Dec2HexDisplay@ui8Output,w
  2047  0478  0008               	return
  2048  0479                     __end_of_ui8Dec2HexDisplay:	
  2049                           
  2050                           	psect	text7
  2051  0479                     __ptext7:	
  2052 ;; *************** function ___awmod *****************
  2053 ;; Defined at:
  2054 ;;		line 6 in file "/usr/microchip/xc8/v1.43/sources/common/awmod.c"
  2055 ;; Parameters:    Size  Location     Type
  2056 ;;  divisor         2    0[COMMON] int 
  2057 ;;  dividend        2    2[COMMON] int 
  2058 ;; Auto vars:     Size  Location     Type
  2059 ;;  sign            1    6[COMMON] unsigned char 
  2060 ;;  counter         1    5[COMMON] unsigned char 
  2061 ;; Return value:  Size  Location     Type
  2062 ;;                  2    0[COMMON] int 
  2063 ;; Registers used:
  2064 ;;		wreg, status,2, status,0
  2065 ;; Tracked objects:
  2066 ;;		On entry : 0/0
  2067 ;;		On exit  : 0/0
  2068 ;;		Unchanged: 0/0
  2069 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2070 ;;      Params:         4       0       0       0       0
  2071 ;;      Locals:         2       0       0       0       0
  2072 ;;      Temps:          1       0       0       0       0
  2073 ;;      Totals:         7       0       0       0       0
  2074 ;;Total ram usage:        7 bytes
  2075 ;; Hardware stack levels used:    1
  2076 ;; This function calls:
  2077 ;;		Nothing
  2078 ;; This function is called by:
  2079 ;;		_ui8Dec2HexDisplay
  2080 ;;		_Binary2BCD
  2081 ;; This function uses a non-reentrant model
  2082 ;;
  2083                           
  2084                           
  2085                           ;psect for function ___awmod
  2086  0479                     ___awmod:	
  2087                           
  2088                           ;incstack = 0
  2089                           ; Regs used in ___awmod: [wreg+status,2+status,0]
  2090  0479  01F7               	clrf	___awmod@sign
  2091  047A  1FF4               	btfss	___awmod@dividend+1,7
  2092  047B  2C83               	goto	l1304
  2093  047C  09F3               	comf	___awmod@dividend,f
  2094  047D  09F4               	comf	___awmod@dividend+1,f
  2095  047E  0AF3               	incf	___awmod@dividend,f
  2096  047F  1903               	skipnz
  2097  0480  0AF4               	incf	___awmod@dividend+1,f
  2098  0481  01F7               	clrf	___awmod@sign
  2099  0482  0AF7               	incf	___awmod@sign,f
  2100  0483                     l1304:	
  2101  0483  1FF2               	btfss	___awmod@divisor+1,7
  2102  0484  2C8A               	goto	l1308
  2103  0485  09F1               	comf	___awmod@divisor,f
  2104  0486  09F2               	comf	___awmod@divisor+1,f
  2105  0487  0AF1               	incf	___awmod@divisor,f
  2106  0488  1903               	skipnz
  2107  0489  0AF2               	incf	___awmod@divisor+1,f
  2108  048A                     l1308:	
  2109  048A  0871               	movf	___awmod@divisor,w
  2110  048B  0472               	iorwf	___awmod@divisor+1,w
  2111  048C  1903               	btfsc	3,2
  2112  048D  2CB7               	goto	l1326
  2113  048E  01F6               	clrf	___awmod@counter
  2114  048F  0AF6               	incf	___awmod@counter,f
  2115  0490                     l1316:	
  2116  0490  1BF2               	btfsc	___awmod@divisor+1,7
  2117  0491  2C9E               	goto	l1318
  2118  0492  3001               	movlw	1
  2119  0493                     u875:	
  2120  0493  1003               	clrc
  2121  0494  0DF1               	rlf	___awmod@divisor,f
  2122  0495  0DF2               	rlf	___awmod@divisor+1,f
  2123  0496  3EFF               	addlw	-1
  2124  0497  1D03               	skipz
  2125  0498  2C93               	goto	u875
  2126  0499  3001               	movlw	1
  2127  049A  00F5               	movwf	??___awmod
  2128  049B  0875               	movf	??___awmod,w
  2129  049C  07F6               	addwf	___awmod@counter,f
  2130  049D  2C90               	goto	l1316
  2131  049E                     l1318:	
  2132  049E  0872               	movf	___awmod@divisor+1,w
  2133  049F  0274               	subwf	___awmod@dividend+1,w
  2134  04A0  1D03               	skipz
  2135  04A1  2CA4               	goto	u895
  2136  04A2  0871               	movf	___awmod@divisor,w
  2137  04A3  0273               	subwf	___awmod@dividend,w
  2138  04A4                     u895:	
  2139  04A4  1C03               	skipc
  2140  04A5  2CAC               	goto	l1322
  2141  04A6  0871               	movf	___awmod@divisor,w
  2142  04A7  02F3               	subwf	___awmod@dividend,f
  2143  04A8  0872               	movf	___awmod@divisor+1,w
  2144  04A9  1C03               	skipc
  2145  04AA  03F4               	decf	___awmod@dividend+1,f
  2146  04AB  02F4               	subwf	___awmod@dividend+1,f
  2147  04AC                     l1322:	
  2148  04AC  3001               	movlw	1
  2149  04AD                     u905:	
  2150  04AD  1003               	clrc
  2151  04AE  0CF2               	rrf	___awmod@divisor+1,f
  2152  04AF  0CF1               	rrf	___awmod@divisor,f
  2153  04B0  3EFF               	addlw	-1
  2154  04B1  1D03               	skipz
  2155  04B2  2CAD               	goto	u905
  2156  04B3  3001               	movlw	1
  2157  04B4  02F6               	subwf	___awmod@counter,f
  2158  04B5  1D03               	btfss	3,2
  2159  04B6  2C9E               	goto	l1318
  2160  04B7                     l1326:	
  2161  04B7  0877               	movf	___awmod@sign,w
  2162  04B8  1903               	btfsc	3,2
  2163  04B9  2CBF               	goto	l1330
  2164  04BA  09F3               	comf	___awmod@dividend,f
  2165  04BB  09F4               	comf	___awmod@dividend+1,f
  2166  04BC  0AF3               	incf	___awmod@dividend,f
  2167  04BD  1903               	skipnz
  2168  04BE  0AF4               	incf	___awmod@dividend+1,f
  2169  04BF                     l1330:	
  2170  04BF  0874               	movf	___awmod@dividend+1,w
  2171  04C0  00F2               	movwf	?___awmod+1
  2172  04C1  0873               	movf	___awmod@dividend,w
  2173  04C2  00F1               	movwf	?___awmod
  2174  04C3  0008               	return
  2175  04C4                     __end_of___awmod:	
  2176                           
  2177                           	psect	text8
  2178  04C4                     __ptext8:	
  2179 ;; *************** function ___awdiv *****************
  2180 ;; Defined at:
  2181 ;;		line 6 in file "/usr/microchip/xc8/v1.43/sources/common/awdiv.c"
  2182 ;; Parameters:    Size  Location     Type
  2183 ;;  divisor         2    0[COMMON] int 
  2184 ;;  dividend        2    2[COMMON] int 
  2185 ;; Auto vars:     Size  Location     Type
  2186 ;;  quotient        2    7[COMMON] int 
  2187 ;;  sign            1    6[COMMON] unsigned char 
  2188 ;;  counter         1    5[COMMON] unsigned char 
  2189 ;; Return value:  Size  Location     Type
  2190 ;;                  2    0[COMMON] int 
  2191 ;; Registers used:
  2192 ;;		wreg, status,2, status,0
  2193 ;; Tracked objects:
  2194 ;;		On entry : 0/0
  2195 ;;		On exit  : 0/0
  2196 ;;		Unchanged: 0/0
  2197 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2198 ;;      Params:         4       0       0       0       0
  2199 ;;      Locals:         4       0       0       0       0
  2200 ;;      Temps:          1       0       0       0       0
  2201 ;;      Totals:         9       0       0       0       0
  2202 ;;Total ram usage:        9 bytes
  2203 ;; Hardware stack levels used:    1
  2204 ;; This function calls:
  2205 ;;		Nothing
  2206 ;; This function is called by:
  2207 ;;		_ui8Dec2HexDisplay
  2208 ;;		_Binary2BCD
  2209 ;; This function uses a non-reentrant model
  2210 ;;
  2211                           
  2212                           
  2213                           ;psect for function ___awdiv
  2214  04C4                     ___awdiv:	
  2215                           
  2216                           ;incstack = 0
  2217                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
  2218  04C4  01F7               	clrf	___awdiv@sign
  2219  04C5  1FF2               	btfss	___awdiv@divisor+1,7
  2220  04C6  2CCE               	goto	l1260
  2221  04C7  09F1               	comf	___awdiv@divisor,f
  2222  04C8  09F2               	comf	___awdiv@divisor+1,f
  2223  04C9  0AF1               	incf	___awdiv@divisor,f
  2224  04CA  1903               	skipnz
  2225  04CB  0AF2               	incf	___awdiv@divisor+1,f
  2226  04CC  01F7               	clrf	___awdiv@sign
  2227  04CD  0AF7               	incf	___awdiv@sign,f
  2228  04CE                     l1260:	
  2229  04CE  1FF4               	btfss	___awdiv@dividend+1,7
  2230  04CF  2CD9               	goto	l1266
  2231  04D0  09F3               	comf	___awdiv@dividend,f
  2232  04D1  09F4               	comf	___awdiv@dividend+1,f
  2233  04D2  0AF3               	incf	___awdiv@dividend,f
  2234  04D3  1903               	skipnz
  2235  04D4  0AF4               	incf	___awdiv@dividend+1,f
  2236  04D5  3001               	movlw	1
  2237  04D6  00F5               	movwf	??___awdiv
  2238  04D7  0875               	movf	??___awdiv,w
  2239  04D8  06F7               	xorwf	___awdiv@sign,f
  2240  04D9                     l1266:	
  2241  04D9  01F8               	clrf	___awdiv@quotient
  2242  04DA  01F9               	clrf	___awdiv@quotient+1
  2243  04DB  0871               	movf	___awdiv@divisor,w
  2244  04DC  0472               	iorwf	___awdiv@divisor+1,w
  2245  04DD  1903               	btfsc	3,2
  2246  04DE  2D10               	goto	l1288
  2247  04DF  01F6               	clrf	___awdiv@counter
  2248  04E0  0AF6               	incf	___awdiv@counter,f
  2249  04E1                     l1276:	
  2250  04E1  1BF2               	btfsc	___awdiv@divisor+1,7
  2251  04E2  2CEF               	goto	l1278
  2252  04E3  3001               	movlw	1
  2253  04E4                     u775:	
  2254  04E4  1003               	clrc
  2255  04E5  0DF1               	rlf	___awdiv@divisor,f
  2256  04E6  0DF2               	rlf	___awdiv@divisor+1,f
  2257  04E7  3EFF               	addlw	-1
  2258  04E8  1D03               	skipz
  2259  04E9  2CE4               	goto	u775
  2260  04EA  3001               	movlw	1
  2261  04EB  00F5               	movwf	??___awdiv
  2262  04EC  0875               	movf	??___awdiv,w
  2263  04ED  07F6               	addwf	___awdiv@counter,f
  2264  04EE  2CE1               	goto	l1276
  2265  04EF                     l1278:	
  2266  04EF  3001               	movlw	1
  2267  04F0                     u795:	
  2268  04F0  1003               	clrc
  2269  04F1  0DF8               	rlf	___awdiv@quotient,f
  2270  04F2  0DF9               	rlf	___awdiv@quotient+1,f
  2271  04F3  3EFF               	addlw	-1
  2272  04F4  1D03               	skipz
  2273  04F5  2CF0               	goto	u795
  2274  04F6  0872               	movf	___awdiv@divisor+1,w
  2275  04F7  0274               	subwf	___awdiv@dividend+1,w
  2276  04F8  1D03               	skipz
  2277  04F9  2CFC               	goto	u805
  2278  04FA  0871               	movf	___awdiv@divisor,w
  2279  04FB  0273               	subwf	___awdiv@dividend,w
  2280  04FC                     u805:	
  2281  04FC  1C03               	skipc
  2282  04FD  2D05               	goto	l1284
  2283  04FE  0871               	movf	___awdiv@divisor,w
  2284  04FF  02F3               	subwf	___awdiv@dividend,f
  2285  0500  0872               	movf	___awdiv@divisor+1,w
  2286  0501  1C03               	skipc
  2287  0502  03F4               	decf	___awdiv@dividend+1,f
  2288  0503  02F4               	subwf	___awdiv@dividend+1,f
  2289  0504  1478               	bsf	___awdiv@quotient,0
  2290  0505                     l1284:	
  2291  0505  3001               	movlw	1
  2292  0506                     u815:	
  2293  0506  1003               	clrc
  2294  0507  0CF2               	rrf	___awdiv@divisor+1,f
  2295  0508  0CF1               	rrf	___awdiv@divisor,f
  2296  0509  3EFF               	addlw	-1
  2297  050A  1D03               	skipz
  2298  050B  2D06               	goto	u815
  2299  050C  3001               	movlw	1
  2300  050D  02F6               	subwf	___awdiv@counter,f
  2301  050E  1D03               	btfss	3,2
  2302  050F  2CEF               	goto	l1278
  2303  0510                     l1288:	
  2304  0510  0877               	movf	___awdiv@sign,w
  2305  0511  1903               	btfsc	3,2
  2306  0512  2D18               	goto	l1292
  2307  0513  09F8               	comf	___awdiv@quotient,f
  2308  0514  09F9               	comf	___awdiv@quotient+1,f
  2309  0515  0AF8               	incf	___awdiv@quotient,f
  2310  0516  1903               	skipnz
  2311  0517  0AF9               	incf	___awdiv@quotient+1,f
  2312  0518                     l1292:	
  2313  0518  0879               	movf	___awdiv@quotient+1,w
  2314  0519  00F2               	movwf	?___awdiv+1
  2315  051A  0878               	movf	___awdiv@quotient,w
  2316  051B  00F1               	movwf	?___awdiv
  2317  051C  0008               	return
  2318  051D                     __end_of___awdiv:	
  2319                           
  2320                           	psect	text9
  2321  051D                     __ptext9:	
  2322 ;; *************** function _RTC_SetDateTime *****************
  2323 ;; Defined at:
  2324 ;;		line 95 in file "rtc.c"
  2325 ;; Parameters:    Size  Location     Type
  2326 ;;  rtc             1    wreg     PTR struct .
  2327 ;;		 -> main@rtc(7), 
  2328 ;; Auto vars:     Size  Location     Type
  2329 ;;  rtc             1    1[COMMON] PTR struct .
  2330 ;;		 -> main@rtc(7), 
  2331 ;; Return value:  Size  Location     Type
  2332 ;;                  1    wreg      void 
  2333 ;; Registers used:
  2334 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2335 ;; Tracked objects:
  2336 ;;		On entry : 0/0
  2337 ;;		On exit  : 0/0
  2338 ;;		Unchanged: 0/0
  2339 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2340 ;;      Params:         0       0       0       0       0
  2341 ;;      Locals:         1       0       0       0       0
  2342 ;;      Temps:          0       0       0       0       0
  2343 ;;      Totals:         1       0       0       0       0
  2344 ;;Total ram usage:        1 bytes
  2345 ;; Hardware stack levels used:    1
  2346 ;; Hardware stack levels required when called:    2
  2347 ;; This function calls:
  2348 ;;		_I2C_Start
  2349 ;;		_I2C_Stop
  2350 ;;		_I2C_Write
  2351 ;; This function is called by:
  2352 ;;		_main
  2353 ;; This function uses a non-reentrant model
  2354 ;;
  2355                           
  2356                           
  2357                           ;psect for function _RTC_SetDateTime
  2358  051D                     _RTC_SetDateTime:	
  2359                           
  2360                           ;incstack = 0
  2361                           ; Regs used in _RTC_SetDateTime: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2362                           ;RTC_SetDateTime@rtc stored from wreg
  2363  051D  00F2               	movwf	RTC_SetDateTime@rtc
  2364                           
  2365                           ;rtc.c: 97: I2C_Start();
  2366  051E  120A  118A  235E  120A  118A  	fcall	_I2C_Start
  2367                           
  2368                           ;rtc.c: 99: I2C_Write(0xD0u);
  2369  0523  30D0               	movlw	208
  2370  0524  120A  118A  2398  120A  118A  	fcall	_I2C_Write
  2371                           
  2372                           ;rtc.c: 100: I2C_Write(0x00u);
  2373  0529  3000               	movlw	0
  2374  052A  120A  118A  2398  120A  118A  	fcall	_I2C_Write
  2375                           
  2376                           ;rtc.c: 102: I2C_Write(rtc->sec);
  2377  052F  0872               	movf	RTC_SetDateTime@rtc,w
  2378  0530  0084               	movwf	4
  2379  0531  1383               	bcf	3,7	;select IRP bank0
  2380  0532  0800               	movf	0,w
  2381  0533  120A  118A  2398  120A  118A  	fcall	_I2C_Write
  2382                           
  2383                           ;rtc.c: 103: I2C_Write(rtc->min);
  2384  0538  0A72               	incf	RTC_SetDateTime@rtc,w
  2385  0539  0084               	movwf	4
  2386  053A  1383               	bcf	3,7	;select IRP bank0
  2387  053B  0800               	movf	0,w
  2388  053C  120A  118A  2398  120A  118A  	fcall	_I2C_Write
  2389                           
  2390                           ;rtc.c: 104: I2C_Write(rtc->hour);
  2391  0541  0872               	movf	RTC_SetDateTime@rtc,w
  2392  0542  3E02               	addlw	2
  2393  0543  0084               	movwf	4
  2394  0544  1383               	bcf	3,7	;select IRP bank0
  2395  0545  0800               	movf	0,w
  2396  0546  120A  118A  2398  120A  118A  	fcall	_I2C_Write
  2397                           
  2398                           ;rtc.c: 105: I2C_Write(rtc->weekDay);
  2399  054B  0872               	movf	RTC_SetDateTime@rtc,w
  2400  054C  3E03               	addlw	3
  2401  054D  0084               	movwf	4
  2402  054E  1383               	bcf	3,7	;select IRP bank0
  2403  054F  0800               	movf	0,w
  2404  0550  120A  118A  2398  120A  118A  	fcall	_I2C_Write
  2405                           
  2406                           ;rtc.c: 106: I2C_Write(rtc->date);
  2407  0555  0872               	movf	RTC_SetDateTime@rtc,w
  2408  0556  3E04               	addlw	4
  2409  0557  0084               	movwf	4
  2410  0558  1383               	bcf	3,7	;select IRP bank0
  2411  0559  0800               	movf	0,w
  2412  055A  120A  118A  2398  120A  118A  	fcall	_I2C_Write
  2413                           
  2414                           ;rtc.c: 107: I2C_Write(rtc->month);
  2415  055F  0872               	movf	RTC_SetDateTime@rtc,w
  2416  0560  3E05               	addlw	5
  2417  0561  0084               	movwf	4
  2418  0562  1383               	bcf	3,7	;select IRP bank0
  2419  0563  0800               	movf	0,w
  2420  0564  120A  118A  2398  120A  118A  	fcall	_I2C_Write
  2421                           
  2422                           ;rtc.c: 108: I2C_Write(rtc->year);
  2423  0569  0872               	movf	RTC_SetDateTime@rtc,w
  2424  056A  3E06               	addlw	6
  2425  056B  0084               	movwf	4
  2426  056C  1383               	bcf	3,7	;select IRP bank0
  2427  056D  0800               	movf	0,w
  2428  056E  120A  118A  2398  120A  118A  	fcall	_I2C_Write
  2429                           
  2430                           ;rtc.c: 110: I2C_Stop();
  2431  0573  120A  118A  2364   	fcall	_I2C_Stop
  2432  0576  0008               	return
  2433  0577                     __end_of_RTC_SetDateTime:	
  2434                           
  2435                           	psect	text10
  2436  041F                     __ptext10:	
  2437 ;; *************** function _RTC_Init *****************
  2438 ;; Defined at:
  2439 ;;		line 57 in file "rtc.c"
  2440 ;; Parameters:    Size  Location     Type
  2441 ;;		None
  2442 ;; Auto vars:     Size  Location     Type
  2443 ;;		None
  2444 ;; Return value:  Size  Location     Type
  2445 ;;                  1    wreg      void 
  2446 ;; Registers used:
  2447 ;;		wreg, status,2, status,0, pclath, cstack
  2448 ;; Tracked objects:
  2449 ;;		On entry : 0/0
  2450 ;;		On exit  : 0/0
  2451 ;;		Unchanged: 0/0
  2452 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2453 ;;      Params:         0       0       0       0       0
  2454 ;;      Locals:         0       0       0       0       0
  2455 ;;      Temps:          0       0       0       0       0
  2456 ;;      Totals:         0       0       0       0       0
  2457 ;;Total ram usage:        0 bytes
  2458 ;; Hardware stack levels used:    1
  2459 ;; Hardware stack levels required when called:    2
  2460 ;; This function calls:
  2461 ;;		_I2C_Init
  2462 ;;		_I2C_Start
  2463 ;;		_I2C_Stop
  2464 ;;		_I2C_Write
  2465 ;; This function is called by:
  2466 ;;		_main
  2467 ;; This function uses a non-reentrant model
  2468 ;;
  2469                           
  2470                           
  2471                           ;psect for function _RTC_Init
  2472  041F                     _RTC_Init:	
  2473                           
  2474                           ;rtc.c: 59: I2C_Init();
  2475                           
  2476                           ;incstack = 0
  2477                           ; Regs used in _RTC_Init: [wreg+status,2+status,0+pclath+cstack]
  2478  041F  120A  118A  23A5  120A  118A  	fcall	_I2C_Init
  2479                           
  2480                           ;rtc.c: 60: I2C_Start();
  2481  0424  120A  118A  235E  120A  118A  	fcall	_I2C_Start
  2482                           
  2483                           ;rtc.c: 62: I2C_Write(0xD0u);
  2484  0429  30D0               	movlw	208
  2485  042A  120A  118A  2398  120A  118A  	fcall	_I2C_Write
  2486                           
  2487                           ;rtc.c: 63: I2C_Write(0x07u);
  2488  042F  3007               	movlw	7
  2489  0430  120A  118A  2398  120A  118A  	fcall	_I2C_Write
  2490                           
  2491                           ;rtc.c: 65: I2C_Write(0x00);
  2492  0435  3000               	movlw	0
  2493  0436  120A  118A  2398  120A  118A  	fcall	_I2C_Write
  2494                           
  2495                           ;rtc.c: 67: I2C_Stop();
  2496  043B  120A  118A  2364   	fcall	_I2C_Stop
  2497  043E  0008               	return
  2498  043F                     __end_of_RTC_Init:	
  2499                           
  2500                           	psect	text11
  2501  03A5                     __ptext11:	
  2502 ;; *************** function _I2C_Init *****************
  2503 ;; Defined at:
  2504 ;;		line 87 in file "i2c.c"
  2505 ;; Parameters:    Size  Location     Type
  2506 ;;		None
  2507 ;; Auto vars:     Size  Location     Type
  2508 ;;		None
  2509 ;; Return value:  Size  Location     Type
  2510 ;;                  1    wreg      void 
  2511 ;; Registers used:
  2512 ;;		wreg
  2513 ;; Tracked objects:
  2514 ;;		On entry : 0/0
  2515 ;;		On exit  : 0/0
  2516 ;;		Unchanged: 0/0
  2517 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2518 ;;      Params:         0       0       0       0       0
  2519 ;;      Locals:         0       0       0       0       0
  2520 ;;      Temps:          0       0       0       0       0
  2521 ;;      Totals:         0       0       0       0       0
  2522 ;;Total ram usage:        0 bytes
  2523 ;; Hardware stack levels used:    1
  2524 ;; This function calls:
  2525 ;;		Nothing
  2526 ;; This function is called by:
  2527 ;;		_RTC_Init
  2528 ;; This function uses a non-reentrant model
  2529 ;;
  2530                           
  2531                           
  2532                           ;psect for function _I2C_Init
  2533  03A5                     _I2C_Init:	
  2534                           
  2535                           ;i2c.c: 89: TRISC3 = 0x01u;
  2536                           
  2537                           ;incstack = 0
  2538                           ; Regs used in _I2C_Init: [wreg]
  2539  03A5  1683               	bsf	3,5	;RP0=1, select bank1
  2540  03A6  1303               	bcf	3,6	;RP1=0, select bank1
  2541  03A7  1587               	bsf	7,3	;volatile
  2542                           
  2543                           ;i2c.c: 90: TRISC4 = 0x01u;
  2544  03A8  1607               	bsf	7,4	;volatile
  2545                           
  2546                           ;i2c.c: 92: SSPSTAT |= 0x80;
  2547  03A9  1794               	bsf	20,7	;volatile
  2548                           
  2549                           ;i2c.c: 93: SSPCON = 0x28;
  2550  03AA  3028               	movlw	40
  2551  03AB  1283               	bcf	3,5	;RP0=0, select bank0
  2552  03AC  1303               	bcf	3,6	;RP1=0, select bank0
  2553  03AD  0094               	movwf	20	;volatile
  2554                           
  2555                           ;i2c.c: 94: SSPADD = 50;
  2556  03AE  3032               	movlw	50
  2557  03AF  1683               	bsf	3,5	;RP0=1, select bank1
  2558  03B0  1303               	bcf	3,6	;RP1=0, select bank1
  2559  03B1  0093               	movwf	19	;volatile
  2560  03B2  0008               	return
  2561  03B3                     __end_of_I2C_Init:	
  2562                           
  2563                           	psect	text12
  2564  05DB                     __ptext12:	
  2565 ;; *************** function _RTC_GetDateTime *****************
  2566 ;; Defined at:
  2567 ;;		line 131 in file "rtc.c"
  2568 ;; Parameters:    Size  Location     Type
  2569 ;;  rtc             1    wreg     PTR struct .
  2570 ;;		 -> main@rtc(7), 
  2571 ;; Auto vars:     Size  Location     Type
  2572 ;;  rtc             1    4[COMMON] PTR struct .
  2573 ;;		 -> main@rtc(7), 
  2574 ;; Return value:  Size  Location     Type
  2575 ;;                  1    wreg      void 
  2576 ;; Registers used:
  2577 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2578 ;; Tracked objects:
  2579 ;;		On entry : 0/0
  2580 ;;		On exit  : 0/0
  2581 ;;		Unchanged: 0/0
  2582 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2583 ;;      Params:         0       0       0       0       0
  2584 ;;      Locals:         1       0       0       0       0
  2585 ;;      Temps:          1       0       0       0       0
  2586 ;;      Totals:         2       0       0       0       0
  2587 ;;Total ram usage:        2 bytes
  2588 ;; Hardware stack levels used:    1
  2589 ;; Hardware stack levels required when called:    2
  2590 ;; This function calls:
  2591 ;;		_I2C_Read
  2592 ;;		_I2C_Start
  2593 ;;		_I2C_Stop
  2594 ;;		_I2C_Write
  2595 ;; This function is called by:
  2596 ;;		_main
  2597 ;; This function uses a non-reentrant model
  2598 ;;
  2599                           
  2600                           
  2601                           ;psect for function _RTC_GetDateTime
  2602  05DB                     _RTC_GetDateTime:	
  2603                           
  2604                           ;incstack = 0
  2605                           ; Regs used in _RTC_GetDateTime: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2606                           ;RTC_GetDateTime@rtc stored from wreg
  2607  05DB  00F5               	movwf	RTC_GetDateTime@rtc
  2608                           
  2609                           ;rtc.c: 133: I2C_Start();
  2610  05DC  120A  118A  235E  120A  118A  	fcall	_I2C_Start
  2611                           
  2612                           ;rtc.c: 135: I2C_Write(0xD0u);
  2613  05E1  30D0               	movlw	208
  2614  05E2  120A  118A  2398  120A  118A  	fcall	_I2C_Write
  2615                           
  2616                           ;rtc.c: 136: I2C_Write(0x00u);
  2617  05E7  3000               	movlw	0
  2618  05E8  120A  118A  2398  120A  118A  	fcall	_I2C_Write
  2619                           
  2620                           ;rtc.c: 138: I2C_Stop();
  2621  05ED  120A  118A  2364  120A  118A  	fcall	_I2C_Stop
  2622                           
  2623                           ;rtc.c: 140: I2C_Start();
  2624  05F2  120A  118A  235E  120A  118A  	fcall	_I2C_Start
  2625                           
  2626                           ;rtc.c: 141: I2C_Write(0xD1u);
  2627  05F7  30D1               	movlw	209
  2628  05F8  120A  118A  2398  120A  118A  	fcall	_I2C_Write
  2629                           
  2630                           ;rtc.c: 143: rtc->sec = I2C_Read(1);
  2631  05FD  3001               	movlw	1
  2632  05FE  120A  118A  23FF  120A  118A  	fcall	_I2C_Read
  2633  0603  00F4               	movwf	??_RTC_GetDateTime
  2634  0604  0875               	movf	RTC_GetDateTime@rtc,w
  2635  0605  0084               	movwf	4
  2636  0606  0874               	movf	??_RTC_GetDateTime,w
  2637  0607  1383               	bcf	3,7	;select IRP bank0
  2638  0608  0080               	movwf	0
  2639                           
  2640                           ;rtc.c: 144: rtc->min = I2C_Read(1);
  2641  0609  3001               	movlw	1
  2642  060A  120A  118A  23FF  120A  118A  	fcall	_I2C_Read
  2643  060F  00F4               	movwf	??_RTC_GetDateTime
  2644  0610  0A75               	incf	RTC_GetDateTime@rtc,w
  2645  0611  0084               	movwf	4
  2646  0612  0874               	movf	??_RTC_GetDateTime,w
  2647  0613  1383               	bcf	3,7	;select IRP bank0
  2648  0614  0080               	movwf	0
  2649                           
  2650                           ;rtc.c: 145: rtc->hour= I2C_Read(1);
  2651  0615  3001               	movlw	1
  2652  0616  120A  118A  23FF  120A  118A  	fcall	_I2C_Read
  2653  061B  00F4               	movwf	??_RTC_GetDateTime
  2654  061C  0875               	movf	RTC_GetDateTime@rtc,w
  2655  061D  3E02               	addlw	2
  2656  061E  0084               	movwf	4
  2657  061F  0874               	movf	??_RTC_GetDateTime,w
  2658  0620  1383               	bcf	3,7	;select IRP bank0
  2659  0621  0080               	movwf	0
  2660                           
  2661                           ;rtc.c: 146: rtc->weekDay = I2C_Read(1);
  2662  0622  3001               	movlw	1
  2663  0623  120A  118A  23FF  120A  118A  	fcall	_I2C_Read
  2664  0628  00F4               	movwf	??_RTC_GetDateTime
  2665  0629  0875               	movf	RTC_GetDateTime@rtc,w
  2666  062A  3E03               	addlw	3
  2667  062B  0084               	movwf	4
  2668  062C  0874               	movf	??_RTC_GetDateTime,w
  2669  062D  1383               	bcf	3,7	;select IRP bank0
  2670  062E  0080               	movwf	0
  2671                           
  2672                           ;rtc.c: 147: rtc->date= I2C_Read(1);
  2673  062F  3001               	movlw	1
  2674  0630  120A  118A  23FF  120A  118A  	fcall	_I2C_Read
  2675  0635  00F4               	movwf	??_RTC_GetDateTime
  2676  0636  0875               	movf	RTC_GetDateTime@rtc,w
  2677  0637  3E04               	addlw	4
  2678  0638  0084               	movwf	4
  2679  0639  0874               	movf	??_RTC_GetDateTime,w
  2680  063A  1383               	bcf	3,7	;select IRP bank0
  2681  063B  0080               	movwf	0
  2682                           
  2683                           ;rtc.c: 148: rtc->month=I2C_Read(1);
  2684  063C  3001               	movlw	1
  2685  063D  120A  118A  23FF  120A  118A  	fcall	_I2C_Read
  2686  0642  00F4               	movwf	??_RTC_GetDateTime
  2687  0643  0875               	movf	RTC_GetDateTime@rtc,w
  2688  0644  3E05               	addlw	5
  2689  0645  0084               	movwf	4
  2690  0646  0874               	movf	??_RTC_GetDateTime,w
  2691  0647  1383               	bcf	3,7	;select IRP bank0
  2692  0648  0080               	movwf	0
  2693                           
  2694                           ;rtc.c: 149: rtc->year =I2C_Read(0);
  2695  0649  3000               	movlw	0
  2696  064A  120A  118A  23FF  120A  118A  	fcall	_I2C_Read
  2697  064F  00F4               	movwf	??_RTC_GetDateTime
  2698  0650  0875               	movf	RTC_GetDateTime@rtc,w
  2699  0651  3E06               	addlw	6
  2700  0652  0084               	movwf	4
  2701  0653  0874               	movf	??_RTC_GetDateTime,w
  2702  0654  1383               	bcf	3,7	;select IRP bank0
  2703  0655  0080               	movwf	0
  2704                           
  2705                           ;rtc.c: 151: I2C_Stop();
  2706  0656  120A  118A  2364   	fcall	_I2C_Stop
  2707  0659  0008               	return
  2708  065A                     __end_of_RTC_GetDateTime:	
  2709                           
  2710                           	psect	text13
  2711  0398                     __ptext13:	
  2712 ;; *************** function _I2C_Write *****************
  2713 ;; Defined at:
  2714 ;;		line 179 in file "i2c.c"
  2715 ;; Parameters:    Size  Location     Type
  2716 ;;  v_i2cData_u8    1    wreg     unsigned char 
  2717 ;; Auto vars:     Size  Location     Type
  2718 ;;  v_i2cData_u8    1    0[COMMON] unsigned char 
  2719 ;; Return value:  Size  Location     Type
  2720 ;;                  1    wreg      void 
  2721 ;; Registers used:
  2722 ;;		wreg, status,2, status,0, pclath, cstack
  2723 ;; Tracked objects:
  2724 ;;		On entry : 0/0
  2725 ;;		On exit  : 0/0
  2726 ;;		Unchanged: 0/0
  2727 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2728 ;;      Params:         0       0       0       0       0
  2729 ;;      Locals:         1       0       0       0       0
  2730 ;;      Temps:          0       0       0       0       0
  2731 ;;      Totals:         1       0       0       0       0
  2732 ;;Total ram usage:        1 bytes
  2733 ;; Hardware stack levels used:    1
  2734 ;; Hardware stack levels required when called:    1
  2735 ;; This function calls:
  2736 ;;		_i2c_WaitForIdle
  2737 ;; This function is called by:
  2738 ;;		_RTC_Init
  2739 ;;		_RTC_SetDateTime
  2740 ;;		_RTC_GetDateTime
  2741 ;; This function uses a non-reentrant model
  2742 ;;
  2743                           
  2744                           
  2745                           ;psect for function _I2C_Write
  2746  0398                     _I2C_Write:	
  2747                           
  2748                           ;incstack = 0
  2749                           ; Regs used in _I2C_Write: [wreg+status,2+status,0+pclath+cstack]
  2750                           ;I2C_Write@v_i2cData_u8 stored from wreg
  2751  0398  00F1               	movwf	I2C_Write@v_i2cData_u8
  2752                           
  2753                           ;i2c.c: 183: SSPBUF = v_i2cData_u8;
  2754  0399  0871               	movf	I2C_Write@v_i2cData_u8,w
  2755  039A  1283               	bcf	3,5	;RP0=0, select bank0
  2756  039B  1303               	bcf	3,6	;RP1=0, select bank0
  2757  039C  0093               	movwf	19	;volatile
  2758  039D                     l147:	
  2759                           ;i2c.c: 184: while(BF==1);
  2760                           
  2761  039D  1683               	bsf	3,5	;RP0=1, select bank1
  2762  039E  1303               	bcf	3,6	;RP1=0, select bank1
  2763  039F  1814               	btfsc	20,0	;volatile
  2764  03A0  2B9D               	goto	l147
  2765                           
  2766                           ;i2c.c: 185: i2c_WaitForIdle();
  2767  03A1  120A  118A  2382   	fcall	_i2c_WaitForIdle
  2768  03A4  0008               	return
  2769  03A5                     __end_of_I2C_Write:	
  2770                           
  2771                           	psect	text14
  2772  0364                     __ptext14:	
  2773 ;; *************** function _I2C_Stop *****************
  2774 ;; Defined at:
  2775 ;;		line 147 in file "i2c.c"
  2776 ;; Parameters:    Size  Location     Type
  2777 ;;		None
  2778 ;; Auto vars:     Size  Location     Type
  2779 ;;		None
  2780 ;; Return value:  Size  Location     Type
  2781 ;;                  1    wreg      void 
  2782 ;; Registers used:
  2783 ;;		None
  2784 ;; Tracked objects:
  2785 ;;		On entry : 0/0
  2786 ;;		On exit  : 0/0
  2787 ;;		Unchanged: 0/0
  2788 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2789 ;;      Params:         0       0       0       0       0
  2790 ;;      Locals:         0       0       0       0       0
  2791 ;;      Temps:          0       0       0       0       0
  2792 ;;      Totals:         0       0       0       0       0
  2793 ;;Total ram usage:        0 bytes
  2794 ;; Hardware stack levels used:    1
  2795 ;; This function calls:
  2796 ;;		Nothing
  2797 ;; This function is called by:
  2798 ;;		_RTC_Init
  2799 ;;		_RTC_SetDateTime
  2800 ;;		_RTC_GetDateTime
  2801 ;; This function uses a non-reentrant model
  2802 ;;
  2803                           
  2804                           
  2805                           ;psect for function _I2C_Stop
  2806  0364                     _I2C_Stop:	
  2807                           
  2808                           ;i2c.c: 149: PEN = 1;
  2809                           
  2810                           ;incstack = 0
  2811                           ; Regs used in _I2C_Stop: []
  2812  0364  1683               	bsf	3,5	;RP0=1, select bank1
  2813  0365  1303               	bcf	3,6	;RP1=0, select bank1
  2814  0366  1511               	bsf	17,2	;volatile
  2815  0367                     l141:	
  2816                           ;i2c.c: 150: while(PEN == 1);
  2817                           
  2818  0367  1D11               	btfss	17,2	;volatile
  2819  0368  0008               	return
  2820  0369  2B67               	goto	l141
  2821  036A                     __end_of_I2C_Stop:	
  2822                           
  2823                           	psect	text15
  2824  035E                     __ptext15:	
  2825 ;; *************** function _I2C_Start *****************
  2826 ;; Defined at:
  2827 ;;		line 118 in file "i2c.c"
  2828 ;; Parameters:    Size  Location     Type
  2829 ;;		None
  2830 ;; Auto vars:     Size  Location     Type
  2831 ;;		None
  2832 ;; Return value:  Size  Location     Type
  2833 ;;                  1    wreg      void 
  2834 ;; Registers used:
  2835 ;;		None
  2836 ;; Tracked objects:
  2837 ;;		On entry : 0/0
  2838 ;;		On exit  : 0/0
  2839 ;;		Unchanged: 0/0
  2840 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2841 ;;      Params:         0       0       0       0       0
  2842 ;;      Locals:         0       0       0       0       0
  2843 ;;      Temps:          0       0       0       0       0
  2844 ;;      Totals:         0       0       0       0       0
  2845 ;;Total ram usage:        0 bytes
  2846 ;; Hardware stack levels used:    1
  2847 ;; This function calls:
  2848 ;;		Nothing
  2849 ;; This function is called by:
  2850 ;;		_RTC_Init
  2851 ;;		_RTC_SetDateTime
  2852 ;;		_RTC_GetDateTime
  2853 ;; This function uses a non-reentrant model
  2854 ;;
  2855                           
  2856                           
  2857                           ;psect for function _I2C_Start
  2858  035E                     _I2C_Start:	
  2859                           
  2860                           ;i2c.c: 120: SEN = 1;
  2861                           
  2862                           ;incstack = 0
  2863                           ; Regs used in _I2C_Start: []
  2864  035E  1683               	bsf	3,5	;RP0=1, select bank1
  2865  035F  1303               	bcf	3,6	;RP1=0, select bank1
  2866  0360  1411               	bsf	17,0	;volatile
  2867  0361                     l135:	
  2868                           ;i2c.c: 121: while(SEN == 1);
  2869                           
  2870  0361  1C11               	btfss	17,0	;volatile
  2871  0362  0008               	return
  2872  0363  2B61               	goto	l135
  2873  0364                     __end_of_I2C_Start:	
  2874                           
  2875                           	psect	text16
  2876  03FF                     __ptext16:	
  2877 ;; *************** function _I2C_Read *****************
  2878 ;; Defined at:
  2879 ;;		line 214 in file "i2c.c"
  2880 ;; Parameters:    Size  Location     Type
  2881 ;;  v_ackOption_    1    wreg     unsigned char 
  2882 ;; Auto vars:     Size  Location     Type
  2883 ;;  v_ackOption_    1    1[COMMON] unsigned char 
  2884 ;;  v_i2cData_u8    1    2[COMMON] unsigned char 
  2885 ;; Return value:  Size  Location     Type
  2886 ;;                  1    wreg      unsigned char 
  2887 ;; Registers used:
  2888 ;;		wreg, status,2, status,0, pclath, cstack
  2889 ;; Tracked objects:
  2890 ;;		On entry : 0/0
  2891 ;;		On exit  : 0/0
  2892 ;;		Unchanged: 0/0
  2893 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2894 ;;      Params:         0       0       0       0       0
  2895 ;;      Locals:         2       0       0       0       0
  2896 ;;      Temps:          1       0       0       0       0
  2897 ;;      Totals:         3       0       0       0       0
  2898 ;;Total ram usage:        3 bytes
  2899 ;; Hardware stack levels used:    1
  2900 ;; Hardware stack levels required when called:    1
  2901 ;; This function calls:
  2902 ;;		_i2c_Ack
  2903 ;;		_i2c_NoAck
  2904 ;;		_i2c_WaitForIdle
  2905 ;; This function is called by:
  2906 ;;		_RTC_GetDateTime
  2907 ;; This function uses a non-reentrant model
  2908 ;;
  2909                           
  2910                           
  2911                           ;psect for function _I2C_Read
  2912  03FF                     _I2C_Read:	
  2913                           
  2914                           ;incstack = 0
  2915                           ; Regs used in _I2C_Read: [wreg+status,2+status,0+pclath+cstack]
  2916                           ;I2C_Read@v_ackOption_u8 stored from wreg
  2917  03FF  00F2               	movwf	I2C_Read@v_ackOption_u8
  2918                           
  2919                           ;i2c.c: 216: uint8_t v_i2cData_u8=0x00;
  2920  0400  01F3               	clrf	I2C_Read@v_i2cData_u8
  2921                           
  2922                           ;i2c.c: 218: RCEN = 1;
  2923  0401  1683               	bsf	3,5	;RP0=1, select bank1
  2924  0402  1303               	bcf	3,6	;RP1=0, select bank1
  2925  0403  1591               	bsf	17,3	;volatile
  2926  0404                     l153:	
  2927                           ;i2c.c: 219: while(BF==0);
  2928                           
  2929  0404  1C14               	btfss	20,0	;volatile
  2930  0405  2C04               	goto	l153
  2931                           
  2932                           ;i2c.c: 220: v_i2cData_u8 = SSPBUF;
  2933  0406  1283               	bcf	3,5	;RP0=0, select bank0
  2934  0407  1303               	bcf	3,6	;RP1=0, select bank0
  2935  0408  0813               	movf	19,w	;volatile
  2936  0409  00F1               	movwf	??_I2C_Read
  2937  040A  0871               	movf	??_I2C_Read,w
  2938  040B  00F3               	movwf	I2C_Read@v_i2cData_u8
  2939                           
  2940                           ;i2c.c: 221: i2c_WaitForIdle();
  2941  040C  120A  118A  2382  120A  118A  	fcall	_i2c_WaitForIdle
  2942                           
  2943                           ;i2c.c: 223: if(v_ackOption_u8==1)
  2944  0411  0372               	decf	I2C_Read@v_ackOption_u8,w
  2945  0412  1D03               	btfss	3,2
  2946  0413  2C1A               	goto	l1232
  2947                           
  2948                           ;i2c.c: 224: {
  2949                           ;i2c.c: 225: i2c_Ack();
  2950  0414  120A  118A  236A  120A  118A  	fcall	_i2c_Ack
  2951                           
  2952                           ;i2c.c: 226: }
  2953  0419  2C1D               	goto	l1234
  2954  041A                     l1232:	
  2955                           
  2956                           ;i2c.c: 227: else
  2957                           ;i2c.c: 228: {
  2958                           ;i2c.c: 229: i2c_NoAck();
  2959  041A  120A  118A  2371   	fcall	_i2c_NoAck
  2960  041D                     l1234:	
  2961                           
  2962                           ;i2c.c: 230: }
  2963                           ;i2c.c: 232: return v_i2cData_u8;
  2964  041D  0873               	movf	I2C_Read@v_i2cData_u8,w
  2965  041E  0008               	return
  2966  041F                     __end_of_I2C_Read:	
  2967                           
  2968                           	psect	text17
  2969  0382                     __ptext17:	
  2970 ;; *************** function _i2c_WaitForIdle *****************
  2971 ;; Defined at:
  2972 ;;		line 258 in file "i2c.c"
  2973 ;; Parameters:    Size  Location     Type
  2974 ;;		None
  2975 ;; Auto vars:     Size  Location     Type
  2976 ;;		None
  2977 ;; Return value:  Size  Location     Type
  2978 ;;                  1    wreg      void 
  2979 ;; Registers used:
  2980 ;;		None
  2981 ;; Tracked objects:
  2982 ;;		On entry : 0/0
  2983 ;;		On exit  : 0/0
  2984 ;;		Unchanged: 0/0
  2985 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2986 ;;      Params:         0       0       0       0       0
  2987 ;;      Locals:         0       0       0       0       0
  2988 ;;      Temps:          0       0       0       0       0
  2989 ;;      Totals:         0       0       0       0       0
  2990 ;;Total ram usage:        0 bytes
  2991 ;; Hardware stack levels used:    1
  2992 ;; This function calls:
  2993 ;;		Nothing
  2994 ;; This function is called by:
  2995 ;;		_I2C_Write
  2996 ;;		_I2C_Read
  2997 ;; This function uses a non-reentrant model
  2998 ;;
  2999                           
  3000                           
  3001                           ;psect for function _i2c_WaitForIdle
  3002  0382                     _i2c_WaitForIdle:	
  3003  0382                     l161:	
  3004                           ;i2c.c: 260: while ( (SEN == 1) || (RSEN == 1) || (PEN == 1) || (RCEN == 1) || (R_W == 1
      +                          ) );
  3005                           
  3006                           ;incstack = 0
  3007                           ; Regs used in _i2c_WaitForIdle: []
  3008                           
  3009  0382  1683               	bsf	3,5	;RP0=1, select bank1
  3010  0383  1303               	bcf	3,6	;RP1=0, select bank1
  3011  0384  1C11               	btfss	17,0	;volatile
  3012  0385  1891               	btfsc	17,1	;volatile
  3013  0386  2B82               	goto	l161
  3014  0387  1D11               	btfss	17,2	;volatile
  3015  0388  1991               	btfsc	17,3	;volatile
  3016  0389  2B82               	goto	l161
  3017  038A  1D14               	btfss	20,2	;volatile
  3018  038B  0008               	return
  3019  038C  2B82               	goto	l161
  3020  038D                     __end_of_i2c_WaitForIdle:	
  3021                           
  3022                           	psect	text18
  3023  0371                     __ptext18:	
  3024 ;; *************** function _i2c_NoAck *****************
  3025 ;; Defined at:
  3026 ;;		line 299 in file "i2c.c"
  3027 ;; Parameters:    Size  Location     Type
  3028 ;;		None
  3029 ;; Auto vars:     Size  Location     Type
  3030 ;;		None
  3031 ;; Return value:  Size  Location     Type
  3032 ;;                  1    wreg      void 
  3033 ;; Registers used:
  3034 ;;		None
  3035 ;; Tracked objects:
  3036 ;;		On entry : 0/0
  3037 ;;		On exit  : 0/0
  3038 ;;		Unchanged: 0/0
  3039 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3040 ;;      Params:         0       0       0       0       0
  3041 ;;      Locals:         0       0       0       0       0
  3042 ;;      Temps:          0       0       0       0       0
  3043 ;;      Totals:         0       0       0       0       0
  3044 ;;Total ram usage:        0 bytes
  3045 ;; Hardware stack levels used:    1
  3046 ;; This function calls:
  3047 ;;		Nothing
  3048 ;; This function is called by:
  3049 ;;		_I2C_Read
  3050 ;; This function uses a non-reentrant model
  3051 ;;
  3052                           
  3053                           
  3054                           ;psect for function _i2c_NoAck
  3055  0371                     _i2c_NoAck:	
  3056                           
  3057                           ;i2c.c: 301: ACKDT = 1;
  3058                           
  3059                           ;incstack = 0
  3060                           ; Regs used in _i2c_NoAck: []
  3061  0371  1683               	bsf	3,5	;RP0=1, select bank1
  3062  0372  1303               	bcf	3,6	;RP1=0, select bank1
  3063  0373  1691               	bsf	17,5	;volatile
  3064                           
  3065                           ;i2c.c: 302: ACKEN = 1;
  3066  0374  1611               	bsf	17,4	;volatile
  3067  0375                     l173:	
  3068                           ;i2c.c: 303: while(ACKEN == 1);
  3069                           
  3070  0375  1E11               	btfss	17,4	;volatile
  3071  0376  0008               	return
  3072  0377  2B75               	goto	l173
  3073  0378                     __end_of_i2c_NoAck:	
  3074                           
  3075                           	psect	text19
  3076  036A                     __ptext19:	
  3077 ;; *************** function _i2c_Ack *****************
  3078 ;; Defined at:
  3079 ;;		line 279 in file "i2c.c"
  3080 ;; Parameters:    Size  Location     Type
  3081 ;;		None
  3082 ;; Auto vars:     Size  Location     Type
  3083 ;;		None
  3084 ;; Return value:  Size  Location     Type
  3085 ;;                  1    wreg      void 
  3086 ;; Registers used:
  3087 ;;		None
  3088 ;; Tracked objects:
  3089 ;;		On entry : 0/0
  3090 ;;		On exit  : 0/0
  3091 ;;		Unchanged: 0/0
  3092 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3093 ;;      Params:         0       0       0       0       0
  3094 ;;      Locals:         0       0       0       0       0
  3095 ;;      Temps:          0       0       0       0       0
  3096 ;;      Totals:         0       0       0       0       0
  3097 ;;Total ram usage:        0 bytes
  3098 ;; Hardware stack levels used:    1
  3099 ;; This function calls:
  3100 ;;		Nothing
  3101 ;; This function is called by:
  3102 ;;		_I2C_Read
  3103 ;; This function uses a non-reentrant model
  3104 ;;
  3105                           
  3106                           
  3107                           ;psect for function _i2c_Ack
  3108  036A                     _i2c_Ack:	
  3109                           
  3110                           ;i2c.c: 281: ACKDT = 0;
  3111                           
  3112                           ;incstack = 0
  3113                           ; Regs used in _i2c_Ack: []
  3114  036A  1683               	bsf	3,5	;RP0=1, select bank1
  3115  036B  1303               	bcf	3,6	;RP1=0, select bank1
  3116  036C  1291               	bcf	17,5	;volatile
  3117                           
  3118                           ;i2c.c: 282: ACKEN = 1;
  3119  036D  1611               	bsf	17,4	;volatile
  3120  036E                     l167:	
  3121                           ;i2c.c: 283: while(ACKEN == 1);
  3122                           
  3123  036E  1E11               	btfss	17,4	;volatile
  3124  036F  0008               	return
  3125  0370  2B6E               	goto	l167
  3126  0371                     __end_of_i2c_Ack:	
  3127  007E                     btemp	set	126	;btemp
  3128  007E                     wtemp0	set	126


Data Sizes:
    Strings     0
    Constant    0
    Data        10
    BSS         0
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           13     12      12
    BANK0            80     21      31
    BANK1            80      0       0
    BANK3            85      0       0
    BANK2            96      0       0

Pointer List with Targets:

    RTC_GetDateTime@rtc	PTR struct . size(1) Largest target is 7
		 -> main@rtc(BANK0[7]), 

    RTC_SetDateTime@rtc	PTR struct . size(1) Largest target is 7
		 -> main@rtc(BANK0[7]), 


Critical Paths under _main in COMMON

    _main->_ui8Dec2HexDisplay
    _vDisplay->_DELAY_ms
    _DELAY_ms->_DELAY_us
    _ui8Hex2DECDisplay->___bmul
    _ui8Dec2HexDisplay->___awdiv
    _RTC_SetDateTime->_I2C_Write
    _RTC_Init->_I2C_Write
    _RTC_GetDateTime->_I2C_Read

Critical Paths under _main in BANK0

    _main->_ui8Dec2HexDisplay

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                18    18      0    4300
                                              3 BANK0     18    18      0
                           _DELAY_ms
                    _RTC_GetDateTime
                           _RTC_Init
                    _RTC_SetDateTime
                  _ui8Dec2HexDisplay
                  _ui8Hex2DECDisplay
                           _vDisplay
 ---------------------------------------------------------------------------------
 (1) _vDisplay                                             5     2      3     929
                                              4 COMMON     5     2      3
                           _DELAY_ms
 ---------------------------------------------------------------------------------
 (2) _DELAY_ms                                             2     0      2     523
                                              2 COMMON     2     0      2
                           _DELAY_us
 ---------------------------------------------------------------------------------
 (3) _DELAY_us                                             2     0      2     129
                                              0 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (1) _ui8Hex2DECDisplay                                    4     4      0     213
                                              4 COMMON     4     4      0
                             ___bmul
 ---------------------------------------------------------------------------------
 (2) ___bmul                                               4     3      1     145
                                              0 COMMON     4     3      1
 ---------------------------------------------------------------------------------
 (1) _ui8Dec2HexDisplay                                    6     6      0    1241
                                              9 COMMON     3     3      0
                                              0 BANK0      3     3      0
                            ___awdiv
                            ___awmod
 ---------------------------------------------------------------------------------
 (2) ___awmod                                              7     3      4     614
                                              0 COMMON     7     3      4
 ---------------------------------------------------------------------------------
 (2) ___awdiv                                              9     5      4     512
                                              0 COMMON     9     5      4
 ---------------------------------------------------------------------------------
 (1) _RTC_SetDateTime                                      1     1      0     203
                                              1 COMMON     1     1      0
                          _I2C_Start
                           _I2C_Stop
                          _I2C_Write
 ---------------------------------------------------------------------------------
 (1) _RTC_Init                                             0     0      0      22
                           _I2C_Init
                          _I2C_Start
                           _I2C_Stop
                          _I2C_Write
 ---------------------------------------------------------------------------------
 (2) _I2C_Init                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _RTC_GetDateTime                                      2     2      0     249
                                              3 COMMON     2     2      0
                           _I2C_Read
                          _I2C_Start
                           _I2C_Stop
                          _I2C_Write
 ---------------------------------------------------------------------------------
 (2) _I2C_Write                                            1     1      0      22
                                              0 COMMON     1     1      0
                    _i2c_WaitForIdle
 ---------------------------------------------------------------------------------
 (2) _I2C_Stop                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _I2C_Start                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _I2C_Read                                             3     3      0      46
                                              0 COMMON     3     3      0
                            _i2c_Ack
                          _i2c_NoAck
                    _i2c_WaitForIdle
 ---------------------------------------------------------------------------------
 (3) _i2c_WaitForIdle                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _i2c_NoAck                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _i2c_Ack                                              0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _DELAY_ms
     _DELAY_us
   _RTC_GetDateTime
     _I2C_Read
       _i2c_Ack
       _i2c_NoAck
       _i2c_WaitForIdle
     _I2C_Start
     _I2C_Stop
     _I2C_Write
       _i2c_WaitForIdle
   _RTC_Init
     _I2C_Init
     _I2C_Start
     _I2C_Stop
     _I2C_Write
       _i2c_WaitForIdle
   _RTC_SetDateTime
     _I2C_Start
     _I2C_Stop
     _I2C_Write
       _i2c_WaitForIdle
   _ui8Dec2HexDisplay
     ___awdiv
     ___awmod
   _ui8Hex2DECDisplay
     ___bmul
   _vDisplay
     _DELAY_ms
       _DELAY_us

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BANK3               55      0       0       9        0.0%
BITBANK3            55      0       0       8        0.0%
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
BANK2               60      0       0      11        0.0%
BITBANK2            60      0       0      10        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               50      0       0       7        0.0%
BITBANK1            50      0       0       6        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50     15      1F       5       38.8%
BITBANK0            50      0       0       4        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               D      C       C       1       92.3%
BITCOMMON            D      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0      2B      12        0.0%
ABS                  0      0      2B       3        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA             100      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V1.43 build -156212558 
Symbol Table                                                                                   Sun Sep 10 04:30:55 2017

                         pc 0002              ___bmul@product 0073          __size_of_I2C_Start 0006  
               __CFG_CP$OFF 0000            ?_i2c_WaitForIdle 0071          __size_of_I2C_Write 000D  
                        _BF 04A0                ___awdiv@sign 0077                          fsr 0004  
                       l141 0367                         l135 0361                         l161 0382  
                       l153 0404                         l147 039D                         l173 0375  
                       l167 036E                         _PEN 048A                __CFG_CPD$OFF 0000  
                       _SEN 0488                         u805 04FC                         u815 0506  
                       u905 04AD                         u775 04E4                         u795 04F0  
                       u875 0493                         u895 04A4                         _R_W 04A2  
   __end_of_RTC_SetDateTime 0577                         fsr0 0004                         indf 0000  
              ___awmod@sign 0077                __CFG_FOSC$HS 0000                __CFG_LVP$OFF 0000  
                      l1206 03D5                        l1232 041A                        l1304 0483  
                      l1240 03B5                        l1234 041D                        l1330 04BF  
                      l1322 04AC                        l1260 04CE                        l1316 0490  
                      l1308 048A                        l1244 03BB                        l1318 049E  
                      l1326 04B7                        l1184 038D                        l1266 04D9  
                      l1522 0762                        l1514 074F                        l1292 0518  
                      l1284 0505                        l1276 04E1                        l1532 0776  
                      l1278 04EF                        l1606 0707                        l1614 07DD  
                      l1288 0510                        l1546 06A5                        l1556 06B1  
                      l1558 06C4                        l1568 06D4                        l1578 06E2  
                      l1588 06F0                        l1598 06FE                        _IOCB 0096  
                      _RCEN 048B                        _RSEN 0489                 main@ucHours 002A  
               main@ucMonth 002C                __CFG_WRT$OFF 0000                        _main 065A  
          __end_of_I2C_Init 03B3            __end_of_I2C_Read 041F                        btemp 007E  
          __end_of_I2C_Stop 036A                        start 0001            __end_of_DELAY_ms 03E9  
          __end_of_DELAY_us 0398           ___bmul@multiplier 0074             __end_of_i2c_Ack 0371  
                     ?_main 0071                       _ACKEN 048C                       _ACKDT 048D  
           __end_of___awdiv 051D               __CFG_WDTE$OFF 0000             __end_of___awmod 04C4  
           ___awdiv@divisor 0071             ___awdiv@counter 0076                       _PORTB 0006  
                     _PORTD 0008                       _TRISD 0088            __end_of_RTC_Init 043F  
         __end_of_I2C_Start 0364           __end_of_I2C_Write 03A5              __CFG_BOREN$OFF 0000  
                     pclath 000A   ui8Hex2DECDisplay@ui8Input 0078                       status 0003  
                     wtemp0 007E    ui8Dec2HexDisplay@ui8Temp 0022             __initialization 07F0  
              __end_of_main 07F0                      ??_main 0023          RTC_SetDateTime@rtc 0072  
          ?_RTC_SetDateTime 0071          __size_of_i2c_NoAck 0007            ___awdiv@dividend 0073  
                    _SSPADD 0093                      _TRISC3 043B                      _TRISC4 043C  
                    _SSPCON 0014                      _SSPBUF 0013                   ??_i2c_Ack 0071  
            __CFG_PWRTE$OFF 0000            __end_of_vDisplay 05DB       I2C_Write@v_i2cData_u8 0071  
                    ___bmul 03B3                   ??___awdiv 0075                   ??___awmod 0075  
          ___awdiv@quotient 0078             ___awmod@divisor 0071             ___awmod@counter 0076  
          DELAY_ms@ms_count 0073                   ?_I2C_Init 0071                   ?_I2C_Read 0071  
                 ?_I2C_Stop 0071                   ?_DELAY_ms 0073                   ?_DELAY_us 0071  
   __end_of__initialization 07FC         ___bmul@multiplicand 0071              __pcstackCOMMON 0071  
              __pidataBANK0 0378           __end_of_i2c_NoAck 0378                   ?_RTC_Init 0071  
                ??_I2C_Init 0071              _OPTION_REGbits 0081                  ??_I2C_Read 0071  
ui8Dec2HexDisplay@ui8Output 0020                  ??_I2C_Stop 0071            vDisplay@ui8First 0079  
                ??_DELAY_ms 0075                  ??_DELAY_us 0073    __size_of_RTC_GetDateTime 007F  
            main@ui8SetMode 0027           _ui8Hex2DECDisplay 03E9                  __pmaintext 065A  
                   ?___bmul 0071          ?_ui8Hex2DECDisplay 0071                  ??_RTC_Init 0072  
       ??_ui8Hex2DECDisplay 0075           _ui8Dec2HexDisplay 043F    __size_of_i2c_WaitForIdle 000B  
        ?_ui8Dec2HexDisplay 0071                   ?_vDisplay 0075            DELAY_us@us_count 0071  
                   _SSPSTAT 0094         ??_ui8Dec2HexDisplay 007A                     _i2c_Ack 036A  
 __end_of_ui8Hex2DECDisplay 03FF                   _I2C_Start 035E                   _I2C_Write 0398  
           __size_of___bmul 0011                     ___awdiv 04C4                     ___awmod 0479  
                 _ANSELbits 0188   __end_of_ui8Dec2HexDisplay 0479                     __ptext1 0577  
                   __ptext2 03D5                     __ptext3 038D                     __ptext4 03E9  
                   __ptext5 03B3                     __ptext6 043F                     __ptext7 0479  
                   __ptext8 04C4                     __ptext9 051D            ___awmod@dividend 0073  
                ??_vDisplay 0078                     main@rtc 002E        end_of_initialization 07FC  
    I2C_Read@v_ackOption_u8 0072                  ?_I2C_Start 0071                  ?_I2C_Write 0071  
         ??_RTC_GetDateTime 0074                   _PORTBbits 0006                   _PORTCbits 0007  
                 _TRISBbits 0086                   _TRISCbits 0087                   _TRISEbits 0089  
         __size_of_I2C_Init 000E           __size_of_I2C_Read 0020           __size_of_I2C_Stop 0006  
         __size_of_DELAY_ms 0014           __size_of_DELAY_us 000B    __size_of_RTC_SetDateTime 005A  
         ??_i2c_WaitForIdle 0071                  main@ucDate 002B  __size_of_ui8Hex2DECDisplay 0016  
                main@ucYear 0026              __end_of___bmul 03C4  __size_of_ui8Dec2HexDisplay 003A  
                 _i2c_NoAck 0371           __size_of_RTC_Init 0020         start_initialization 07F0  
               ??_I2C_Start 0071                 ??_I2C_Write 0071           vDisplay@ui8Fourth 0077  
         vDisplay@ui8Second 0075                    ??___bmul 0072                  init_fetch0 03C4  
               __pdataBANK0 0035                  ?_i2c_NoAck 0071                   ___latbits 0002  
             __pcstackBANK0 0020           __size_of_vDisplay 0064             main@ui8SetValue 002D  
           vDisplay@ui8Thrd 0076                   _ucBCD_ARR 0035                    ?_i2c_Ack 0071  
         ??_RTC_SetDateTime 0072                    ?___awdiv 0071                    ?___awmod 0071  
      I2C_Read@v_i2cData_u8 0073                    _I2C_Init 03A5                    _I2C_Read 03FF  
                  _I2C_Stop 0364                    _DELAY_ms 03D5                    _DELAY_us 038D  
           _RTC_GetDateTime 05DB                    _RTC_Init 041F                 ??_i2c_NoAck 0071  
           _i2c_WaitForIdle 0382                    _WPUBbits 0095                   main@ucMin 0029  
                 main@ucSec 0028    ui8Hex2DECDisplay@ui8Temp 0077            __size_of_i2c_Ack 0007  
          __size_of___awdiv 0059            __size_of___awmod 004B     __end_of_RTC_GetDateTime 065A  
                _ANSELHbits 0189                    __ptext10 041F                    __ptext11 03A5  
                  __ptext12 05DB                    __ptext13 0398                    __ptext14 0364  
                  __ptext15 035E                    __ptext16 03FF                    __ptext17 0382  
                  __ptext18 0371                    __ptext19 036A                    _vDisplay 0577  
 ui8Dec2HexDisplay@ui8Input 0021               __size_of_main 0196     __end_of_i2c_WaitForIdle 038D  
                  init_ram0 03C8          RTC_GetDateTime@rtc 0075             _RTC_SetDateTime 051D  
          ?_RTC_GetDateTime 0071  
