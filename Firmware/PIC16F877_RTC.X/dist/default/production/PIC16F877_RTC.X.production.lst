

Microchip Technology PIC LITE Macro Assembler V1.43 build -156212558 
                                                                                               Sun Sep 17 13:41:34 2017

Microchip Technology Omniscient Code Generator v1.43 (Free mode) build 201707250354
     1                           	processor	16F887
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK0,global,class=CODE,delta=2
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
     7                           	psect	inittext,global,class=CODE,delta=2
     8                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
     9                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	maintext,global,class=CODE,split=1,delta=2
    11                           	psect	text1,local,class=CODE,merge=1,delta=2
    12                           	psect	text2,local,class=CODE,merge=1,delta=2
    13                           	psect	text3,local,class=CODE,merge=1,delta=2
    14                           	psect	text4,local,class=CODE,merge=1,delta=2
    15                           	psect	text5,local,class=CODE,merge=1,delta=2,group=2
    16                           	psect	text6,local,class=CODE,merge=1,delta=2
    17                           	psect	text7,local,class=CODE,merge=1,delta=2,group=2
    18                           	psect	text8,local,class=CODE,merge=1,delta=2,group=2
    19                           	psect	text9,local,class=CODE,merge=1,delta=2
    20                           	psect	text10,local,class=CODE,merge=1,delta=2
    21                           	psect	text11,local,class=CODE,merge=1,delta=2
    22                           	psect	text12,local,class=CODE,merge=1,delta=2
    23                           	psect	text13,local,class=CODE,merge=1,delta=2
    24                           	psect	text14,local,class=CODE,merge=1,delta=2
    25                           	psect	text15,local,class=CODE,merge=1,delta=2
    26                           	psect	text16,local,class=CODE,merge=1,delta=2
    27                           	psect	text17,local,class=CODE,merge=1,delta=2
    28                           	psect	text18,local,class=CODE,merge=1,delta=2
    29                           	psect	text19,local,class=CODE,merge=1,delta=2
    30                           	dabs	1,0x7E,2
    31  0000                     
    32                           ; Version 1.43
    33                           ; Generated 25/07/2017 GMT
    34                           ; 
    35                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    36                           ; All rights reserved.
    37                           ; 
    38                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    39                           ; 
    40                           ; Redistribution and use in source and binary forms, with or without modification, are
    41                           ; permitted provided that the following conditions are met:
    42                           ; 
    43                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    44                           ;        conditions and the following disclaimer.
    45                           ; 
    46                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    47                           ;        of conditions and the following disclaimer in the documentation and/or other
    48                           ;        materials provided with the distribution.
    49                           ; 
    50                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    51                           ;        software without specific prior written permission.
    52                           ; 
    53                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    54                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    55                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    56                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    57                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    58                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    59                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    60                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    61                           ; 
    62                           ; 
    63                           ; Code-generator required, PIC16F887 Definitions
    64                           ; 
    65                           ; SFR Addresses
    66  0000                     	;# 
    67  0001                     	;# 
    68  0002                     	;# 
    69  0003                     	;# 
    70  0004                     	;# 
    71  0005                     	;# 
    72  0006                     	;# 
    73  0007                     	;# 
    74  0008                     	;# 
    75  0009                     	;# 
    76  000A                     	;# 
    77  000B                     	;# 
    78  000C                     	;# 
    79  000D                     	;# 
    80  000E                     	;# 
    81  000E                     	;# 
    82  000F                     	;# 
    83  0010                     	;# 
    84  0011                     	;# 
    85  0012                     	;# 
    86  0013                     	;# 
    87  0014                     	;# 
    88  0015                     	;# 
    89  0015                     	;# 
    90  0016                     	;# 
    91  0017                     	;# 
    92  0018                     	;# 
    93  0019                     	;# 
    94  001A                     	;# 
    95  001B                     	;# 
    96  001B                     	;# 
    97  001C                     	;# 
    98  001D                     	;# 
    99  001E                     	;# 
   100  001F                     	;# 
   101  0081                     	;# 
   102  0085                     	;# 
   103  0086                     	;# 
   104  0087                     	;# 
   105  0088                     	;# 
   106  0089                     	;# 
   107  008C                     	;# 
   108  008D                     	;# 
   109  008E                     	;# 
   110  008F                     	;# 
   111  0090                     	;# 
   112  0091                     	;# 
   113  0092                     	;# 
   114  0093                     	;# 
   115  0093                     	;# 
   116  0093                     	;# 
   117  0094                     	;# 
   118  0095                     	;# 
   119  0096                     	;# 
   120  0097                     	;# 
   121  0098                     	;# 
   122  0099                     	;# 
   123  009A                     	;# 
   124  009B                     	;# 
   125  009C                     	;# 
   126  009D                     	;# 
   127  009E                     	;# 
   128  009F                     	;# 
   129  0105                     	;# 
   130  0107                     	;# 
   131  0108                     	;# 
   132  0109                     	;# 
   133  010C                     	;# 
   134  010C                     	;# 
   135  010D                     	;# 
   136  010E                     	;# 
   137  010F                     	;# 
   138  0185                     	;# 
   139  0187                     	;# 
   140  0188                     	;# 
   141  0189                     	;# 
   142  018C                     	;# 
   143  018D                     	;# 
   144  0000                     	;# 
   145  0001                     	;# 
   146  0002                     	;# 
   147  0003                     	;# 
   148  0004                     	;# 
   149  0005                     	;# 
   150  0006                     	;# 
   151  0007                     	;# 
   152  0008                     	;# 
   153  0009                     	;# 
   154  000A                     	;# 
   155  000B                     	;# 
   156  000C                     	;# 
   157  000D                     	;# 
   158  000E                     	;# 
   159  000E                     	;# 
   160  000F                     	;# 
   161  0010                     	;# 
   162  0011                     	;# 
   163  0012                     	;# 
   164  0013                     	;# 
   165  0014                     	;# 
   166  0015                     	;# 
   167  0015                     	;# 
   168  0016                     	;# 
   169  0017                     	;# 
   170  0018                     	;# 
   171  0019                     	;# 
   172  001A                     	;# 
   173  001B                     	;# 
   174  001B                     	;# 
   175  001C                     	;# 
   176  001D                     	;# 
   177  001E                     	;# 
   178  001F                     	;# 
   179  0081                     	;# 
   180  0085                     	;# 
   181  0086                     	;# 
   182  0087                     	;# 
   183  0088                     	;# 
   184  0089                     	;# 
   185  008C                     	;# 
   186  008D                     	;# 
   187  008E                     	;# 
   188  008F                     	;# 
   189  0090                     	;# 
   190  0091                     	;# 
   191  0092                     	;# 
   192  0093                     	;# 
   193  0093                     	;# 
   194  0093                     	;# 
   195  0094                     	;# 
   196  0095                     	;# 
   197  0096                     	;# 
   198  0097                     	;# 
   199  0098                     	;# 
   200  0099                     	;# 
   201  009A                     	;# 
   202  009B                     	;# 
   203  009C                     	;# 
   204  009D                     	;# 
   205  009E                     	;# 
   206  009F                     	;# 
   207  0105                     	;# 
   208  0107                     	;# 
   209  0108                     	;# 
   210  0109                     	;# 
   211  010C                     	;# 
   212  010C                     	;# 
   213  010D                     	;# 
   214  010E                     	;# 
   215  010F                     	;# 
   216  0185                     	;# 
   217  0187                     	;# 
   218  0188                     	;# 
   219  0189                     	;# 
   220  018C                     	;# 
   221  018D                     	;# 
   222  0000                     	;# 
   223  0001                     	;# 
   224  0002                     	;# 
   225  0003                     	;# 
   226  0004                     	;# 
   227  0005                     	;# 
   228  0006                     	;# 
   229  0007                     	;# 
   230  0008                     	;# 
   231  0009                     	;# 
   232  000A                     	;# 
   233  000B                     	;# 
   234  000C                     	;# 
   235  000D                     	;# 
   236  000E                     	;# 
   237  000E                     	;# 
   238  000F                     	;# 
   239  0010                     	;# 
   240  0011                     	;# 
   241  0012                     	;# 
   242  0013                     	;# 
   243  0014                     	;# 
   244  0015                     	;# 
   245  0015                     	;# 
   246  0016                     	;# 
   247  0017                     	;# 
   248  0018                     	;# 
   249  0019                     	;# 
   250  001A                     	;# 
   251  001B                     	;# 
   252  001B                     	;# 
   253  001C                     	;# 
   254  001D                     	;# 
   255  001E                     	;# 
   256  001F                     	;# 
   257  0081                     	;# 
   258  0085                     	;# 
   259  0086                     	;# 
   260  0087                     	;# 
   261  0088                     	;# 
   262  0089                     	;# 
   263  008C                     	;# 
   264  008D                     	;# 
   265  008E                     	;# 
   266  008F                     	;# 
   267  0090                     	;# 
   268  0091                     	;# 
   269  0092                     	;# 
   270  0093                     	;# 
   271  0093                     	;# 
   272  0093                     	;# 
   273  0094                     	;# 
   274  0095                     	;# 
   275  0096                     	;# 
   276  0097                     	;# 
   277  0098                     	;# 
   278  0099                     	;# 
   279  009A                     	;# 
   280  009B                     	;# 
   281  009C                     	;# 
   282  009D                     	;# 
   283  009E                     	;# 
   284  009F                     	;# 
   285  0105                     	;# 
   286  0107                     	;# 
   287  0108                     	;# 
   288  0109                     	;# 
   289  010C                     	;# 
   290  010C                     	;# 
   291  010D                     	;# 
   292  010E                     	;# 
   293  010F                     	;# 
   294  0185                     	;# 
   295  0187                     	;# 
   296  0188                     	;# 
   297  0189                     	;# 
   298  018C                     	;# 
   299  018D                     	;# 
   300  0000                     	;# 
   301  0001                     	;# 
   302  0002                     	;# 
   303  0003                     	;# 
   304  0004                     	;# 
   305  0005                     	;# 
   306  0006                     	;# 
   307  0007                     	;# 
   308  0008                     	;# 
   309  0009                     	;# 
   310  000A                     	;# 
   311  000B                     	;# 
   312  000C                     	;# 
   313  000D                     	;# 
   314  000E                     	;# 
   315  000E                     	;# 
   316  000F                     	;# 
   317  0010                     	;# 
   318  0011                     	;# 
   319  0012                     	;# 
   320  0013                     	;# 
   321  0014                     	;# 
   322  0015                     	;# 
   323  0015                     	;# 
   324  0016                     	;# 
   325  0017                     	;# 
   326  0018                     	;# 
   327  0019                     	;# 
   328  001A                     	;# 
   329  001B                     	;# 
   330  001B                     	;# 
   331  001C                     	;# 
   332  001D                     	;# 
   333  001E                     	;# 
   334  001F                     	;# 
   335  0081                     	;# 
   336  0085                     	;# 
   337  0086                     	;# 
   338  0087                     	;# 
   339  0088                     	;# 
   340  0089                     	;# 
   341  008C                     	;# 
   342  008D                     	;# 
   343  008E                     	;# 
   344  008F                     	;# 
   345  0090                     	;# 
   346  0091                     	;# 
   347  0092                     	;# 
   348  0093                     	;# 
   349  0093                     	;# 
   350  0093                     	;# 
   351  0094                     	;# 
   352  0095                     	;# 
   353  0096                     	;# 
   354  0097                     	;# 
   355  0098                     	;# 
   356  0099                     	;# 
   357  009A                     	;# 
   358  009B                     	;# 
   359  009C                     	;# 
   360  009D                     	;# 
   361  009E                     	;# 
   362  009F                     	;# 
   363  0105                     	;# 
   364  0107                     	;# 
   365  0108                     	;# 
   366  0109                     	;# 
   367  010C                     	;# 
   368  010C                     	;# 
   369  010D                     	;# 
   370  010E                     	;# 
   371  010F                     	;# 
   372  0185                     	;# 
   373  0187                     	;# 
   374  0188                     	;# 
   375  0189                     	;# 
   376  018C                     	;# 
   377  018D                     	;# 
   378  0000                     	;# 
   379  0001                     	;# 
   380  0002                     	;# 
   381  0003                     	;# 
   382  0004                     	;# 
   383  0005                     	;# 
   384  0006                     	;# 
   385  0007                     	;# 
   386  0008                     	;# 
   387  0009                     	;# 
   388  000A                     	;# 
   389  000B                     	;# 
   390  000C                     	;# 
   391  000D                     	;# 
   392  000E                     	;# 
   393  000E                     	;# 
   394  000F                     	;# 
   395  0010                     	;# 
   396  0011                     	;# 
   397  0012                     	;# 
   398  0013                     	;# 
   399  0014                     	;# 
   400  0015                     	;# 
   401  0015                     	;# 
   402  0016                     	;# 
   403  0017                     	;# 
   404  0018                     	;# 
   405  0019                     	;# 
   406  001A                     	;# 
   407  001B                     	;# 
   408  001B                     	;# 
   409  001C                     	;# 
   410  001D                     	;# 
   411  001E                     	;# 
   412  001F                     	;# 
   413  0081                     	;# 
   414  0085                     	;# 
   415  0086                     	;# 
   416  0087                     	;# 
   417  0088                     	;# 
   418  0089                     	;# 
   419  008C                     	;# 
   420  008D                     	;# 
   421  008E                     	;# 
   422  008F                     	;# 
   423  0090                     	;# 
   424  0091                     	;# 
   425  0092                     	;# 
   426  0093                     	;# 
   427  0093                     	;# 
   428  0093                     	;# 
   429  0094                     	;# 
   430  0095                     	;# 
   431  0096                     	;# 
   432  0097                     	;# 
   433  0098                     	;# 
   434  0099                     	;# 
   435  009A                     	;# 
   436  009B                     	;# 
   437  009C                     	;# 
   438  009D                     	;# 
   439  009E                     	;# 
   440  009F                     	;# 
   441  0105                     	;# 
   442  0107                     	;# 
   443  0108                     	;# 
   444  0109                     	;# 
   445  010C                     	;# 
   446  010C                     	;# 
   447  010D                     	;# 
   448  010E                     	;# 
   449  010F                     	;# 
   450  0185                     	;# 
   451  0187                     	;# 
   452  0188                     	;# 
   453  0189                     	;# 
   454  018C                     	;# 
   455  018D                     	;# 
   456                           
   457                           	psect	idataBANK0
   458  032B                     __pidataBANK0:	
   459                           
   460                           ;initializer for _ucBCD_ARR
   461  032B  34FC               	retlw	252
   462  032C  3460               	retlw	96
   463  032D  34DA               	retlw	218
   464  032E  34F2               	retlw	242
   465  032F  3466               	retlw	102
   466  0330  34B6               	retlw	182
   467  0331  34BE               	retlw	190
   468  0332  34E0               	retlw	224
   469  0333  34FE               	retlw	254
   470  0334  34F6               	retlw	246
   471  0008                     _PORTD	set	8
   472  0013                     _SSPBUF	set	19
   473  0014                     _SSPCON	set	20
   474  0007                     _PORTCbits	set	7
   475  0006                     _PORTBbits	set	6
   476  0006                     _PORTB	set	6
   477  0093                     _SSPADD	set	147
   478  0094                     _SSPSTAT	set	148
   479  0096                     _IOCB	set	150
   480  0081                     _OPTION_REGbits	set	129
   481  0095                     _WPUBbits	set	149
   482  0089                     _TRISEbits	set	137
   483  0086                     _TRISBbits	set	134
   484  0088                     _TRISD	set	136
   485  0087                     _TRISCbits	set	135
   486  048C                     _ACKEN	set	1164
   487  048D                     _ACKDT	set	1165
   488  04A2                     _R_W	set	1186
   489  048B                     _RCEN	set	1163
   490  04A0                     _BF	set	1184
   491  048A                     _PEN	set	1162
   492  0488                     _SEN	set	1160
   493  043C                     _TRISC4	set	1084
   494  043B                     _TRISC3	set	1083
   495  0489                     _RSEN	set	1161
   496  0188                     _ANSELbits	set	392
   497  0189                     _ANSELHbits	set	393
   498                           
   499                           ; #config settings
   500  0000                     
   501                           	psect	cinit
   502  07F0                     start_initialization:	
   503  07F0                     __initialization:	
   504                           
   505                           ; Initialize objects allocated to BANK0
   506  07F0  1383               	bcf	3,7	;select IRP bank0
   507  07F1  3042               	movlw	low (__pdataBANK0+10)
   508  07F2  00FD               	movwf	btemp+-1
   509  07F3  3003               	movlw	high __pidataBANK0
   510  07F4  00FE               	movwf	btemp
   511  07F5  302B               	movlw	low __pidataBANK0
   512  07F6  00FF               	movwf	btemp+1
   513  07F7  3038               	movlw	low __pdataBANK0
   514  07F8  0084               	movwf	4
   515  07F9  120A  118A  237B   	fcall	init_ram0
   516  07FC                     end_of_initialization:	
   517                           ;End of C runtime variable initialization code
   518                           
   519  07FC                     __end_of__initialization:	
   520  07FC  0183               	clrf	3
   521  07FD  120A  118A  2E0D   	ljmp	_main	;jump to C main() function
   522                           
   523                           	psect	dataBANK0
   524  0038                     __pdataBANK0:	
   525  0038                     _ucBCD_ARR:	
   526  0038                     	ds	10
   527                           
   528                           	psect	inittext
   529  0377                     init_fetch0:	
   530                           ;	Called with low address in FSR and high address in W
   531                           
   532  0377  087E               	movf	126,w
   533  0378  008A               	movwf	10
   534  0379  087F               	movf	127,w
   535  037A  0082               	movwf	2
   536  037B                     init_ram0:	
   537                           ;Called with:
   538                           ;	high address of idata address in btemp 
   539                           ;	low address of idata address in btemp+1 
   540                           ;	low address of data in FSR
   541                           ;	high address + 1 of data in btemp-1
   542                           
   543  037B  2377  120A  118A   	fcall	init_fetch0
   544  037E  0080               	movwf	0
   545  037F  0A84               	incf	4,f
   546  0380  0804               	movf	4,w
   547  0381  067D               	xorwf	125,w
   548  0382  1903               	btfsc	3,2
   549  0383  3400               	retlw	0
   550  0384  0AFF               	incf	127,f
   551  0385  1903               	btfsc	3,2
   552  0386  0AFE               	incf	126,f
   553  0387  2B7B               	goto	init_ram0
   554                           
   555                           	psect	cstackCOMMON
   556  0070                     __pcstackCOMMON:	
   557  0070                     ?_RTC_Init:	
   558  0070                     ?_RTC_GetDateTime:	
   559                           ; 1 bytes @ 0x0
   560                           
   561  0070                     ?_ui8Hex2DECDisplay:	
   562                           ; 1 bytes @ 0x0
   563                           
   564  0070                     ?_ui8Dec2HexDisplay:	
   565                           ; 1 bytes @ 0x0
   566                           
   567  0070                     ?_RTC_SetDateTime:	
   568                           ; 1 bytes @ 0x0
   569                           
   570  0070                     ?_DELAY_us:	
   571                           ; 1 bytes @ 0x0
   572                           
   573  0070                     ?_i2c_WaitForIdle:	
   574                           ; 1 bytes @ 0x0
   575                           
   576  0070                     ??_i2c_WaitForIdle:	
   577                           ; 1 bytes @ 0x0
   578                           
   579  0070                     ?_i2c_Ack:	
   580                           ; 1 bytes @ 0x0
   581                           
   582  0070                     ??_i2c_Ack:	
   583                           ; 1 bytes @ 0x0
   584                           
   585  0070                     ?_i2c_NoAck:	
   586                           ; 1 bytes @ 0x0
   587                           
   588  0070                     ??_i2c_NoAck:	
   589                           ; 1 bytes @ 0x0
   590                           
   591  0070                     ?_I2C_Init:	
   592                           ; 1 bytes @ 0x0
   593                           
   594  0070                     ??_I2C_Init:	
   595                           ; 1 bytes @ 0x0
   596                           
   597  0070                     ?_I2C_Start:	
   598                           ; 1 bytes @ 0x0
   599                           
   600  0070                     ??_I2C_Start:	
   601                           ; 1 bytes @ 0x0
   602                           
   603  0070                     ?_I2C_Stop:	
   604                           ; 1 bytes @ 0x0
   605                           
   606  0070                     ??_I2C_Stop:	
   607                           ; 1 bytes @ 0x0
   608                           
   609  0070                     ?_I2C_Write:	
   610                           ; 1 bytes @ 0x0
   611                           
   612  0070                     ??_I2C_Write:	
   613                           ; 1 bytes @ 0x0
   614                           
   615  0070                     ?_I2C_Read:	
   616                           ; 1 bytes @ 0x0
   617                           
   618  0070                     ??_I2C_Read:	
   619                           ; 1 bytes @ 0x0
   620                           
   621  0070                     ?___bmul:	
   622                           ; 1 bytes @ 0x0
   623                           
   624  0070                     ?_main:	
   625                           ; 1 bytes @ 0x0
   626                           
   627  0070                     ?___awdiv:	
   628                           ; 2 bytes @ 0x0
   629                           
   630  0070                     ?___awmod:	
   631                           ; 2 bytes @ 0x0
   632                           
   633  0070                     I2C_Write@v_i2cData_u8:	
   634                           ; 2 bytes @ 0x0
   635                           
   636  0070                     ___bmul@multiplicand:	
   637                           ; 1 bytes @ 0x0
   638                           
   639  0070                     DELAY_us@us_count:	
   640                           ; 1 bytes @ 0x0
   641                           
   642  0070                     ___awdiv@divisor:	
   643                           ; 2 bytes @ 0x0
   644                           
   645  0070                     ___awmod@divisor:	
   646                           ; 2 bytes @ 0x0
   647                           
   648                           
   649                           ; 2 bytes @ 0x0
   650  0070                     	ds	1
   651  0071                     ??_RTC_Init:	
   652  0071                     ??_RTC_SetDateTime:	
   653                           ; 1 bytes @ 0x1
   654                           
   655  0071                     ??___bmul:	
   656                           ; 1 bytes @ 0x1
   657                           
   658  0071                     I2C_Read@v_ackOption_u8:	
   659                           ; 1 bytes @ 0x1
   660                           
   661  0071                     RTC_SetDateTime@rtc:	
   662                           ; 1 bytes @ 0x1
   663                           
   664                           
   665                           ; 1 bytes @ 0x1
   666  0071                     	ds	1
   667  0072                     ?_DELAY_ms:	
   668  0072                     ??_DELAY_us:	
   669                           ; 1 bytes @ 0x2
   670                           
   671  0072                     I2C_Read@v_i2cData_u8:	
   672                           ; 1 bytes @ 0x2
   673                           
   674  0072                     ___bmul@product:	
   675                           ; 1 bytes @ 0x2
   676                           
   677  0072                     DELAY_ms@ms_count:	
   678                           ; 1 bytes @ 0x2
   679                           
   680  0072                     ___awdiv@dividend:	
   681                           ; 2 bytes @ 0x2
   682                           
   683  0072                     ___awmod@dividend:	
   684                           ; 2 bytes @ 0x2
   685                           
   686                           
   687                           ; 2 bytes @ 0x2
   688  0072                     	ds	1
   689  0073                     ??_RTC_GetDateTime:	
   690  0073                     ___bmul@multiplier:	
   691                           ; 1 bytes @ 0x3
   692                           
   693                           
   694                           ; 1 bytes @ 0x3
   695  0073                     	ds	1
   696  0074                     ??_DELAY_ms:	
   697  0074                     ??_ui8Hex2DECDisplay:	
   698                           ; 1 bytes @ 0x4
   699                           
   700  0074                     ??___awdiv:	
   701                           ; 1 bytes @ 0x4
   702                           
   703  0074                     ??___awmod:	
   704                           ; 1 bytes @ 0x4
   705                           
   706  0074                     RTC_GetDateTime@rtc:	
   707                           ; 1 bytes @ 0x4
   708                           
   709                           
   710                           ; 1 bytes @ 0x4
   711  0074                     	ds	1
   712  0075                     ___awdiv@counter:	
   713  0075                     ___awmod@counter:	
   714                           ; 1 bytes @ 0x5
   715                           
   716                           
   717                           ; 1 bytes @ 0x5
   718  0075                     	ds	1
   719  0076                     ui8Hex2DECDisplay@ui8Temp:	
   720  0076                     ___awdiv@sign:	
   721                           ; 1 bytes @ 0x6
   722                           
   723  0076                     ___awmod@sign:	
   724                           ; 1 bytes @ 0x6
   725                           
   726                           
   727                           ; 1 bytes @ 0x6
   728  0076                     	ds	1
   729  0077                     ui8Hex2DECDisplay@ui8Input:	
   730  0077                     ___awdiv@quotient:	
   731                           ; 1 bytes @ 0x7
   732                           
   733                           
   734                           ; 2 bytes @ 0x7
   735  0077                     	ds	2
   736  0079                     ?_vDisplay:	
   737  0079                     ??_ui8Dec2HexDisplay:	
   738                           ; 1 bytes @ 0x9
   739                           
   740  0079                     vDisplay@ui8Second:	
   741                           ; 1 bytes @ 0x9
   742                           
   743                           
   744                           ; 1 bytes @ 0x9
   745  0079                     	ds	1
   746  007A                     vDisplay@ui8Thrd:	
   747                           
   748                           ; 1 bytes @ 0xA
   749  007A                     	ds	1
   750  007B                     vDisplay@ui8Fourth:	
   751                           
   752                           ; 1 bytes @ 0xB
   753  007B                     	ds	1
   754  007C                     ??_vDisplay:	
   755                           
   756                           ; 1 bytes @ 0xC
   757  007C                     	ds	1
   758  007D                     vDisplay@ui8First:	
   759                           
   760                           ; 1 bytes @ 0xD
   761  007D                     	ds	1
   762                           
   763                           	psect	cstackBANK0
   764  0020                     __pcstackBANK0:	
   765  0020                     ui8Dec2HexDisplay@ui8Output:	
   766                           
   767                           ; 1 bytes @ 0x0
   768  0020                     	ds	1
   769  0021                     ui8Dec2HexDisplay@ui8Input:	
   770                           
   771                           ; 1 bytes @ 0x1
   772  0021                     	ds	1
   773  0022                     ui8Dec2HexDisplay@ui8Temp:	
   774                           
   775                           ; 1 bytes @ 0x2
   776  0022                     	ds	1
   777  0023                     ??_main:	
   778                           
   779                           ; 1 bytes @ 0x3
   780  0023                     	ds	6
   781  0029                     main@ucYear:	
   782                           
   783                           ; 1 bytes @ 0x9
   784  0029                     	ds	1
   785  002A                     main@ucMin:	
   786                           
   787                           ; 1 bytes @ 0xA
   788  002A                     	ds	1
   789  002B                     main@ucHours:	
   790                           
   791                           ; 1 bytes @ 0xB
   792  002B                     	ds	1
   793  002C                     main@ucDate:	
   794                           
   795                           ; 1 bytes @ 0xC
   796  002C                     	ds	1
   797  002D                     main@ucMonth:	
   798                           
   799                           ; 1 bytes @ 0xD
   800  002D                     	ds	1
   801  002E                     main@ucSec:	
   802                           
   803                           ; 1 bytes @ 0xE
   804  002E                     	ds	1
   805  002F                     main@ui8SetValue:	
   806                           
   807                           ; 1 bytes @ 0xF
   808  002F                     	ds	1
   809  0030                     main@ui8SetMode:	
   810                           
   811                           ; 1 bytes @ 0x10
   812  0030                     	ds	1
   813  0031                     main@rtc:	
   814                           
   815                           ; 7 bytes @ 0x11
   816  0031                     	ds	7
   817                           
   818                           	psect	maintext
   819  060D                     __pmaintext:	
   820 ;;
   821 ;;Main: autosize = 0, tempsize = 6, incstack = 0, save=0
   822 ;;
   823 ;; *************** function _main *****************
   824 ;; Defined at:
   825 ;;		line 23 in file "main.c"
   826 ;; Parameters:    Size  Location     Type
   827 ;;		None
   828 ;; Auto vars:     Size  Location     Type
   829 ;;  rtc             7   17[BANK0 ] struct .
   830 ;;  ui8SetMode      1   16[BANK0 ] unsigned char 
   831 ;;  ui8SetValue     1   15[BANK0 ] unsigned char 
   832 ;;  ucSec           1   14[BANK0 ] unsigned char 
   833 ;;  ucMonth         1   13[BANK0 ] unsigned char 
   834 ;;  ucDate          1   12[BANK0 ] unsigned char 
   835 ;;  ucHours         1   11[BANK0 ] unsigned char 
   836 ;;  ucMin           1   10[BANK0 ] unsigned char 
   837 ;;  ucYear          1    9[BANK0 ] unsigned char 
   838 ;; Return value:  Size  Location     Type
   839 ;;                  2   42[None  ] int 
   840 ;; Registers used:
   841 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   842 ;; Tracked objects:
   843 ;;		On entry : B00/0
   844 ;;		On exit  : 0/0
   845 ;;		Unchanged: 0/0
   846 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   847 ;;      Params:         0       0       0       0       0
   848 ;;      Locals:         0      15       0       0       0
   849 ;;      Temps:          0       6       0       0       0
   850 ;;      Totals:         0      21       0       0       0
   851 ;;Total ram usage:       21 bytes
   852 ;; Hardware stack levels required when called:    3
   853 ;; This function calls:
   854 ;;		_DELAY_ms
   855 ;;		_RTC_GetDateTime
   856 ;;		_RTC_Init
   857 ;;		_RTC_SetDateTime
   858 ;;		___awdiv
   859 ;;		___awmod
   860 ;;		_ui8Dec2HexDisplay
   861 ;;		_ui8Hex2DECDisplay
   862 ;;		_vDisplay
   863 ;; This function is called by:
   864 ;;		Startup code after reset
   865 ;; This function uses a non-reentrant model
   866 ;;
   867                           
   868                           
   869                           ;psect for function _main
   870  060D                     _main:	
   871                           
   872                           ;main.c: 27: TRISCbits.TRISC5 = 0;
   873                           
   874                           ;incstack = 0
   875                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   876  060D  1683               	bsf	3,5	;RP0=1, select bank1
   877  060E  1303               	bcf	3,6	;RP1=0, select bank1
   878  060F  1287               	bcf	7,5	;volatile
   879                           
   880                           ;main.c: 28: TRISCbits.TRISC6 = 0;
   881  0610  1307               	bcf	7,6	;volatile
   882                           
   883                           ;main.c: 29: TRISCbits.TRISC7 = 0;
   884  0611  1387               	bcf	7,7	;volatile
   885                           
   886                           ;main.c: 31: TRISD = 0x00;
   887  0612  0188               	clrf	8	;volatile
   888                           
   889                           ;main.c: 33: TRISBbits.TRISB0 = 1;
   890  0613  1406               	bsf	6,0	;volatile
   891                           
   892                           ;main.c: 34: TRISBbits.TRISB1 = 1;
   893  0614  1486               	bsf	6,1	;volatile
   894                           
   895                           ;main.c: 35: TRISBbits.TRISB2 = 0;
   896  0615  1106               	bcf	6,2	;volatile
   897                           
   898                           ;main.c: 36: TRISBbits.TRISB3 = 0;
   899  0616  1186               	bcf	6,3	;volatile
   900                           
   901                           ;main.c: 37: TRISBbits.TRISB4 = 0;
   902  0617  1206               	bcf	6,4	;volatile
   903                           
   904                           ;main.c: 38: TRISBbits.TRISB5 = 0;
   905  0618  1286               	bcf	6,5	;volatile
   906                           
   907                           ;main.c: 40: TRISBbits.TRISB7 = 0;
   908  0619  1386               	bcf	6,7	;volatile
   909                           
   910                           ;main.c: 42: TRISEbits.TRISE0 = 0;
   911  061A  1009               	bcf	9,0	;volatile
   912                           
   913                           ;main.c: 44: WPUBbits.WPUB0 = 1;
   914  061B  1415               	bsf	21,0	;volatile
   915                           
   916                           ;main.c: 45: WPUBbits.WPUB1 = 1;
   917  061C  1495               	bsf	21,1	;volatile
   918                           
   919                           ;main.c: 46: WPUBbits.WPUB2 = 1;
   920  061D  1515               	bsf	21,2	;volatile
   921                           
   922                           ;main.c: 47: OPTION_REGbits.nRBPU = 0;
   923  061E  1381               	bcf	1,7	;volatile
   924                           
   925                           ;main.c: 49: ANSELHbits.ANS12 = 0;
   926  061F  1683               	bsf	3,5	;RP0=1, select bank3
   927  0620  1703               	bsf	3,6	;RP1=1, select bank3
   928  0621  1209               	bcf	9,4	;volatile
   929                           
   930                           ;main.c: 50: ANSELHbits.ANS10 = 0;
   931  0622  1109               	bcf	9,2	;volatile
   932                           
   933                           ;main.c: 51: ANSELHbits.ANS13 = 0;
   934  0623  1289               	bcf	9,5	;volatile
   935                           
   936                           ;main.c: 52: ANSELHbits.ANS11 = 0;
   937  0624  1189               	bcf	9,3	;volatile
   938                           
   939                           ;main.c: 53: ANSELHbits.ANS9 = 0;
   940  0625  1089               	bcf	9,1	;volatile
   941                           
   942                           ;main.c: 54: ANSELHbits.ANS8 = 0;
   943  0626  1009               	bcf	9,0	;volatile
   944                           
   945                           ;main.c: 55: ANSELbits.ANS5 = 0;
   946  0627  1288               	bcf	8,5	;volatile
   947                           
   948                           ;main.c: 57: IOCB = 0x00;
   949  0628  1683               	bsf	3,5	;RP0=1, select bank1
   950  0629  1303               	bcf	3,6	;RP1=0, select bank1
   951  062A  0196               	clrf	22	;volatile
   952                           
   953                           ;main.c: 59: PORTB = 0xFF;
   954  062B  30FF               	movlw	255
   955  062C  1283               	bcf	3,5	;RP0=0, select bank0
   956  062D  1303               	bcf	3,6	;RP1=0, select bank0
   957  062E  0086               	movwf	6	;volatile
   958                           
   959                           ;main.c: 62: uint8_t ucSec;
   960                           ;main.c: 63: uint8_t ucMin;
   961                           ;main.c: 64: uint8_t ucHours;
   962                           ;main.c: 65: uint8_t ucDate;
   963                           ;main.c: 66: uint8_t ucMonth;
   964                           ;main.c: 67: uint8_t ucYear;
   965                           ;main.c: 69: uint8_t ui8SetMode;
   966                           ;main.c: 70: uint8_t ui8SetValue;
   967                           ;main.c: 72: rtc_t rtc;
   968                           ;main.c: 76: ucSec = 0;
   969  062F  01AE               	clrf	main@ucSec
   970                           
   971                           ;main.c: 77: ucMin = 0;
   972  0630  01AA               	clrf	main@ucMin
   973                           
   974                           ;main.c: 78: ucHours = 0;
   975  0631  01AB               	clrf	main@ucHours
   976                           
   977                           ;main.c: 79: ucDate = 0;
   978  0632  01AC               	clrf	main@ucDate
   979                           
   980                           ;main.c: 80: ucMonth = 0;
   981  0633  01AD               	clrf	main@ucMonth
   982                           
   983                           ;main.c: 81: ucYear = 0;
   984  0634  01A9               	clrf	main@ucYear
   985                           
   986                           ;main.c: 83: ui8SetMode = 0;
   987  0635  01B0               	clrf	main@ui8SetMode
   988                           
   989                           ;main.c: 84: ui8SetValue = 0;
   990  0636  01AF               	clrf	main@ui8SetValue
   991                           
   992                           ;main.c: 87: RTC_Init();
   993  0637  120A  118A  23D2  120A  118A  	fcall	_RTC_Init
   994                           
   995                           ;main.c: 91: rtc.hour = 0x00;
   996  063C  1283               	bcf	3,5	;RP0=0, select bank0
   997  063D  1303               	bcf	3,6	;RP1=0, select bank0
   998  063E  01B3               	clrf	main@rtc+2
   999                           
  1000                           ;main.c: 92: rtc.min = 0x08;
  1001  063F  3008               	movlw	8
  1002  0640  00A3               	movwf	??_main
  1003  0641  0823               	movf	??_main,w
  1004  0642  00B2               	movwf	main@rtc+1
  1005                           
  1006                           ;main.c: 93: rtc.sec = 0x30;
  1007  0643  3030               	movlw	48
  1008  0644  00A3               	movwf	??_main
  1009  0645  0823               	movf	??_main,w
  1010  0646  00B1               	movwf	main@rtc
  1011                           
  1012                           ;main.c: 95: rtc.date = 0x31;
  1013  0647  3031               	movlw	49
  1014  0648  00A3               	movwf	??_main
  1015  0649  0823               	movf	??_main,w
  1016  064A  00B5               	movwf	main@rtc+4
  1017                           
  1018                           ;main.c: 96: rtc.month = 0x12;
  1019  064B  3012               	movlw	18
  1020  064C  00A3               	movwf	??_main
  1021  064D  0823               	movf	??_main,w
  1022  064E  00B6               	movwf	main@rtc+5
  1023                           
  1024                           ;main.c: 97: rtc.year = 0x16;
  1025  064F  3016               	movlw	22
  1026  0650  00A3               	movwf	??_main
  1027  0651  0823               	movf	??_main,w
  1028  0652  00B7               	movwf	main@rtc+6
  1029                           
  1030                           ;main.c: 98: rtc.weekDay = 5;
  1031  0653  3005               	movlw	5
  1032  0654  00A3               	movwf	??_main
  1033  0655  0823               	movf	??_main,w
  1034  0656  00B4               	movwf	main@rtc+3
  1035                           
  1036                           ;main.c: 151: switch(ui8SetMode)
  1037  0657  2F53               	goto	l1541
  1038  0658                     l1583:	
  1039                           ;main.c: 152: {
  1040                           ;main.c: 153: case 1:
  1041                           
  1042                           
  1043                           ;main.c: 154: {
  1044                           ;main.c: 155: if(ui8SetValue == 1)
  1045  0658  032F               	decf	main@ui8SetValue,w
  1046  0659  1D03               	btfss	3,2
  1047  065A  2E64               	goto	l1593
  1048                           
  1049                           ;main.c: 156: {
  1050                           ;main.c: 157: ui8SetValue = 0;
  1051  065B  01AF               	clrf	main@ui8SetValue
  1052                           
  1053                           ;main.c: 158: ucSec = 56;
  1054  065C  3038               	movlw	56
  1055  065D  00A3               	movwf	??_main
  1056  065E  0823               	movf	??_main,w
  1057  065F  00AE               	movwf	main@ucSec
  1058                           
  1059                           ;main.c: 159: if(ucSec >= 60)
  1060  0660  303C               	movlw	60
  1061  0661  022E               	subwf	main@ucSec,w
  1062  0662  1803               	btfsc	3,0
  1063                           
  1064                           ;main.c: 160: {
  1065                           ;main.c: 161: ucSec = 0;
  1066  0663  01AE               	clrf	main@ucSec
  1067  0664                     l1593:	
  1068                           
  1069                           ;main.c: 162: }
  1070                           ;main.c: 163: }
  1071                           ;main.c: 166: vDisplay(0x6E,0,ucSec/10, ucSec%10);
  1072  0664  01F9               	clrf	vDisplay@ui8Second
  1073  0665  300A               	movlw	10
  1074  0666  00F0               	movwf	___awdiv@divisor
  1075  0667  3000               	movlw	0
  1076  0668  00F1               	movwf	___awdiv@divisor+1
  1077  0669  082E               	movf	main@ucSec,w
  1078  066A  00A3               	movwf	??_main
  1079  066B  01A4               	clrf	??_main+1
  1080  066C  0823               	movf	??_main,w
  1081  066D  00F2               	movwf	___awdiv@dividend
  1082  066E  0824               	movf	??_main+1,w
  1083  066F  00F3               	movwf	___awdiv@dividend+1
  1084  0670  120A  118A  2477  120A  118A  	fcall	___awdiv
  1085  0675  0870               	movf	?___awdiv,w
  1086  0676  1283               	bcf	3,5	;RP0=0, select bank0
  1087  0677  1303               	bcf	3,6	;RP1=0, select bank0
  1088  0678  00A5               	movwf	??_main+2
  1089  0679  0825               	movf	??_main+2,w
  1090  067A  00FA               	movwf	vDisplay@ui8Thrd
  1091  067B  300A               	movlw	10
  1092  067C  00F0               	movwf	___awmod@divisor
  1093  067D  3000               	movlw	0
  1094  067E  00F1               	movwf	___awmod@divisor+1
  1095  067F  082E               	movf	main@ucSec,w
  1096  0680  00A6               	movwf	??_main+3
  1097  0681  01A7               	clrf	??_main+4
  1098  0682  0826               	movf	??_main+3,w
  1099  0683  00F2               	movwf	___awmod@dividend
  1100  0684  0827               	movf	??_main+4,w
  1101  0685  00F3               	movwf	___awmod@dividend+1
  1102  0686  120A  118A  242C  120A  118A  	fcall	___awmod
  1103  068B  0870               	movf	?___awmod,w
  1104  068C  1283               	bcf	3,5	;RP0=0, select bank0
  1105  068D  1303               	bcf	3,6	;RP1=0, select bank0
  1106  068E  00A8               	movwf	??_main+5
  1107  068F  0828               	movf	??_main+5,w
  1108  0690  00FB               	movwf	vDisplay@ui8Fourth
  1109  0691  306E               	movlw	110
  1110  0692  2F4E               	goto	L1
  1111  0693                     l1595:	
  1112                           ;main.c: 169: }
  1113                           ;main.c: 170: case 2:
  1114                           
  1115                           ;main.c: 168: break;
  1116                           
  1117                           
  1118                           ;main.c: 171: {
  1119                           ;main.c: 172: if(ui8SetValue == 1)
  1120  0693  1283               	bcf	3,5	;RP0=0, select bank0
  1121  0694  1303               	bcf	3,6	;RP1=0, select bank0
  1122  0695  032F               	decf	main@ui8SetValue,w
  1123  0696  1D03               	btfss	3,2
  1124  0697  2ED9               	goto	l1651
  1125                           
  1126                           ;main.c: 173: {
  1127                           ;main.c: 174: ui8SetValue = 0;
  1128  0698  01AF               	clrf	main@ui8SetValue
  1129                           
  1130                           ;main.c: 175: ucMin++;
  1131  0699  3001               	movlw	1
  1132  069A  00A3               	movwf	??_main
  1133  069B  0823               	movf	??_main,w
  1134  069C  07AA               	addwf	main@ucMin,f
  1135                           
  1136                           ;main.c: 176: if(ucMin >=60)
  1137  069D  303C               	movlw	60
  1138  069E  022A               	subwf	main@ucMin,w
  1139  069F  1803               	btfsc	3,0
  1140                           
  1141                           ;main.c: 177: {
  1142                           ;main.c: 178: ucMin = 0;
  1143  06A0  01AA               	clrf	main@ucMin
  1144  06A1  2ED9               	goto	l1651
  1145  06A2                     l1607:	
  1146                           ;main.c: 183: }
  1147                           ;main.c: 184: case 3:
  1148                           
  1149                           ;main.c: 182: break;
  1150                           
  1151                           ;main.c: 179: }
  1152                           ;main.c: 180: }
  1153                           ;main.c: 181: vDisplay(0,0,0,ui8SetMode);
  1154                           
  1155                           
  1156                           ;main.c: 185: {
  1157                           ;main.c: 186: if(ui8SetValue == 1)
  1158  06A2  1283               	bcf	3,5	;RP0=0, select bank0
  1159  06A3  1303               	bcf	3,6	;RP1=0, select bank0
  1160  06A4  032F               	decf	main@ui8SetValue,w
  1161  06A5  1D03               	btfss	3,2
  1162  06A6  2ED9               	goto	l1651
  1163                           
  1164                           ;main.c: 187: {
  1165                           ;main.c: 188: ui8SetValue = 0;
  1166  06A7  01AF               	clrf	main@ui8SetValue
  1167                           
  1168                           ;main.c: 189: ucHours++;
  1169  06A8  3001               	movlw	1
  1170  06A9  00A3               	movwf	??_main
  1171  06AA  0823               	movf	??_main,w
  1172  06AB  07AB               	addwf	main@ucHours,f
  1173                           
  1174                           ;main.c: 190: if(ucHours >=13)
  1175  06AC  300D               	movlw	13
  1176  06AD  022B               	subwf	main@ucHours,w
  1177  06AE  1803               	btfsc	3,0
  1178                           
  1179                           ;main.c: 191: {
  1180                           ;main.c: 192: ucHours = 0;
  1181  06AF  01AB               	clrf	main@ucHours
  1182  06B0  2ED9               	goto	l1651
  1183  06B1                     l1619:	
  1184                           ;main.c: 197: }
  1185                           ;main.c: 198: case 4:
  1186                           
  1187                           ;main.c: 196: break;
  1188                           
  1189                           ;main.c: 193: }
  1190                           ;main.c: 194: }
  1191                           ;main.c: 195: vDisplay(0,0,0,ui8SetMode);
  1192                           
  1193                           
  1194                           ;main.c: 199: {
  1195                           ;main.c: 200: if(ui8SetValue == 1)
  1196  06B1  1283               	bcf	3,5	;RP0=0, select bank0
  1197  06B2  1303               	bcf	3,6	;RP1=0, select bank0
  1198  06B3  032F               	decf	main@ui8SetValue,w
  1199  06B4  1D03               	btfss	3,2
  1200  06B5  2ED9               	goto	l1651
  1201                           
  1202                           ;main.c: 201: {
  1203                           ;main.c: 202: ui8SetValue = 0;
  1204  06B6  01AF               	clrf	main@ui8SetValue
  1205                           
  1206                           ;main.c: 203: ucDate++;
  1207  06B7  3001               	movlw	1
  1208  06B8  00A3               	movwf	??_main
  1209  06B9  0823               	movf	??_main,w
  1210  06BA  07AC               	addwf	main@ucDate,f
  1211                           
  1212                           ;main.c: 204: if(ucDate >=31)
  1213  06BB  301F               	movlw	31
  1214  06BC  022C               	subwf	main@ucDate,w
  1215  06BD  1803               	btfsc	3,0
  1216                           
  1217                           ;main.c: 205: {
  1218                           ;main.c: 206: ucDate = 0;
  1219  06BE  01AC               	clrf	main@ucDate
  1220  06BF  2ED9               	goto	l1651
  1221  06C0                     l1631:	
  1222                           ;main.c: 211: }
  1223                           ;main.c: 212: case 5:
  1224                           
  1225                           ;main.c: 210: break;
  1226                           
  1227                           ;main.c: 207: }
  1228                           ;main.c: 208: }
  1229                           ;main.c: 209: vDisplay(0,0,0,ui8SetMode);
  1230                           
  1231                           
  1232                           ;main.c: 213: {
  1233                           ;main.c: 214: if(ui8SetValue == 1)
  1234  06C0  1283               	bcf	3,5	;RP0=0, select bank0
  1235  06C1  1303               	bcf	3,6	;RP1=0, select bank0
  1236  06C2  032F               	decf	main@ui8SetValue,w
  1237  06C3  1D03               	btfss	3,2
  1238  06C4  2ED9               	goto	l1651
  1239                           
  1240                           ;main.c: 215: {
  1241                           ;main.c: 216: ui8SetValue = 0;
  1242  06C5  01AF               	clrf	main@ui8SetValue
  1243                           
  1244                           ;main.c: 217: ucMonth++;
  1245  06C6  3001               	movlw	1
  1246  06C7  00A3               	movwf	??_main
  1247  06C8  0823               	movf	??_main,w
  1248  06C9  07AD               	addwf	main@ucMonth,f
  1249                           
  1250                           ;main.c: 218: if(ucMonth >=13)
  1251  06CA  300D               	movlw	13
  1252  06CB  022D               	subwf	main@ucMonth,w
  1253  06CC  1803               	btfsc	3,0
  1254                           
  1255                           ;main.c: 219: {
  1256                           ;main.c: 220: ucMonth = 0;
  1257  06CD  01AD               	clrf	main@ucMonth
  1258  06CE  2ED9               	goto	l1651
  1259  06CF                     l1643:	
  1260                           ;main.c: 225: }
  1261                           ;main.c: 226: case 6:
  1262                           
  1263                           ;main.c: 224: break;
  1264                           
  1265                           ;main.c: 221: }
  1266                           ;main.c: 222: }
  1267                           ;main.c: 223: vDisplay(0,0,0,ui8SetMode);
  1268                           
  1269                           
  1270                           ;main.c: 227: {
  1271                           ;main.c: 228: if(ui8SetValue == 1)
  1272  06CF  1283               	bcf	3,5	;RP0=0, select bank0
  1273  06D0  1303               	bcf	3,6	;RP1=0, select bank0
  1274  06D1  032F               	decf	main@ui8SetValue,w
  1275  06D2  1D03               	btfss	3,2
  1276  06D3  2ED9               	goto	l1651
  1277                           
  1278                           ;main.c: 229: {
  1279                           ;main.c: 230: ui8SetValue = 0;
  1280  06D4  01AF               	clrf	main@ui8SetValue
  1281                           
  1282                           ;main.c: 231: ucYear++;
  1283  06D5  3001               	movlw	1
  1284  06D6  00A3               	movwf	??_main
  1285  06D7  0823               	movf	??_main,w
  1286  06D8  07A9               	addwf	main@ucYear,f
  1287  06D9                     l1651:	
  1288                           ;main.c: 233: {
  1289                           ;main.c: 234: ucYear = 0;
  1290                           
  1291                           ;main.c: 232: if(ucYear >= 2099)
  1292                           
  1293                           
  1294                           ;main.c: 235: }
  1295                           ;main.c: 236: }
  1296                           ;main.c: 237: vDisplay(0,0,0,ui8SetMode);
  1297  06D9  01F9               	clrf	vDisplay@ui8Second
  1298  06DA  01FA               	clrf	vDisplay@ui8Thrd
  1299  06DB  2EE0               	goto	L2
  1300  06DC                     l1653:	
  1301                           ;main.c: 239: }
  1302                           ;main.c: 240: case 7:
  1303                           
  1304                           ;main.c: 238: break;
  1305                           
  1306                           
  1307                           ;main.c: 241: {
  1308                           ;main.c: 242: vDisplay(0,0,0,ui8SetMode);
  1309  06DC  01F9               	clrf	vDisplay@ui8Second
  1310  06DD  01FA               	clrf	vDisplay@ui8Thrd
  1311  06DE  1283               	bcf	3,5	;RP0=0, select bank0
  1312  06DF  1303               	bcf	3,6	;RP1=0, select bank0
  1313  06E0                     L2:	
  1314  06E0  0830               	movf	main@ui8SetMode,w
  1315  06E1  00A3               	movwf	??_main
  1316  06E2  0823               	movf	??_main,w
  1317  06E3  00FB               	movwf	vDisplay@ui8Fourth
  1318  06E4  3000               	movlw	0
  1319  06E5  2F4E               	goto	L1
  1320  06E6                     l1655:	
  1321                           ;main.c: 245: }
  1322                           ;main.c: 246: case 8:
  1323                           
  1324                           ;main.c: 243: break;
  1325                           
  1326                           
  1327                           ;main.c: 247: {
  1328                           ;main.c: 249: rtc.sec = ui8Dec2HexDisplay(ucSec);
  1329  06E6  1283               	bcf	3,5	;RP0=0, select bank0
  1330  06E7  1303               	bcf	3,6	;RP1=0, select bank0
  1331  06E8  082E               	movf	main@ucSec,w
  1332  06E9  120A  118A  23F2  120A  118A  	fcall	_ui8Dec2HexDisplay
  1333  06EE  1283               	bcf	3,5	;RP0=0, select bank0
  1334  06EF  1303               	bcf	3,6	;RP1=0, select bank0
  1335  06F0  00A3               	movwf	??_main
  1336  06F1  0823               	movf	??_main,w
  1337  06F2  00B1               	movwf	main@rtc
  1338                           
  1339                           ;main.c: 250: rtc.min = ui8Dec2HexDisplay(ucMin);
  1340  06F3  082A               	movf	main@ucMin,w
  1341  06F4  120A  118A  23F2  120A  118A  	fcall	_ui8Dec2HexDisplay
  1342  06F9  1283               	bcf	3,5	;RP0=0, select bank0
  1343  06FA  1303               	bcf	3,6	;RP1=0, select bank0
  1344  06FB  00A3               	movwf	??_main
  1345  06FC  0823               	movf	??_main,w
  1346  06FD  00B2               	movwf	main@rtc+1
  1347                           
  1348                           ;main.c: 251: rtc.hour = ui8Dec2HexDisplay(ucHours);
  1349  06FE  082B               	movf	main@ucHours,w
  1350  06FF  120A  118A  23F2  120A  118A  	fcall	_ui8Dec2HexDisplay
  1351  0704  1283               	bcf	3,5	;RP0=0, select bank0
  1352  0705  1303               	bcf	3,6	;RP1=0, select bank0
  1353  0706  00A3               	movwf	??_main
  1354  0707  0823               	movf	??_main,w
  1355  0708  00B3               	movwf	main@rtc+2
  1356                           
  1357                           ;main.c: 252: rtc.date = ui8Dec2HexDisplay(ucDate);
  1358  0709  082C               	movf	main@ucDate,w
  1359  070A  120A  118A  23F2  120A  118A  	fcall	_ui8Dec2HexDisplay
  1360  070F  1283               	bcf	3,5	;RP0=0, select bank0
  1361  0710  1303               	bcf	3,6	;RP1=0, select bank0
  1362  0711  00A3               	movwf	??_main
  1363  0712  0823               	movf	??_main,w
  1364  0713  00B5               	movwf	main@rtc+4
  1365                           
  1366                           ;main.c: 253: rtc.month = ui8Dec2HexDisplay(ucMonth);
  1367  0714  082D               	movf	main@ucMonth,w
  1368  0715  120A  118A  23F2  120A  118A  	fcall	_ui8Dec2HexDisplay
  1369  071A  1283               	bcf	3,5	;RP0=0, select bank0
  1370  071B  1303               	bcf	3,6	;RP1=0, select bank0
  1371  071C  00A3               	movwf	??_main
  1372  071D  0823               	movf	??_main,w
  1373  071E  00B6               	movwf	main@rtc+5
  1374                           
  1375                           ;main.c: 254: rtc.year = ui8Dec2HexDisplay(ucYear);
  1376  071F  0829               	movf	main@ucYear,w
  1377  0720  120A  118A  23F2  120A  118A  	fcall	_ui8Dec2HexDisplay
  1378  0725  1283               	bcf	3,5	;RP0=0, select bank0
  1379  0726  1303               	bcf	3,6	;RP1=0, select bank0
  1380  0727  00A3               	movwf	??_main
  1381  0728  0823               	movf	??_main,w
  1382  0729  00B7               	movwf	main@rtc+6
  1383                           
  1384                           ;main.c: 257: RTC_SetDateTime(&rtc);
  1385  072A  3031               	movlw	(low (main@rtc| 0))& (0+255)
  1386  072B  120A  118A  24D0  120A  118A  	fcall	_RTC_SetDateTime
  1387                           
  1388                           ;main.c: 258: ui8SetMode = 0;
  1389  0730  1283               	bcf	3,5	;RP0=0, select bank0
  1390  0731  1303               	bcf	3,6	;RP1=0, select bank0
  1391  0732  01B0               	clrf	main@ui8SetMode
  1392                           
  1393                           ;main.c: 260: vDisplay(1,2,3,4);
  1394  0733  3002               	movlw	2
  1395  0734  00A3               	movwf	??_main
  1396  0735  0823               	movf	??_main,w
  1397  0736  00F9               	movwf	vDisplay@ui8Second
  1398  0737  3003               	movlw	3
  1399  0738  00A4               	movwf	??_main+1
  1400  0739  0824               	movf	??_main+1,w
  1401  073A  00FA               	movwf	vDisplay@ui8Thrd
  1402  073B  3004               	movlw	4
  1403  073C  00A5               	movwf	??_main+2
  1404  073D  0825               	movf	??_main+2,w
  1405  073E  00FB               	movwf	vDisplay@ui8Fourth
  1406  073F  3001               	movlw	1
  1407  0740  2F4E               	goto	L1
  1408  0741                     l1663:	
  1409                           ;main.c: 262: }
  1410                           ;main.c: 263: default:
  1411                           
  1412                           ;main.c: 261: break;
  1413                           
  1414                           
  1415                           ;main.c: 264: {
  1416                           ;main.c: 265: vDisplay(((0x25 & 0xF0) >> 4), (0x25 & 0x0F),((0x17 & 0xF0) >> 4), (0x17 &
      +                           0x0F));
  1417  0741  3005               	movlw	5
  1418  0742  1283               	bcf	3,5	;RP0=0, select bank0
  1419  0743  1303               	bcf	3,6	;RP1=0, select bank0
  1420  0744  00A3               	movwf	??_main
  1421  0745  0823               	movf	??_main,w
  1422  0746  00F9               	movwf	vDisplay@ui8Second
  1423  0747  01FA               	clrf	vDisplay@ui8Thrd
  1424  0748  0AFA               	incf	vDisplay@ui8Thrd,f
  1425  0749  3007               	movlw	7
  1426  074A  00A4               	movwf	??_main+1
  1427  074B  0824               	movf	??_main+1,w
  1428  074C  00FB               	movwf	vDisplay@ui8Fourth
  1429  074D  3002               	movlw	2
  1430  074E                     L1:	
  1431  074E  120A  118A  252A  120A  118A  	fcall	_vDisplay
  1432  0753                     l1541:	
  1433                           ;main.c: 106: while(1)
  1434                           
  1435                           ;main.c: 267: }
  1436                           ;main.c: 268: }
  1437                           
  1438                           ;main.c: 266: break;
  1439                           
  1440                           
  1441                           ;main.c: 107: {
  1442                           ;main.c: 110: if(PORTBbits.RB1 == 0)
  1443  0753  1283               	bcf	3,5	;RP0=0, select bank0
  1444  0754  1303               	bcf	3,6	;RP1=0, select bank0
  1445  0755  1886               	btfsc	6,1	;volatile
  1446  0756  2F68               	goto	l1549
  1447                           
  1448                           ;main.c: 111: {
  1449                           ;main.c: 112: DELAY_ms(100);
  1450  0757  3064               	movlw	100
  1451  0758  00F2               	movwf	DELAY_ms@ms_count
  1452  0759  3000               	movlw	0
  1453  075A  00F3               	movwf	DELAY_ms@ms_count+1
  1454  075B  120A  118A  2388  120A  118A  	fcall	_DELAY_ms
  1455                           
  1456                           ;main.c: 113: if(PORTBbits.RB1 == 0)
  1457  0760  1283               	bcf	3,5	;RP0=0, select bank0
  1458  0761  1303               	bcf	3,6	;RP1=0, select bank0
  1459  0762  1886               	btfsc	6,1	;volatile
  1460  0763  2F68               	goto	l1549
  1461                           
  1462                           ;main.c: 114: {
  1463                           ;main.c: 115: ui8SetMode++;
  1464  0764  3001               	movlw	1
  1465  0765  00A3               	movwf	??_main
  1466  0766  0823               	movf	??_main,w
  1467  0767  07B0               	addwf	main@ui8SetMode,f
  1468  0768                     l1549:	
  1469                           
  1470                           ;main.c: 116: }
  1471                           ;main.c: 118: }
  1472                           ;main.c: 120: if(PORTBbits.RB1 == 0)
  1473  0768  1886               	btfsc	6,1	;volatile
  1474  0769  2F7F               	goto	l1561
  1475                           
  1476                           ;main.c: 121: {
  1477                           ;main.c: 122: DELAY_ms(100);
  1478  076A  3064               	movlw	100
  1479  076B  00F2               	movwf	DELAY_ms@ms_count
  1480  076C  3000               	movlw	0
  1481  076D  00F3               	movwf	DELAY_ms@ms_count+1
  1482  076E  120A  118A  2388  120A  118A  	fcall	_DELAY_ms
  1483                           
  1484                           ;main.c: 123: if(PORTBbits.RB1 == 0)
  1485  0773  1283               	bcf	3,5	;RP0=0, select bank0
  1486  0774  1303               	bcf	3,6	;RP1=0, select bank0
  1487  0775  1886               	btfsc	6,1	;volatile
  1488  0776  2F7F               	goto	l1561
  1489                           
  1490                           ;main.c: 124: {
  1491                           ;main.c: 125: ui8SetMode++;
  1492  0777  3001               	movlw	1
  1493  0778  00A3               	movwf	??_main
  1494  0779  0823               	movf	??_main,w
  1495  077A  07B0               	addwf	main@ui8SetMode,f
  1496                           
  1497                           ;main.c: 126: if(ui8SetMode > 8)
  1498  077B  3009               	movlw	9
  1499  077C  0230               	subwf	main@ui8SetMode,w
  1500  077D  1803               	btfsc	3,0
  1501                           
  1502                           ;main.c: 127: {
  1503                           ;main.c: 128: ui8SetMode = 0;
  1504  077E  01B0               	clrf	main@ui8SetMode
  1505  077F                     l1561:	
  1506                           
  1507                           ;main.c: 129: }
  1508                           ;main.c: 130: }
  1509                           ;main.c: 132: }
  1510                           ;main.c: 133: if(PORTBbits.RB0 == 0)
  1511  077F  1806               	btfsc	6,0	;volatile
  1512  0780  2F90               	goto	l1569
  1513                           
  1514                           ;main.c: 134: {
  1515                           ;main.c: 135: DELAY_ms(100);
  1516  0781  3064               	movlw	100
  1517  0782  00F2               	movwf	DELAY_ms@ms_count
  1518  0783  3000               	movlw	0
  1519  0784  00F3               	movwf	DELAY_ms@ms_count+1
  1520  0785  120A  118A  2388  120A  118A  	fcall	_DELAY_ms
  1521                           
  1522                           ;main.c: 136: if(PORTBbits.RB0 == 0)
  1523  078A  1283               	bcf	3,5	;RP0=0, select bank0
  1524  078B  1303               	bcf	3,6	;RP1=0, select bank0
  1525  078C  1806               	btfsc	6,0	;volatile
  1526  078D  2F90               	goto	l1569
  1527                           
  1528                           ;main.c: 137: {
  1529                           ;main.c: 138: ui8SetValue = 1;
  1530  078E  01AF               	clrf	main@ui8SetValue
  1531  078F  0AAF               	incf	main@ui8SetValue,f
  1532  0790                     l1569:	
  1533                           
  1534                           ;main.c: 139: }
  1535                           ;main.c: 140: }
  1536                           ;main.c: 142: RTC_GetDateTime(&rtc);
  1537  0790  3031               	movlw	(low (main@rtc| 0))& (0+255)
  1538  0791  120A  118A  258E  120A  118A  	fcall	_RTC_GetDateTime
  1539                           
  1540                           ;main.c: 143: ucSec = rtc.sec;
  1541  0796  1283               	bcf	3,5	;RP0=0, select bank0
  1542  0797  1303               	bcf	3,6	;RP1=0, select bank0
  1543  0798  0831               	movf	main@rtc,w
  1544  0799  00A3               	movwf	??_main
  1545  079A  0823               	movf	??_main,w
  1546  079B  00AE               	movwf	main@ucSec
  1547                           
  1548                           ;main.c: 144: ucMin = ui8Hex2DECDisplay(rtc.min);
  1549  079C  0832               	movf	main@rtc+1,w
  1550  079D  120A  118A  239C  120A  118A  	fcall	_ui8Hex2DECDisplay
  1551  07A2  1283               	bcf	3,5	;RP0=0, select bank0
  1552  07A3  1303               	bcf	3,6	;RP1=0, select bank0
  1553  07A4  00A3               	movwf	??_main
  1554  07A5  0823               	movf	??_main,w
  1555  07A6  00AA               	movwf	main@ucMin
  1556                           
  1557                           ;main.c: 145: ucHours = ui8Hex2DECDisplay(rtc.hour);
  1558  07A7  0833               	movf	main@rtc+2,w
  1559  07A8  120A  118A  239C  120A  118A  	fcall	_ui8Hex2DECDisplay
  1560  07AD  1283               	bcf	3,5	;RP0=0, select bank0
  1561  07AE  1303               	bcf	3,6	;RP1=0, select bank0
  1562  07AF  00A3               	movwf	??_main
  1563  07B0  0823               	movf	??_main,w
  1564  07B1  00AB               	movwf	main@ucHours
  1565                           
  1566                           ;main.c: 146: ucDate = ui8Hex2DECDisplay(rtc.date);
  1567  07B2  0835               	movf	main@rtc+4,w
  1568  07B3  120A  118A  239C  120A  118A  	fcall	_ui8Hex2DECDisplay
  1569  07B8  1283               	bcf	3,5	;RP0=0, select bank0
  1570  07B9  1303               	bcf	3,6	;RP1=0, select bank0
  1571  07BA  00A3               	movwf	??_main
  1572  07BB  0823               	movf	??_main,w
  1573  07BC  00AC               	movwf	main@ucDate
  1574                           
  1575                           ;main.c: 147: ucMonth = ui8Hex2DECDisplay(rtc.month);
  1576  07BD  0836               	movf	main@rtc+5,w
  1577  07BE  120A  118A  239C  120A  118A  	fcall	_ui8Hex2DECDisplay
  1578  07C3  1283               	bcf	3,5	;RP0=0, select bank0
  1579  07C4  1303               	bcf	3,6	;RP1=0, select bank0
  1580  07C5  00A3               	movwf	??_main
  1581  07C6  0823               	movf	??_main,w
  1582  07C7  00AD               	movwf	main@ucMonth
  1583                           
  1584                           ;main.c: 148: ucYear = ui8Hex2DECDisplay(rtc.year);
  1585  07C8  0837               	movf	main@rtc+6,w
  1586  07C9  120A  118A  239C  120A  118A  	fcall	_ui8Hex2DECDisplay
  1587  07CE  1283               	bcf	3,5	;RP0=0, select bank0
  1588  07CF  1303               	bcf	3,6	;RP1=0, select bank0
  1589  07D0  00A3               	movwf	??_main
  1590  07D1  0823               	movf	??_main,w
  1591  07D2  00A9               	movwf	main@ucYear
  1592  07D3  1283               	bcf	3,5	;RP0=0, select bank0
  1593  07D4  1303               	bcf	3,6	;RP1=0, select bank0
  1594  07D5  0830               	movf	main@ui8SetMode,w
  1595                           
  1596                           ; Switch size 1, requested type "space"
  1597                           ; Number of cases is 8, Range of values is 1 to 8
  1598                           ; switch strategies available:
  1599                           ; Name         Instructions Cycles
  1600                           ; simple_byte           25    13 (average)
  1601                           ; direct_byte           35    11 (fixed)
  1602                           ; jumptable            263     9 (fixed)
  1603                           ;	Chosen strategy is simple_byte
  1604  07D6  3A01               	xorlw	1	; case 1
  1605  07D7  1903               	skipnz
  1606  07D8  2E58               	goto	l1583
  1607  07D9  3A03               	xorlw	3	; case 2
  1608  07DA  1903               	skipnz
  1609  07DB  2E93               	goto	l1595
  1610  07DC  3A01               	xorlw	1	; case 3
  1611  07DD  1903               	skipnz
  1612  07DE  2EA2               	goto	l1607
  1613  07DF  3A07               	xorlw	7	; case 4
  1614  07E0  1903               	skipnz
  1615  07E1  2EB1               	goto	l1619
  1616  07E2  3A01               	xorlw	1	; case 5
  1617  07E3  1903               	skipnz
  1618  07E4  2EC0               	goto	l1631
  1619  07E5  3A03               	xorlw	3	; case 6
  1620  07E6  1903               	skipnz
  1621  07E7  2ECF               	goto	l1643
  1622  07E8  3A01               	xorlw	1	; case 7
  1623  07E9  1903               	skipnz
  1624  07EA  2EDC               	goto	l1653
  1625  07EB  3A0F               	xorlw	15	; case 8
  1626  07EC  1903               	skipnz
  1627  07ED  2EE6               	goto	l1655
  1628  07EE  2F41               	goto	l1663
  1629  07EF  2F53               	goto	l1541
  1630  07F0                     __end_of_main:	
  1631                           ;main.c: 269: }
  1632                           ;main.c: 271: return (0);
  1633                           ;	Return value of _main is never used
  1634                           
  1635                           
  1636                           	psect	text1
  1637  052A                     __ptext1:	
  1638 ;; *************** function _vDisplay *****************
  1639 ;; Defined at:
  1640 ;;		line 12 in file "display.c"
  1641 ;; Parameters:    Size  Location     Type
  1642 ;;  ui8First        1    wreg     unsigned char 
  1643 ;;  ui8Second       1    9[COMMON] unsigned char 
  1644 ;;  ui8Thrd         1   10[COMMON] unsigned char 
  1645 ;;  ui8Fourth       1   11[COMMON] unsigned char 
  1646 ;; Auto vars:     Size  Location     Type
  1647 ;;  ui8First        1   13[COMMON] unsigned char 
  1648 ;; Return value:  Size  Location     Type
  1649 ;;                  1    wreg      void 
  1650 ;; Registers used:
  1651 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1652 ;; Tracked objects:
  1653 ;;		On entry : 0/0
  1654 ;;		On exit  : 0/0
  1655 ;;		Unchanged: 0/0
  1656 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1657 ;;      Params:         3       0       0       0       0
  1658 ;;      Locals:         1       0       0       0       0
  1659 ;;      Temps:          1       0       0       0       0
  1660 ;;      Totals:         5       0       0       0       0
  1661 ;;Total ram usage:        5 bytes
  1662 ;; Hardware stack levels used:    1
  1663 ;; Hardware stack levels required when called:    2
  1664 ;; This function calls:
  1665 ;;		_DELAY_ms
  1666 ;; This function is called by:
  1667 ;;		_main
  1668 ;; This function uses a non-reentrant model
  1669 ;;
  1670                           
  1671                           
  1672                           ;psect for function _vDisplay
  1673  052A                     _vDisplay:	
  1674                           
  1675                           ;incstack = 0
  1676                           ; Regs used in _vDisplay: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1677                           ;vDisplay@ui8First stored from wreg
  1678  052A  00FD               	movwf	vDisplay@ui8First
  1679                           
  1680                           ;display.c: 14: PORTD = ucBCD_ARR[ui8Fourth];
  1681  052B  087B               	movf	vDisplay@ui8Fourth,w
  1682  052C  3E38               	addlw	(low (_ucBCD_ARR| 0))& (0+255)
  1683  052D  0084               	movwf	4
  1684  052E  1383               	bcf	3,7	;select IRP bank0
  1685  052F  0800               	movf	0,w
  1686  0530  1283               	bcf	3,5	;RP0=0, select bank0
  1687  0531  1303               	bcf	3,6	;RP1=0, select bank0
  1688  0532  0088               	movwf	8	;volatile
  1689                           
  1690                           ;display.c: 15: PORTB |= 0x3C;
  1691  0533  303C               	movlw	60
  1692  0534  00FC               	movwf	??_vDisplay
  1693  0535  087C               	movf	??_vDisplay,w
  1694  0536  0486               	iorwf	6,f	;volatile
  1695                           
  1696                           ;display.c: 16: PORTB &= 0xDF;
  1697  0537  30DF               	movlw	223
  1698  0538  00FC               	movwf	??_vDisplay
  1699  0539  087C               	movf	??_vDisplay,w
  1700  053A  0586               	andwf	6,f	;volatile
  1701                           
  1702                           ;display.c: 17: DELAY_ms(5);
  1703  053B  3005               	movlw	5
  1704  053C  00F2               	movwf	DELAY_ms@ms_count
  1705  053D  3000               	movlw	0
  1706  053E  00F3               	movwf	DELAY_ms@ms_count+1
  1707  053F  120A  118A  2388  120A  118A  	fcall	_DELAY_ms
  1708                           
  1709                           ;display.c: 19: PORTD = ucBCD_ARR[ui8Thrd];
  1710  0544  087A               	movf	vDisplay@ui8Thrd,w
  1711  0545  3E38               	addlw	(low (_ucBCD_ARR| 0))& (0+255)
  1712  0546  0084               	movwf	4
  1713  0547  1383               	bcf	3,7	;select IRP bank0
  1714  0548  0800               	movf	0,w
  1715  0549  1283               	bcf	3,5	;RP0=0, select bank0
  1716  054A  1303               	bcf	3,6	;RP1=0, select bank0
  1717  054B  0088               	movwf	8	;volatile
  1718                           
  1719                           ;display.c: 20: PORTB |= 0x3C;
  1720  054C  303C               	movlw	60
  1721  054D  00FC               	movwf	??_vDisplay
  1722  054E  087C               	movf	??_vDisplay,w
  1723  054F  0486               	iorwf	6,f	;volatile
  1724                           
  1725                           ;display.c: 21: PORTB &= 0xEF;
  1726  0550  30EF               	movlw	239
  1727  0551  00FC               	movwf	??_vDisplay
  1728  0552  087C               	movf	??_vDisplay,w
  1729  0553  0586               	andwf	6,f	;volatile
  1730                           
  1731                           ;display.c: 22: DELAY_ms(5);
  1732  0554  3005               	movlw	5
  1733  0555  00F2               	movwf	DELAY_ms@ms_count
  1734  0556  3000               	movlw	0
  1735  0557  00F3               	movwf	DELAY_ms@ms_count+1
  1736  0558  120A  118A  2388  120A  118A  	fcall	_DELAY_ms
  1737                           
  1738                           ;display.c: 24: PORTD = ucBCD_ARR[ui8Second];
  1739  055D  0879               	movf	vDisplay@ui8Second,w
  1740  055E  3E38               	addlw	(low (_ucBCD_ARR| 0))& (0+255)
  1741  055F  0084               	movwf	4
  1742  0560  1383               	bcf	3,7	;select IRP bank0
  1743  0561  0800               	movf	0,w
  1744  0562  1283               	bcf	3,5	;RP0=0, select bank0
  1745  0563  1303               	bcf	3,6	;RP1=0, select bank0
  1746  0564  0088               	movwf	8	;volatile
  1747                           
  1748                           ;display.c: 25: PORTB |= 0x3C;
  1749  0565  303C               	movlw	60
  1750  0566  00FC               	movwf	??_vDisplay
  1751  0567  087C               	movf	??_vDisplay,w
  1752  0568  0486               	iorwf	6,f	;volatile
  1753                           
  1754                           ;display.c: 26: PORTB &= 0xF7;
  1755  0569  30F7               	movlw	247
  1756  056A  00FC               	movwf	??_vDisplay
  1757  056B  087C               	movf	??_vDisplay,w
  1758  056C  0586               	andwf	6,f	;volatile
  1759                           
  1760                           ;display.c: 27: DELAY_ms(5);
  1761  056D  3005               	movlw	5
  1762  056E  00F2               	movwf	DELAY_ms@ms_count
  1763  056F  3000               	movlw	0
  1764  0570  00F3               	movwf	DELAY_ms@ms_count+1
  1765  0571  120A  118A  2388  120A  118A  	fcall	_DELAY_ms
  1766                           
  1767                           ;display.c: 29: PORTD = ucBCD_ARR[ui8First];
  1768  0576  087D               	movf	vDisplay@ui8First,w
  1769  0577  3E38               	addlw	(low (_ucBCD_ARR| 0))& (0+255)
  1770  0578  0084               	movwf	4
  1771  0579  1383               	bcf	3,7	;select IRP bank0
  1772  057A  0800               	movf	0,w
  1773  057B  1283               	bcf	3,5	;RP0=0, select bank0
  1774  057C  1303               	bcf	3,6	;RP1=0, select bank0
  1775  057D  0088               	movwf	8	;volatile
  1776                           
  1777                           ;display.c: 30: PORTB |= 0x3C;
  1778  057E  303C               	movlw	60
  1779  057F  00FC               	movwf	??_vDisplay
  1780  0580  087C               	movf	??_vDisplay,w
  1781  0581  0486               	iorwf	6,f	;volatile
  1782                           
  1783                           ;display.c: 31: PORTB &= 0xFB;
  1784  0582  30FB               	movlw	251
  1785  0583  00FC               	movwf	??_vDisplay
  1786  0584  087C               	movf	??_vDisplay,w
  1787  0585  0586               	andwf	6,f	;volatile
  1788                           
  1789                           ;display.c: 32: DELAY_ms(5);
  1790  0586  3005               	movlw	5
  1791  0587  00F2               	movwf	DELAY_ms@ms_count
  1792  0588  3000               	movlw	0
  1793  0589  00F3               	movwf	DELAY_ms@ms_count+1
  1794  058A  120A  118A  2388   	fcall	_DELAY_ms
  1795  058D  0008               	return
  1796  058E                     __end_of_vDisplay:	
  1797                           
  1798                           	psect	text2
  1799  0388                     __ptext2:	
  1800 ;; *************** function _DELAY_ms *****************
  1801 ;; Defined at:
  1802 ;;		line 75 in file "delay.c"
  1803 ;; Parameters:    Size  Location     Type
  1804 ;;  ms_count        2    2[COMMON] unsigned int 
  1805 ;; Auto vars:     Size  Location     Type
  1806 ;;		None
  1807 ;; Return value:  Size  Location     Type
  1808 ;;                  1    wreg      void 
  1809 ;; Registers used:
  1810 ;;		wreg, status,2, status,0, pclath, cstack
  1811 ;; Tracked objects:
  1812 ;;		On entry : 0/0
  1813 ;;		On exit  : 0/0
  1814 ;;		Unchanged: 0/0
  1815 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1816 ;;      Params:         2       0       0       0       0
  1817 ;;      Locals:         0       0       0       0       0
  1818 ;;      Temps:          0       0       0       0       0
  1819 ;;      Totals:         2       0       0       0       0
  1820 ;;Total ram usage:        2 bytes
  1821 ;; Hardware stack levels used:    1
  1822 ;; Hardware stack levels required when called:    1
  1823 ;; This function calls:
  1824 ;;		_DELAY_us
  1825 ;; This function is called by:
  1826 ;;		_main
  1827 ;;		_vDisplay
  1828 ;;		_DELAY_sec
  1829 ;; This function uses a non-reentrant model
  1830 ;;
  1831                           
  1832                           
  1833                           ;psect for function _DELAY_ms
  1834  0388                     _DELAY_ms:	
  1835  0388                     l1233:	
  1836                           ;delay.c: 77: while (ms_count != 0)
  1837                           
  1838                           ;incstack = 0
  1839                           ; Regs used in _DELAY_ms: [wreg+status,2+status,0+pclath+cstack]
  1840                           
  1841  0388  0872               	movf	DELAY_ms@ms_count,w
  1842  0389  0473               	iorwf	DELAY_ms@ms_count+1,w
  1843  038A  1903               	btfsc	3,2
  1844  038B  0008               	return
  1845                           
  1846                           ;delay.c: 78: {
  1847                           ;delay.c: 79: DELAY_us(300u);
  1848  038C  302C               	movlw	44
  1849  038D  00F0               	movwf	DELAY_us@us_count
  1850  038E  3001               	movlw	1
  1851  038F  00F1               	movwf	DELAY_us@us_count+1
  1852  0390  120A  118A  2340  120A  118A  	fcall	_DELAY_us
  1853                           
  1854                           ;delay.c: 80: ms_count--;
  1855  0395  3001               	movlw	1
  1856  0396  02F2               	subwf	DELAY_ms@ms_count,f
  1857  0397  3000               	movlw	0
  1858  0398  1C03               	skipc
  1859  0399  03F3               	decf	DELAY_ms@ms_count+1,f
  1860  039A  02F3               	subwf	DELAY_ms@ms_count+1,f
  1861  039B  2B88               	goto	l1233
  1862  039C                     __end_of_DELAY_ms:	
  1863                           
  1864                           	psect	text3
  1865  0340                     __ptext3:	
  1866 ;; *************** function _DELAY_us *****************
  1867 ;; Defined at:
  1868 ;;		line 56 in file "delay.c"
  1869 ;; Parameters:    Size  Location     Type
  1870 ;;  us_count        2    0[COMMON] unsigned int 
  1871 ;; Auto vars:     Size  Location     Type
  1872 ;;		None
  1873 ;; Return value:  Size  Location     Type
  1874 ;;                  1    wreg      void 
  1875 ;; Registers used:
  1876 ;;		wreg, status,2, status,0
  1877 ;; Tracked objects:
  1878 ;;		On entry : 0/0
  1879 ;;		On exit  : 0/0
  1880 ;;		Unchanged: 0/0
  1881 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1882 ;;      Params:         2       0       0       0       0
  1883 ;;      Locals:         0       0       0       0       0
  1884 ;;      Temps:          0       0       0       0       0
  1885 ;;      Totals:         2       0       0       0       0
  1886 ;;Total ram usage:        2 bytes
  1887 ;; Hardware stack levels used:    1
  1888 ;; This function calls:
  1889 ;;		Nothing
  1890 ;; This function is called by:
  1891 ;;		_DELAY_ms
  1892 ;;		_vSendData595
  1893 ;; This function uses a non-reentrant model
  1894 ;;
  1895                           
  1896                           
  1897                           ;psect for function _DELAY_us
  1898  0340                     _DELAY_us:	
  1899  0340                     l1211:	
  1900                           ;delay.c: 58: while (us_count != 0)
  1901                           
  1902                           ;incstack = 0
  1903                           ; Regs used in _DELAY_us: [wreg+status,2+status,0]
  1904                           
  1905  0340  0870               	movf	DELAY_us@us_count,w
  1906  0341  0471               	iorwf	DELAY_us@us_count+1,w
  1907  0342  1903               	btfsc	3,2
  1908  0343  0008               	return
  1909                           
  1910                           ;delay.c: 59: {
  1911                           ;delay.c: 60: us_count--;
  1912  0344  3001               	movlw	1
  1913  0345  02F0               	subwf	DELAY_us@us_count,f
  1914  0346  3000               	movlw	0
  1915  0347  1C03               	skipc
  1916  0348  03F1               	decf	DELAY_us@us_count+1,f
  1917  0349  02F1               	subwf	DELAY_us@us_count+1,f
  1918  034A  2B40               	goto	l1211
  1919  034B                     __end_of_DELAY_us:	
  1920                           
  1921                           	psect	text4
  1922  039C                     __ptext4:	
  1923 ;; *************** function _ui8Hex2DECDisplay *****************
  1924 ;; Defined at:
  1925 ;;		line 50 in file "display.c"
  1926 ;; Parameters:    Size  Location     Type
  1927 ;;  ui8Input        1    wreg     unsigned char 
  1928 ;; Auto vars:     Size  Location     Type
  1929 ;;  ui8Input        1    7[COMMON] unsigned char 
  1930 ;;  ui8Temp         1    6[COMMON] unsigned char 
  1931 ;; Return value:  Size  Location     Type
  1932 ;;                  1    wreg      unsigned char 
  1933 ;; Registers used:
  1934 ;;		wreg, status,2, status,0, pclath, cstack
  1935 ;; Tracked objects:
  1936 ;;		On entry : 0/0
  1937 ;;		On exit  : 0/0
  1938 ;;		Unchanged: 0/0
  1939 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1940 ;;      Params:         0       0       0       0       0
  1941 ;;      Locals:         2       0       0       0       0
  1942 ;;      Temps:          2       0       0       0       0
  1943 ;;      Totals:         4       0       0       0       0
  1944 ;;Total ram usage:        4 bytes
  1945 ;; Hardware stack levels used:    1
  1946 ;; Hardware stack levels required when called:    1
  1947 ;; This function calls:
  1948 ;;		___bmul
  1949 ;; This function is called by:
  1950 ;;		_main
  1951 ;; This function uses a non-reentrant model
  1952 ;;
  1953                           
  1954                           
  1955                           ;psect for function _ui8Hex2DECDisplay
  1956  039C                     _ui8Hex2DECDisplay:	
  1957                           
  1958                           ;incstack = 0
  1959                           ; Regs used in _ui8Hex2DECDisplay: [wreg+status,2+status,0+pclath+cstack]
  1960                           ;ui8Hex2DECDisplay@ui8Input stored from wreg
  1961  039C  00F7               	movwf	ui8Hex2DECDisplay@ui8Input
  1962                           
  1963                           ;display.c: 53: uint8_t ui8Temp;
  1964                           ;display.c: 54: ui8Temp = ui8Input & 0xF0;
  1965  039D  0877               	movf	ui8Hex2DECDisplay@ui8Input,w
  1966  039E  39F0               	andlw	240
  1967  039F  00F4               	movwf	??_ui8Hex2DECDisplay
  1968  03A0  0874               	movf	??_ui8Hex2DECDisplay,w
  1969  03A1  00F6               	movwf	ui8Hex2DECDisplay@ui8Temp
  1970                           
  1971                           ;display.c: 55: ui8Temp >>= 4;
  1972  03A2  0EF6               	swapf	ui8Hex2DECDisplay@ui8Temp,f
  1973  03A3  300F               	movlw	15
  1974  03A4  05F6               	andwf	ui8Hex2DECDisplay@ui8Temp,f
  1975                           
  1976                           ;display.c: 56: return ((ui8Temp * 10) + (ui8Input & 0x0F));
  1977  03A5  300F               	movlw	15
  1978  03A6  0577               	andwf	ui8Hex2DECDisplay@ui8Input,w
  1979  03A7  00F4               	movwf	??_ui8Hex2DECDisplay
  1980  03A8  300A               	movlw	10
  1981  03A9  00F5               	movwf	??_ui8Hex2DECDisplay+1
  1982  03AA  0875               	movf	??_ui8Hex2DECDisplay+1,w
  1983  03AB  00F0               	movwf	___bmul@multiplicand
  1984  03AC  0876               	movf	ui8Hex2DECDisplay@ui8Temp,w
  1985  03AD  120A  118A  2366   	fcall	___bmul
  1986  03B0  0774               	addwf	??_ui8Hex2DECDisplay,w
  1987  03B1  0008               	return
  1988  03B2                     __end_of_ui8Hex2DECDisplay:	
  1989                           
  1990                           	psect	text5
  1991  0366                     __ptext5:	
  1992 ;; *************** function ___bmul *****************
  1993 ;; Defined at:
  1994 ;;		line 4 in file "/usr/microchip/xc8/v1.43/sources/common/Umul8.c"
  1995 ;; Parameters:    Size  Location     Type
  1996 ;;  multiplier      1    wreg     unsigned char 
  1997 ;;  multiplicand    1    0[COMMON] unsigned char 
  1998 ;; Auto vars:     Size  Location     Type
  1999 ;;  multiplier      1    3[COMMON] unsigned char 
  2000 ;;  product         1    2[COMMON] unsigned char 
  2001 ;; Return value:  Size  Location     Type
  2002 ;;                  1    wreg      unsigned char 
  2003 ;; Registers used:
  2004 ;;		wreg, status,2, status,0
  2005 ;; Tracked objects:
  2006 ;;		On entry : 0/0
  2007 ;;		On exit  : 0/0
  2008 ;;		Unchanged: 0/0
  2009 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2010 ;;      Params:         1       0       0       0       0
  2011 ;;      Locals:         2       0       0       0       0
  2012 ;;      Temps:          1       0       0       0       0
  2013 ;;      Totals:         4       0       0       0       0
  2014 ;;Total ram usage:        4 bytes
  2015 ;; Hardware stack levels used:    1
  2016 ;; This function calls:
  2017 ;;		Nothing
  2018 ;; This function is called by:
  2019 ;;		_ui8Hex2DECDisplay
  2020 ;; This function uses a non-reentrant model
  2021 ;;
  2022                           
  2023                           
  2024                           ;psect for function ___bmul
  2025  0366                     ___bmul:	
  2026                           
  2027                           ;incstack = 0
  2028                           ; Regs used in ___bmul: [wreg+status,2+status,0]
  2029                           ;___bmul@multiplier stored from wreg
  2030  0366  00F3               	movwf	___bmul@multiplier
  2031  0367  01F2               	clrf	___bmul@product
  2032  0368                     l1267:	
  2033  0368  1C73               	btfss	___bmul@multiplier,0
  2034  0369  2B6E               	goto	l1271
  2035  036A  0870               	movf	___bmul@multiplicand,w
  2036  036B  00F1               	movwf	??___bmul
  2037  036C  0871               	movf	??___bmul,w
  2038  036D  07F2               	addwf	___bmul@product,f
  2039  036E                     l1271:	
  2040  036E  1003               	clrc
  2041  036F  0DF0               	rlf	___bmul@multiplicand,f
  2042  0370  1003               	clrc
  2043  0371  0CF3               	rrf	___bmul@multiplier,f
  2044  0372  0873               	movf	___bmul@multiplier,w
  2045  0373  1D03               	btfss	3,2
  2046  0374  2B68               	goto	l1267
  2047  0375  0872               	movf	___bmul@product,w
  2048  0376  0008               	return
  2049  0377                     __end_of___bmul:	
  2050                           
  2051                           	psect	text6
  2052  03F2                     __ptext6:	
  2053 ;; *************** function _ui8Dec2HexDisplay *****************
  2054 ;; Defined at:
  2055 ;;		line 35 in file "display.c"
  2056 ;; Parameters:    Size  Location     Type
  2057 ;;  ui8Input        1    wreg     unsigned char 
  2058 ;; Auto vars:     Size  Location     Type
  2059 ;;  ui8Input        1    1[BANK0 ] unsigned char 
  2060 ;;  ui8Temp         1    2[BANK0 ] unsigned char 
  2061 ;;  ui8Output       1    0[BANK0 ] unsigned char 
  2062 ;; Return value:  Size  Location     Type
  2063 ;;                  1    wreg      unsigned char 
  2064 ;; Registers used:
  2065 ;;		wreg, status,2, status,0, pclath, cstack
  2066 ;; Tracked objects:
  2067 ;;		On entry : 0/0
  2068 ;;		On exit  : 0/0
  2069 ;;		Unchanged: 0/0
  2070 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2071 ;;      Params:         0       0       0       0       0
  2072 ;;      Locals:         0       3       0       0       0
  2073 ;;      Temps:          3       0       0       0       0
  2074 ;;      Totals:         3       3       0       0       0
  2075 ;;Total ram usage:        6 bytes
  2076 ;; Hardware stack levels used:    1
  2077 ;; Hardware stack levels required when called:    1
  2078 ;; This function calls:
  2079 ;;		___awdiv
  2080 ;;		___awmod
  2081 ;; This function is called by:
  2082 ;;		_main
  2083 ;; This function uses a non-reentrant model
  2084 ;;
  2085                           
  2086                           
  2087                           ;psect for function _ui8Dec2HexDisplay
  2088  03F2                     _ui8Dec2HexDisplay:	
  2089                           
  2090                           ;incstack = 0
  2091                           ; Regs used in _ui8Dec2HexDisplay: [wreg+status,2+status,0+pclath+cstack]
  2092                           ;ui8Dec2HexDisplay@ui8Input stored from wreg
  2093  03F2  1283               	bcf	3,5	;RP0=0, select bank0
  2094  03F3  1303               	bcf	3,6	;RP1=0, select bank0
  2095  03F4  00A1               	movwf	ui8Dec2HexDisplay@ui8Input
  2096                           
  2097                           ;display.c: 37: uint8_t ui8Output;
  2098                           ;display.c: 38: uint8_t ui8Temp;
  2099                           ;display.c: 40: ui8Temp = (uint8_t)ui8Input/10;
  2100  03F5  300A               	movlw	10
  2101  03F6  00F0               	movwf	___awdiv@divisor
  2102  03F7  3000               	movlw	0
  2103  03F8  00F1               	movwf	___awdiv@divisor+1
  2104  03F9  0821               	movf	ui8Dec2HexDisplay@ui8Input,w
  2105  03FA  00F9               	movwf	??_ui8Dec2HexDisplay
  2106  03FB  01FA               	clrf	??_ui8Dec2HexDisplay+1
  2107  03FC  0879               	movf	??_ui8Dec2HexDisplay,w
  2108  03FD  00F2               	movwf	___awdiv@dividend
  2109  03FE  087A               	movf	??_ui8Dec2HexDisplay+1,w
  2110  03FF  00F3               	movwf	___awdiv@dividend+1
  2111  0400  120A  118A  2477  120A  118A  	fcall	___awdiv
  2112  0405  0870               	movf	?___awdiv,w
  2113  0406  00FB               	movwf	??_ui8Dec2HexDisplay+2
  2114  0407  087B               	movf	??_ui8Dec2HexDisplay+2,w
  2115  0408  1283               	bcf	3,5	;RP0=0, select bank0
  2116  0409  1303               	bcf	3,6	;RP1=0, select bank0
  2117  040A  00A2               	movwf	ui8Dec2HexDisplay@ui8Temp
  2118                           
  2119                           ;display.c: 41: ui8Output = ui8Temp;
  2120  040B  0822               	movf	ui8Dec2HexDisplay@ui8Temp,w
  2121  040C  00F9               	movwf	??_ui8Dec2HexDisplay
  2122  040D  0879               	movf	??_ui8Dec2HexDisplay,w
  2123  040E  00A0               	movwf	ui8Dec2HexDisplay@ui8Output
  2124                           
  2125                           ;display.c: 42: ui8Output <<= 4;
  2126  040F  0EA0               	swapf	ui8Dec2HexDisplay@ui8Output,f
  2127  0410  30F0               	movlw	240
  2128  0411  05A0               	andwf	ui8Dec2HexDisplay@ui8Output,f
  2129                           
  2130                           ;display.c: 44: ui8Temp = (uint8_t)ui8Input%10;
  2131  0412  300A               	movlw	10
  2132  0413  00F0               	movwf	___awmod@divisor
  2133  0414  3000               	movlw	0
  2134  0415  00F1               	movwf	___awmod@divisor+1
  2135  0416  0821               	movf	ui8Dec2HexDisplay@ui8Input,w
  2136  0417  00F9               	movwf	??_ui8Dec2HexDisplay
  2137  0418  01FA               	clrf	??_ui8Dec2HexDisplay+1
  2138  0419  0879               	movf	??_ui8Dec2HexDisplay,w
  2139  041A  00F2               	movwf	___awmod@dividend
  2140  041B  087A               	movf	??_ui8Dec2HexDisplay+1,w
  2141  041C  00F3               	movwf	___awmod@dividend+1
  2142  041D  120A  118A  242C   	fcall	___awmod
  2143  0420  0870               	movf	?___awmod,w
  2144  0421  00FB               	movwf	??_ui8Dec2HexDisplay+2
  2145  0422  087B               	movf	??_ui8Dec2HexDisplay+2,w
  2146  0423  1283               	bcf	3,5	;RP0=0, select bank0
  2147  0424  1303               	bcf	3,6	;RP1=0, select bank0
  2148  0425  00A2               	movwf	ui8Dec2HexDisplay@ui8Temp
  2149                           
  2150                           ;display.c: 45: ui8Output |= ui8Temp;
  2151  0426  0822               	movf	ui8Dec2HexDisplay@ui8Temp,w
  2152  0427  00F9               	movwf	??_ui8Dec2HexDisplay
  2153  0428  0879               	movf	??_ui8Dec2HexDisplay,w
  2154  0429  04A0               	iorwf	ui8Dec2HexDisplay@ui8Output,f
  2155                           
  2156                           ;display.c: 47: return ui8Output;
  2157  042A  0820               	movf	ui8Dec2HexDisplay@ui8Output,w
  2158  042B  0008               	return
  2159  042C                     __end_of_ui8Dec2HexDisplay:	
  2160                           
  2161                           	psect	text7
  2162  042C                     __ptext7:	
  2163 ;; *************** function ___awmod *****************
  2164 ;; Defined at:
  2165 ;;		line 6 in file "/usr/microchip/xc8/v1.43/sources/common/awmod.c"
  2166 ;; Parameters:    Size  Location     Type
  2167 ;;  divisor         2    0[COMMON] int 
  2168 ;;  dividend        2    2[COMMON] int 
  2169 ;; Auto vars:     Size  Location     Type
  2170 ;;  sign            1    6[COMMON] unsigned char 
  2171 ;;  counter         1    5[COMMON] unsigned char 
  2172 ;; Return value:  Size  Location     Type
  2173 ;;                  2    0[COMMON] int 
  2174 ;; Registers used:
  2175 ;;		wreg, status,2, status,0
  2176 ;; Tracked objects:
  2177 ;;		On entry : 0/0
  2178 ;;		On exit  : 0/0
  2179 ;;		Unchanged: 0/0
  2180 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2181 ;;      Params:         4       0       0       0       0
  2182 ;;      Locals:         2       0       0       0       0
  2183 ;;      Temps:          1       0       0       0       0
  2184 ;;      Totals:         7       0       0       0       0
  2185 ;;Total ram usage:        7 bytes
  2186 ;; Hardware stack levels used:    1
  2187 ;; This function calls:
  2188 ;;		Nothing
  2189 ;; This function is called by:
  2190 ;;		_main
  2191 ;;		_ui8Dec2HexDisplay
  2192 ;;		_Binary2BCD
  2193 ;; This function uses a non-reentrant model
  2194 ;;
  2195                           
  2196                           
  2197                           ;psect for function ___awmod
  2198  042C                     ___awmod:	
  2199                           
  2200                           ;incstack = 0
  2201                           ; Regs used in ___awmod: [wreg+status,2+status,0]
  2202  042C  01F6               	clrf	___awmod@sign
  2203  042D  1FF3               	btfss	___awmod@dividend+1,7
  2204  042E  2C36               	goto	l1331
  2205  042F  09F2               	comf	___awmod@dividend,f
  2206  0430  09F3               	comf	___awmod@dividend+1,f
  2207  0431  0AF2               	incf	___awmod@dividend,f
  2208  0432  1903               	skipnz
  2209  0433  0AF3               	incf	___awmod@dividend+1,f
  2210  0434  01F6               	clrf	___awmod@sign
  2211  0435  0AF6               	incf	___awmod@sign,f
  2212  0436                     l1331:	
  2213  0436  1FF1               	btfss	___awmod@divisor+1,7
  2214  0437  2C3D               	goto	l1335
  2215  0438  09F0               	comf	___awmod@divisor,f
  2216  0439  09F1               	comf	___awmod@divisor+1,f
  2217  043A  0AF0               	incf	___awmod@divisor,f
  2218  043B  1903               	skipnz
  2219  043C  0AF1               	incf	___awmod@divisor+1,f
  2220  043D                     l1335:	
  2221  043D  0870               	movf	___awmod@divisor,w
  2222  043E  0471               	iorwf	___awmod@divisor+1,w
  2223  043F  1903               	btfsc	3,2
  2224  0440  2C6A               	goto	l1353
  2225  0441  01F5               	clrf	___awmod@counter
  2226  0442  0AF5               	incf	___awmod@counter,f
  2227  0443                     l1343:	
  2228  0443  1BF1               	btfsc	___awmod@divisor+1,7
  2229  0444  2C51               	goto	l1345
  2230  0445  3001               	movlw	1
  2231  0446                     u895:	
  2232  0446  1003               	clrc
  2233  0447  0DF0               	rlf	___awmod@divisor,f
  2234  0448  0DF1               	rlf	___awmod@divisor+1,f
  2235  0449  3EFF               	addlw	-1
  2236  044A  1D03               	skipz
  2237  044B  2C46               	goto	u895
  2238  044C  3001               	movlw	1
  2239  044D  00F4               	movwf	??___awmod
  2240  044E  0874               	movf	??___awmod,w
  2241  044F  07F5               	addwf	___awmod@counter,f
  2242  0450  2C43               	goto	l1343
  2243  0451                     l1345:	
  2244  0451  0871               	movf	___awmod@divisor+1,w
  2245  0452  0273               	subwf	___awmod@dividend+1,w
  2246  0453  1D03               	skipz
  2247  0454  2C57               	goto	u915
  2248  0455  0870               	movf	___awmod@divisor,w
  2249  0456  0272               	subwf	___awmod@dividend,w
  2250  0457                     u915:	
  2251  0457  1C03               	skipc
  2252  0458  2C5F               	goto	l1349
  2253  0459  0870               	movf	___awmod@divisor,w
  2254  045A  02F2               	subwf	___awmod@dividend,f
  2255  045B  0871               	movf	___awmod@divisor+1,w
  2256  045C  1C03               	skipc
  2257  045D  03F3               	decf	___awmod@dividend+1,f
  2258  045E  02F3               	subwf	___awmod@dividend+1,f
  2259  045F                     l1349:	
  2260  045F  3001               	movlw	1
  2261  0460                     u925:	
  2262  0460  1003               	clrc
  2263  0461  0CF1               	rrf	___awmod@divisor+1,f
  2264  0462  0CF0               	rrf	___awmod@divisor,f
  2265  0463  3EFF               	addlw	-1
  2266  0464  1D03               	skipz
  2267  0465  2C60               	goto	u925
  2268  0466  3001               	movlw	1
  2269  0467  02F5               	subwf	___awmod@counter,f
  2270  0468  1D03               	btfss	3,2
  2271  0469  2C51               	goto	l1345
  2272  046A                     l1353:	
  2273  046A  0876               	movf	___awmod@sign,w
  2274  046B  1903               	btfsc	3,2
  2275  046C  2C72               	goto	l1357
  2276  046D  09F2               	comf	___awmod@dividend,f
  2277  046E  09F3               	comf	___awmod@dividend+1,f
  2278  046F  0AF2               	incf	___awmod@dividend,f
  2279  0470  1903               	skipnz
  2280  0471  0AF3               	incf	___awmod@dividend+1,f
  2281  0472                     l1357:	
  2282  0472  0873               	movf	___awmod@dividend+1,w
  2283  0473  00F1               	movwf	?___awmod+1
  2284  0474  0872               	movf	___awmod@dividend,w
  2285  0475  00F0               	movwf	?___awmod
  2286  0476  0008               	return
  2287  0477                     __end_of___awmod:	
  2288                           
  2289                           	psect	text8
  2290  0477                     __ptext8:	
  2291 ;; *************** function ___awdiv *****************
  2292 ;; Defined at:
  2293 ;;		line 6 in file "/usr/microchip/xc8/v1.43/sources/common/awdiv.c"
  2294 ;; Parameters:    Size  Location     Type
  2295 ;;  divisor         2    0[COMMON] int 
  2296 ;;  dividend        2    2[COMMON] int 
  2297 ;; Auto vars:     Size  Location     Type
  2298 ;;  quotient        2    7[COMMON] int 
  2299 ;;  sign            1    6[COMMON] unsigned char 
  2300 ;;  counter         1    5[COMMON] unsigned char 
  2301 ;; Return value:  Size  Location     Type
  2302 ;;                  2    0[COMMON] int 
  2303 ;; Registers used:
  2304 ;;		wreg, status,2, status,0
  2305 ;; Tracked objects:
  2306 ;;		On entry : 0/0
  2307 ;;		On exit  : 0/0
  2308 ;;		Unchanged: 0/0
  2309 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2310 ;;      Params:         4       0       0       0       0
  2311 ;;      Locals:         4       0       0       0       0
  2312 ;;      Temps:          1       0       0       0       0
  2313 ;;      Totals:         9       0       0       0       0
  2314 ;;Total ram usage:        9 bytes
  2315 ;; Hardware stack levels used:    1
  2316 ;; This function calls:
  2317 ;;		Nothing
  2318 ;; This function is called by:
  2319 ;;		_main
  2320 ;;		_ui8Dec2HexDisplay
  2321 ;;		_Binary2BCD
  2322 ;; This function uses a non-reentrant model
  2323 ;;
  2324                           
  2325                           
  2326                           ;psect for function ___awdiv
  2327  0477                     ___awdiv:	
  2328                           
  2329                           ;incstack = 0
  2330                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
  2331  0477  01F6               	clrf	___awdiv@sign
  2332  0478  1FF1               	btfss	___awdiv@divisor+1,7
  2333  0479  2C81               	goto	l1287
  2334  047A  09F0               	comf	___awdiv@divisor,f
  2335  047B  09F1               	comf	___awdiv@divisor+1,f
  2336  047C  0AF0               	incf	___awdiv@divisor,f
  2337  047D  1903               	skipnz
  2338  047E  0AF1               	incf	___awdiv@divisor+1,f
  2339  047F  01F6               	clrf	___awdiv@sign
  2340  0480  0AF6               	incf	___awdiv@sign,f
  2341  0481                     l1287:	
  2342  0481  1FF3               	btfss	___awdiv@dividend+1,7
  2343  0482  2C8C               	goto	l1293
  2344  0483  09F2               	comf	___awdiv@dividend,f
  2345  0484  09F3               	comf	___awdiv@dividend+1,f
  2346  0485  0AF2               	incf	___awdiv@dividend,f
  2347  0486  1903               	skipnz
  2348  0487  0AF3               	incf	___awdiv@dividend+1,f
  2349  0488  3001               	movlw	1
  2350  0489  00F4               	movwf	??___awdiv
  2351  048A  0874               	movf	??___awdiv,w
  2352  048B  06F6               	xorwf	___awdiv@sign,f
  2353  048C                     l1293:	
  2354  048C  01F7               	clrf	___awdiv@quotient
  2355  048D  01F8               	clrf	___awdiv@quotient+1
  2356  048E  0870               	movf	___awdiv@divisor,w
  2357  048F  0471               	iorwf	___awdiv@divisor+1,w
  2358  0490  1903               	btfsc	3,2
  2359  0491  2CC3               	goto	l1315
  2360  0492  01F5               	clrf	___awdiv@counter
  2361  0493  0AF5               	incf	___awdiv@counter,f
  2362  0494                     l1303:	
  2363  0494  1BF1               	btfsc	___awdiv@divisor+1,7
  2364  0495  2CA2               	goto	l1305
  2365  0496  3001               	movlw	1
  2366  0497                     u795:	
  2367  0497  1003               	clrc
  2368  0498  0DF0               	rlf	___awdiv@divisor,f
  2369  0499  0DF1               	rlf	___awdiv@divisor+1,f
  2370  049A  3EFF               	addlw	-1
  2371  049B  1D03               	skipz
  2372  049C  2C97               	goto	u795
  2373  049D  3001               	movlw	1
  2374  049E  00F4               	movwf	??___awdiv
  2375  049F  0874               	movf	??___awdiv,w
  2376  04A0  07F5               	addwf	___awdiv@counter,f
  2377  04A1  2C94               	goto	l1303
  2378  04A2                     l1305:	
  2379  04A2  3001               	movlw	1
  2380  04A3                     u815:	
  2381  04A3  1003               	clrc
  2382  04A4  0DF7               	rlf	___awdiv@quotient,f
  2383  04A5  0DF8               	rlf	___awdiv@quotient+1,f
  2384  04A6  3EFF               	addlw	-1
  2385  04A7  1D03               	skipz
  2386  04A8  2CA3               	goto	u815
  2387  04A9  0871               	movf	___awdiv@divisor+1,w
  2388  04AA  0273               	subwf	___awdiv@dividend+1,w
  2389  04AB  1D03               	skipz
  2390  04AC  2CAF               	goto	u825
  2391  04AD  0870               	movf	___awdiv@divisor,w
  2392  04AE  0272               	subwf	___awdiv@dividend,w
  2393  04AF                     u825:	
  2394  04AF  1C03               	skipc
  2395  04B0  2CB8               	goto	l1311
  2396  04B1  0870               	movf	___awdiv@divisor,w
  2397  04B2  02F2               	subwf	___awdiv@dividend,f
  2398  04B3  0871               	movf	___awdiv@divisor+1,w
  2399  04B4  1C03               	skipc
  2400  04B5  03F3               	decf	___awdiv@dividend+1,f
  2401  04B6  02F3               	subwf	___awdiv@dividend+1,f
  2402  04B7  1477               	bsf	___awdiv@quotient,0
  2403  04B8                     l1311:	
  2404  04B8  3001               	movlw	1
  2405  04B9                     u835:	
  2406  04B9  1003               	clrc
  2407  04BA  0CF1               	rrf	___awdiv@divisor+1,f
  2408  04BB  0CF0               	rrf	___awdiv@divisor,f
  2409  04BC  3EFF               	addlw	-1
  2410  04BD  1D03               	skipz
  2411  04BE  2CB9               	goto	u835
  2412  04BF  3001               	movlw	1
  2413  04C0  02F5               	subwf	___awdiv@counter,f
  2414  04C1  1D03               	btfss	3,2
  2415  04C2  2CA2               	goto	l1305
  2416  04C3                     l1315:	
  2417  04C3  0876               	movf	___awdiv@sign,w
  2418  04C4  1903               	btfsc	3,2
  2419  04C5  2CCB               	goto	l1319
  2420  04C6  09F7               	comf	___awdiv@quotient,f
  2421  04C7  09F8               	comf	___awdiv@quotient+1,f
  2422  04C8  0AF7               	incf	___awdiv@quotient,f
  2423  04C9  1903               	skipnz
  2424  04CA  0AF8               	incf	___awdiv@quotient+1,f
  2425  04CB                     l1319:	
  2426  04CB  0878               	movf	___awdiv@quotient+1,w
  2427  04CC  00F1               	movwf	?___awdiv+1
  2428  04CD  0877               	movf	___awdiv@quotient,w
  2429  04CE  00F0               	movwf	?___awdiv
  2430  04CF  0008               	return
  2431  04D0                     __end_of___awdiv:	
  2432                           
  2433                           	psect	text9
  2434  04D0                     __ptext9:	
  2435 ;; *************** function _RTC_SetDateTime *****************
  2436 ;; Defined at:
  2437 ;;		line 95 in file "rtc.c"
  2438 ;; Parameters:    Size  Location     Type
  2439 ;;  rtc             1    wreg     PTR struct .
  2440 ;;		 -> main@rtc(7), 
  2441 ;; Auto vars:     Size  Location     Type
  2442 ;;  rtc             1    1[COMMON] PTR struct .
  2443 ;;		 -> main@rtc(7), 
  2444 ;; Return value:  Size  Location     Type
  2445 ;;                  1    wreg      void 
  2446 ;; Registers used:
  2447 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2448 ;; Tracked objects:
  2449 ;;		On entry : 0/0
  2450 ;;		On exit  : 0/0
  2451 ;;		Unchanged: 0/0
  2452 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2453 ;;      Params:         0       0       0       0       0
  2454 ;;      Locals:         1       0       0       0       0
  2455 ;;      Temps:          0       0       0       0       0
  2456 ;;      Totals:         1       0       0       0       0
  2457 ;;Total ram usage:        1 bytes
  2458 ;; Hardware stack levels used:    1
  2459 ;; Hardware stack levels required when called:    2
  2460 ;; This function calls:
  2461 ;;		_I2C_Start
  2462 ;;		_I2C_Stop
  2463 ;;		_I2C_Write
  2464 ;; This function is called by:
  2465 ;;		_main
  2466 ;; This function uses a non-reentrant model
  2467 ;;
  2468                           
  2469                           
  2470                           ;psect for function _RTC_SetDateTime
  2471  04D0                     _RTC_SetDateTime:	
  2472                           
  2473                           ;incstack = 0
  2474                           ; Regs used in _RTC_SetDateTime: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2475                           ;RTC_SetDateTime@rtc stored from wreg
  2476  04D0  00F1               	movwf	RTC_SetDateTime@rtc
  2477                           
  2478                           ;rtc.c: 97: I2C_Start();
  2479  04D1  120A  118A  2311  120A  118A  	fcall	_I2C_Start
  2480                           
  2481                           ;rtc.c: 99: I2C_Write(0xD0u);
  2482  04D6  30D0               	movlw	208
  2483  04D7  120A  118A  234B  120A  118A  	fcall	_I2C_Write
  2484                           
  2485                           ;rtc.c: 100: I2C_Write(0x00u);
  2486  04DC  3000               	movlw	0
  2487  04DD  120A  118A  234B  120A  118A  	fcall	_I2C_Write
  2488                           
  2489                           ;rtc.c: 102: I2C_Write(rtc->sec);
  2490  04E2  0871               	movf	RTC_SetDateTime@rtc,w
  2491  04E3  0084               	movwf	4
  2492  04E4  1383               	bcf	3,7	;select IRP bank0
  2493  04E5  0800               	movf	0,w
  2494  04E6  120A  118A  234B  120A  118A  	fcall	_I2C_Write
  2495                           
  2496                           ;rtc.c: 103: I2C_Write(rtc->min);
  2497  04EB  0A71               	incf	RTC_SetDateTime@rtc,w
  2498  04EC  0084               	movwf	4
  2499  04ED  1383               	bcf	3,7	;select IRP bank0
  2500  04EE  0800               	movf	0,w
  2501  04EF  120A  118A  234B  120A  118A  	fcall	_I2C_Write
  2502                           
  2503                           ;rtc.c: 104: I2C_Write(rtc->hour);
  2504  04F4  0871               	movf	RTC_SetDateTime@rtc,w
  2505  04F5  3E02               	addlw	2
  2506  04F6  0084               	movwf	4
  2507  04F7  1383               	bcf	3,7	;select IRP bank0
  2508  04F8  0800               	movf	0,w
  2509  04F9  120A  118A  234B  120A  118A  	fcall	_I2C_Write
  2510                           
  2511                           ;rtc.c: 105: I2C_Write(rtc->weekDay);
  2512  04FE  0871               	movf	RTC_SetDateTime@rtc,w
  2513  04FF  3E03               	addlw	3
  2514  0500  0084               	movwf	4
  2515  0501  1383               	bcf	3,7	;select IRP bank0
  2516  0502  0800               	movf	0,w
  2517  0503  120A  118A  234B  120A  118A  	fcall	_I2C_Write
  2518                           
  2519                           ;rtc.c: 106: I2C_Write(rtc->date);
  2520  0508  0871               	movf	RTC_SetDateTime@rtc,w
  2521  0509  3E04               	addlw	4
  2522  050A  0084               	movwf	4
  2523  050B  1383               	bcf	3,7	;select IRP bank0
  2524  050C  0800               	movf	0,w
  2525  050D  120A  118A  234B  120A  118A  	fcall	_I2C_Write
  2526                           
  2527                           ;rtc.c: 107: I2C_Write(rtc->month);
  2528  0512  0871               	movf	RTC_SetDateTime@rtc,w
  2529  0513  3E05               	addlw	5
  2530  0514  0084               	movwf	4
  2531  0515  1383               	bcf	3,7	;select IRP bank0
  2532  0516  0800               	movf	0,w
  2533  0517  120A  118A  234B  120A  118A  	fcall	_I2C_Write
  2534                           
  2535                           ;rtc.c: 108: I2C_Write(rtc->year);
  2536  051C  0871               	movf	RTC_SetDateTime@rtc,w
  2537  051D  3E06               	addlw	6
  2538  051E  0084               	movwf	4
  2539  051F  1383               	bcf	3,7	;select IRP bank0
  2540  0520  0800               	movf	0,w
  2541  0521  120A  118A  234B  120A  118A  	fcall	_I2C_Write
  2542                           
  2543                           ;rtc.c: 110: I2C_Stop();
  2544  0526  120A  118A  2317   	fcall	_I2C_Stop
  2545  0529  0008               	return
  2546  052A                     __end_of_RTC_SetDateTime:	
  2547                           
  2548                           	psect	text10
  2549  03D2                     __ptext10:	
  2550 ;; *************** function _RTC_Init *****************
  2551 ;; Defined at:
  2552 ;;		line 57 in file "rtc.c"
  2553 ;; Parameters:    Size  Location     Type
  2554 ;;		None
  2555 ;; Auto vars:     Size  Location     Type
  2556 ;;		None
  2557 ;; Return value:  Size  Location     Type
  2558 ;;                  1    wreg      void 
  2559 ;; Registers used:
  2560 ;;		wreg, status,2, status,0, pclath, cstack
  2561 ;; Tracked objects:
  2562 ;;		On entry : 0/0
  2563 ;;		On exit  : 0/0
  2564 ;;		Unchanged: 0/0
  2565 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2566 ;;      Params:         0       0       0       0       0
  2567 ;;      Locals:         0       0       0       0       0
  2568 ;;      Temps:          0       0       0       0       0
  2569 ;;      Totals:         0       0       0       0       0
  2570 ;;Total ram usage:        0 bytes
  2571 ;; Hardware stack levels used:    1
  2572 ;; Hardware stack levels required when called:    2
  2573 ;; This function calls:
  2574 ;;		_I2C_Init
  2575 ;;		_I2C_Start
  2576 ;;		_I2C_Stop
  2577 ;;		_I2C_Write
  2578 ;; This function is called by:
  2579 ;;		_main
  2580 ;; This function uses a non-reentrant model
  2581 ;;
  2582                           
  2583                           
  2584                           ;psect for function _RTC_Init
  2585  03D2                     _RTC_Init:	
  2586                           
  2587                           ;rtc.c: 59: I2C_Init();
  2588                           
  2589                           ;incstack = 0
  2590                           ; Regs used in _RTC_Init: [wreg+status,2+status,0+pclath+cstack]
  2591  03D2  120A  118A  2358  120A  118A  	fcall	_I2C_Init
  2592                           
  2593                           ;rtc.c: 60: I2C_Start();
  2594  03D7  120A  118A  2311  120A  118A  	fcall	_I2C_Start
  2595                           
  2596                           ;rtc.c: 62: I2C_Write(0xD0u);
  2597  03DC  30D0               	movlw	208
  2598  03DD  120A  118A  234B  120A  118A  	fcall	_I2C_Write
  2599                           
  2600                           ;rtc.c: 63: I2C_Write(0x07u);
  2601  03E2  3007               	movlw	7
  2602  03E3  120A  118A  234B  120A  118A  	fcall	_I2C_Write
  2603                           
  2604                           ;rtc.c: 65: I2C_Write(0x00);
  2605  03E8  3000               	movlw	0
  2606  03E9  120A  118A  234B  120A  118A  	fcall	_I2C_Write
  2607                           
  2608                           ;rtc.c: 67: I2C_Stop();
  2609  03EE  120A  118A  2317   	fcall	_I2C_Stop
  2610  03F1  0008               	return
  2611  03F2                     __end_of_RTC_Init:	
  2612                           
  2613                           	psect	text11
  2614  0358                     __ptext11:	
  2615 ;; *************** function _I2C_Init *****************
  2616 ;; Defined at:
  2617 ;;		line 87 in file "i2c.c"
  2618 ;; Parameters:    Size  Location     Type
  2619 ;;		None
  2620 ;; Auto vars:     Size  Location     Type
  2621 ;;		None
  2622 ;; Return value:  Size  Location     Type
  2623 ;;                  1    wreg      void 
  2624 ;; Registers used:
  2625 ;;		wreg
  2626 ;; Tracked objects:
  2627 ;;		On entry : 0/0
  2628 ;;		On exit  : 0/0
  2629 ;;		Unchanged: 0/0
  2630 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2631 ;;      Params:         0       0       0       0       0
  2632 ;;      Locals:         0       0       0       0       0
  2633 ;;      Temps:          0       0       0       0       0
  2634 ;;      Totals:         0       0       0       0       0
  2635 ;;Total ram usage:        0 bytes
  2636 ;; Hardware stack levels used:    1
  2637 ;; This function calls:
  2638 ;;		Nothing
  2639 ;; This function is called by:
  2640 ;;		_RTC_Init
  2641 ;; This function uses a non-reentrant model
  2642 ;;
  2643                           
  2644                           
  2645                           ;psect for function _I2C_Init
  2646  0358                     _I2C_Init:	
  2647                           
  2648                           ;i2c.c: 89: TRISC3 = 0x01u;
  2649                           
  2650                           ;incstack = 0
  2651                           ; Regs used in _I2C_Init: [wreg]
  2652  0358  1683               	bsf	3,5	;RP0=1, select bank1
  2653  0359  1303               	bcf	3,6	;RP1=0, select bank1
  2654  035A  1587               	bsf	7,3	;volatile
  2655                           
  2656                           ;i2c.c: 90: TRISC4 = 0x01u;
  2657  035B  1607               	bsf	7,4	;volatile
  2658                           
  2659                           ;i2c.c: 92: SSPSTAT |= 0x80;
  2660  035C  1794               	bsf	20,7	;volatile
  2661                           
  2662                           ;i2c.c: 93: SSPCON = 0x28;
  2663  035D  3028               	movlw	40
  2664  035E  1283               	bcf	3,5	;RP0=0, select bank0
  2665  035F  1303               	bcf	3,6	;RP1=0, select bank0
  2666  0360  0094               	movwf	20	;volatile
  2667                           
  2668                           ;i2c.c: 94: SSPADD = 50;
  2669  0361  3032               	movlw	50
  2670  0362  1683               	bsf	3,5	;RP0=1, select bank1
  2671  0363  1303               	bcf	3,6	;RP1=0, select bank1
  2672  0364  0093               	movwf	19	;volatile
  2673  0365  0008               	return
  2674  0366                     __end_of_I2C_Init:	
  2675                           
  2676                           	psect	text12
  2677  058E                     __ptext12:	
  2678 ;; *************** function _RTC_GetDateTime *****************
  2679 ;; Defined at:
  2680 ;;		line 131 in file "rtc.c"
  2681 ;; Parameters:    Size  Location     Type
  2682 ;;  rtc             1    wreg     PTR struct .
  2683 ;;		 -> main@rtc(7), 
  2684 ;; Auto vars:     Size  Location     Type
  2685 ;;  rtc             1    4[COMMON] PTR struct .
  2686 ;;		 -> main@rtc(7), 
  2687 ;; Return value:  Size  Location     Type
  2688 ;;                  1    wreg      void 
  2689 ;; Registers used:
  2690 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2691 ;; Tracked objects:
  2692 ;;		On entry : 0/0
  2693 ;;		On exit  : 0/0
  2694 ;;		Unchanged: 0/0
  2695 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2696 ;;      Params:         0       0       0       0       0
  2697 ;;      Locals:         1       0       0       0       0
  2698 ;;      Temps:          1       0       0       0       0
  2699 ;;      Totals:         2       0       0       0       0
  2700 ;;Total ram usage:        2 bytes
  2701 ;; Hardware stack levels used:    1
  2702 ;; Hardware stack levels required when called:    2
  2703 ;; This function calls:
  2704 ;;		_I2C_Read
  2705 ;;		_I2C_Start
  2706 ;;		_I2C_Stop
  2707 ;;		_I2C_Write
  2708 ;; This function is called by:
  2709 ;;		_main
  2710 ;; This function uses a non-reentrant model
  2711 ;;
  2712                           
  2713                           
  2714                           ;psect for function _RTC_GetDateTime
  2715  058E                     _RTC_GetDateTime:	
  2716                           
  2717                           ;incstack = 0
  2718                           ; Regs used in _RTC_GetDateTime: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2719                           ;RTC_GetDateTime@rtc stored from wreg
  2720  058E  00F4               	movwf	RTC_GetDateTime@rtc
  2721                           
  2722                           ;rtc.c: 133: I2C_Start();
  2723  058F  120A  118A  2311  120A  118A  	fcall	_I2C_Start
  2724                           
  2725                           ;rtc.c: 135: I2C_Write(0xD0u);
  2726  0594  30D0               	movlw	208
  2727  0595  120A  118A  234B  120A  118A  	fcall	_I2C_Write
  2728                           
  2729                           ;rtc.c: 136: I2C_Write(0x00u);
  2730  059A  3000               	movlw	0
  2731  059B  120A  118A  234B  120A  118A  	fcall	_I2C_Write
  2732                           
  2733                           ;rtc.c: 138: I2C_Stop();
  2734  05A0  120A  118A  2317  120A  118A  	fcall	_I2C_Stop
  2735                           
  2736                           ;rtc.c: 140: I2C_Start();
  2737  05A5  120A  118A  2311  120A  118A  	fcall	_I2C_Start
  2738                           
  2739                           ;rtc.c: 141: I2C_Write(0xD1u);
  2740  05AA  30D1               	movlw	209
  2741  05AB  120A  118A  234B  120A  118A  	fcall	_I2C_Write
  2742                           
  2743                           ;rtc.c: 143: rtc->sec = I2C_Read(1);
  2744  05B0  3001               	movlw	1
  2745  05B1  120A  118A  23B2  120A  118A  	fcall	_I2C_Read
  2746  05B6  00F3               	movwf	??_RTC_GetDateTime
  2747  05B7  0874               	movf	RTC_GetDateTime@rtc,w
  2748  05B8  0084               	movwf	4
  2749  05B9  0873               	movf	??_RTC_GetDateTime,w
  2750  05BA  1383               	bcf	3,7	;select IRP bank0
  2751  05BB  0080               	movwf	0
  2752                           
  2753                           ;rtc.c: 144: rtc->min = I2C_Read(1);
  2754  05BC  3001               	movlw	1
  2755  05BD  120A  118A  23B2  120A  118A  	fcall	_I2C_Read
  2756  05C2  00F3               	movwf	??_RTC_GetDateTime
  2757  05C3  0A74               	incf	RTC_GetDateTime@rtc,w
  2758  05C4  0084               	movwf	4
  2759  05C5  0873               	movf	??_RTC_GetDateTime,w
  2760  05C6  1383               	bcf	3,7	;select IRP bank0
  2761  05C7  0080               	movwf	0
  2762                           
  2763                           ;rtc.c: 145: rtc->hour= I2C_Read(1);
  2764  05C8  3001               	movlw	1
  2765  05C9  120A  118A  23B2  120A  118A  	fcall	_I2C_Read
  2766  05CE  00F3               	movwf	??_RTC_GetDateTime
  2767  05CF  0874               	movf	RTC_GetDateTime@rtc,w
  2768  05D0  3E02               	addlw	2
  2769  05D1  0084               	movwf	4
  2770  05D2  0873               	movf	??_RTC_GetDateTime,w
  2771  05D3  1383               	bcf	3,7	;select IRP bank0
  2772  05D4  0080               	movwf	0
  2773                           
  2774                           ;rtc.c: 146: rtc->weekDay = I2C_Read(1);
  2775  05D5  3001               	movlw	1
  2776  05D6  120A  118A  23B2  120A  118A  	fcall	_I2C_Read
  2777  05DB  00F3               	movwf	??_RTC_GetDateTime
  2778  05DC  0874               	movf	RTC_GetDateTime@rtc,w
  2779  05DD  3E03               	addlw	3
  2780  05DE  0084               	movwf	4
  2781  05DF  0873               	movf	??_RTC_GetDateTime,w
  2782  05E0  1383               	bcf	3,7	;select IRP bank0
  2783  05E1  0080               	movwf	0
  2784                           
  2785                           ;rtc.c: 147: rtc->date= I2C_Read(1);
  2786  05E2  3001               	movlw	1
  2787  05E3  120A  118A  23B2  120A  118A  	fcall	_I2C_Read
  2788  05E8  00F3               	movwf	??_RTC_GetDateTime
  2789  05E9  0874               	movf	RTC_GetDateTime@rtc,w
  2790  05EA  3E04               	addlw	4
  2791  05EB  0084               	movwf	4
  2792  05EC  0873               	movf	??_RTC_GetDateTime,w
  2793  05ED  1383               	bcf	3,7	;select IRP bank0
  2794  05EE  0080               	movwf	0
  2795                           
  2796                           ;rtc.c: 148: rtc->month=I2C_Read(1);
  2797  05EF  3001               	movlw	1
  2798  05F0  120A  118A  23B2  120A  118A  	fcall	_I2C_Read
  2799  05F5  00F3               	movwf	??_RTC_GetDateTime
  2800  05F6  0874               	movf	RTC_GetDateTime@rtc,w
  2801  05F7  3E05               	addlw	5
  2802  05F8  0084               	movwf	4
  2803  05F9  0873               	movf	??_RTC_GetDateTime,w
  2804  05FA  1383               	bcf	3,7	;select IRP bank0
  2805  05FB  0080               	movwf	0
  2806                           
  2807                           ;rtc.c: 149: rtc->year =I2C_Read(0);
  2808  05FC  3000               	movlw	0
  2809  05FD  120A  118A  23B2  120A  118A  	fcall	_I2C_Read
  2810  0602  00F3               	movwf	??_RTC_GetDateTime
  2811  0603  0874               	movf	RTC_GetDateTime@rtc,w
  2812  0604  3E06               	addlw	6
  2813  0605  0084               	movwf	4
  2814  0606  0873               	movf	??_RTC_GetDateTime,w
  2815  0607  1383               	bcf	3,7	;select IRP bank0
  2816  0608  0080               	movwf	0
  2817                           
  2818                           ;rtc.c: 151: I2C_Stop();
  2819  0609  120A  118A  2317   	fcall	_I2C_Stop
  2820  060C  0008               	return
  2821  060D                     __end_of_RTC_GetDateTime:	
  2822                           
  2823                           	psect	text13
  2824  034B                     __ptext13:	
  2825 ;; *************** function _I2C_Write *****************
  2826 ;; Defined at:
  2827 ;;		line 179 in file "i2c.c"
  2828 ;; Parameters:    Size  Location     Type
  2829 ;;  v_i2cData_u8    1    wreg     unsigned char 
  2830 ;; Auto vars:     Size  Location     Type
  2831 ;;  v_i2cData_u8    1    0[COMMON] unsigned char 
  2832 ;; Return value:  Size  Location     Type
  2833 ;;                  1    wreg      void 
  2834 ;; Registers used:
  2835 ;;		wreg, status,2, status,0, pclath, cstack
  2836 ;; Tracked objects:
  2837 ;;		On entry : 0/0
  2838 ;;		On exit  : 0/0
  2839 ;;		Unchanged: 0/0
  2840 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2841 ;;      Params:         0       0       0       0       0
  2842 ;;      Locals:         1       0       0       0       0
  2843 ;;      Temps:          0       0       0       0       0
  2844 ;;      Totals:         1       0       0       0       0
  2845 ;;Total ram usage:        1 bytes
  2846 ;; Hardware stack levels used:    1
  2847 ;; Hardware stack levels required when called:    1
  2848 ;; This function calls:
  2849 ;;		_i2c_WaitForIdle
  2850 ;; This function is called by:
  2851 ;;		_RTC_Init
  2852 ;;		_RTC_SetDateTime
  2853 ;;		_RTC_GetDateTime
  2854 ;; This function uses a non-reentrant model
  2855 ;;
  2856                           
  2857                           
  2858                           ;psect for function _I2C_Write
  2859  034B                     _I2C_Write:	
  2860                           
  2861                           ;incstack = 0
  2862                           ; Regs used in _I2C_Write: [wreg+status,2+status,0+pclath+cstack]
  2863                           ;I2C_Write@v_i2cData_u8 stored from wreg
  2864  034B  00F0               	movwf	I2C_Write@v_i2cData_u8
  2865                           
  2866                           ;i2c.c: 183: SSPBUF = v_i2cData_u8;
  2867  034C  0870               	movf	I2C_Write@v_i2cData_u8,w
  2868  034D  1283               	bcf	3,5	;RP0=0, select bank0
  2869  034E  1303               	bcf	3,6	;RP1=0, select bank0
  2870  034F  0093               	movwf	19	;volatile
  2871  0350                     l148:	
  2872                           ;i2c.c: 184: while(BF==1);
  2873                           
  2874  0350  1683               	bsf	3,5	;RP0=1, select bank1
  2875  0351  1303               	bcf	3,6	;RP1=0, select bank1
  2876  0352  1814               	btfsc	20,0	;volatile
  2877  0353  2B50               	goto	l148
  2878                           
  2879                           ;i2c.c: 185: i2c_WaitForIdle();
  2880  0354  120A  118A  2335   	fcall	_i2c_WaitForIdle
  2881  0357  0008               	return
  2882  0358                     __end_of_I2C_Write:	
  2883                           
  2884                           	psect	text14
  2885  0317                     __ptext14:	
  2886 ;; *************** function _I2C_Stop *****************
  2887 ;; Defined at:
  2888 ;;		line 147 in file "i2c.c"
  2889 ;; Parameters:    Size  Location     Type
  2890 ;;		None
  2891 ;; Auto vars:     Size  Location     Type
  2892 ;;		None
  2893 ;; Return value:  Size  Location     Type
  2894 ;;                  1    wreg      void 
  2895 ;; Registers used:
  2896 ;;		None
  2897 ;; Tracked objects:
  2898 ;;		On entry : 0/0
  2899 ;;		On exit  : 0/0
  2900 ;;		Unchanged: 0/0
  2901 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2902 ;;      Params:         0       0       0       0       0
  2903 ;;      Locals:         0       0       0       0       0
  2904 ;;      Temps:          0       0       0       0       0
  2905 ;;      Totals:         0       0       0       0       0
  2906 ;;Total ram usage:        0 bytes
  2907 ;; Hardware stack levels used:    1
  2908 ;; This function calls:
  2909 ;;		Nothing
  2910 ;; This function is called by:
  2911 ;;		_RTC_Init
  2912 ;;		_RTC_SetDateTime
  2913 ;;		_RTC_GetDateTime
  2914 ;; This function uses a non-reentrant model
  2915 ;;
  2916                           
  2917                           
  2918                           ;psect for function _I2C_Stop
  2919  0317                     _I2C_Stop:	
  2920                           
  2921                           ;i2c.c: 149: PEN = 1;
  2922                           
  2923                           ;incstack = 0
  2924                           ; Regs used in _I2C_Stop: []
  2925  0317  1683               	bsf	3,5	;RP0=1, select bank1
  2926  0318  1303               	bcf	3,6	;RP1=0, select bank1
  2927  0319  1511               	bsf	17,2	;volatile
  2928  031A                     l142:	
  2929                           ;i2c.c: 150: while(PEN == 1);
  2930                           
  2931  031A  1D11               	btfss	17,2	;volatile
  2932  031B  0008               	return
  2933  031C  2B1A               	goto	l142
  2934  031D                     __end_of_I2C_Stop:	
  2935                           
  2936                           	psect	text15
  2937  0311                     __ptext15:	
  2938 ;; *************** function _I2C_Start *****************
  2939 ;; Defined at:
  2940 ;;		line 118 in file "i2c.c"
  2941 ;; Parameters:    Size  Location     Type
  2942 ;;		None
  2943 ;; Auto vars:     Size  Location     Type
  2944 ;;		None
  2945 ;; Return value:  Size  Location     Type
  2946 ;;                  1    wreg      void 
  2947 ;; Registers used:
  2948 ;;		None
  2949 ;; Tracked objects:
  2950 ;;		On entry : 0/0
  2951 ;;		On exit  : 0/0
  2952 ;;		Unchanged: 0/0
  2953 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2954 ;;      Params:         0       0       0       0       0
  2955 ;;      Locals:         0       0       0       0       0
  2956 ;;      Temps:          0       0       0       0       0
  2957 ;;      Totals:         0       0       0       0       0
  2958 ;;Total ram usage:        0 bytes
  2959 ;; Hardware stack levels used:    1
  2960 ;; This function calls:
  2961 ;;		Nothing
  2962 ;; This function is called by:
  2963 ;;		_RTC_Init
  2964 ;;		_RTC_SetDateTime
  2965 ;;		_RTC_GetDateTime
  2966 ;; This function uses a non-reentrant model
  2967 ;;
  2968                           
  2969                           
  2970                           ;psect for function _I2C_Start
  2971  0311                     _I2C_Start:	
  2972                           
  2973                           ;i2c.c: 120: SEN = 1;
  2974                           
  2975                           ;incstack = 0
  2976                           ; Regs used in _I2C_Start: []
  2977  0311  1683               	bsf	3,5	;RP0=1, select bank1
  2978  0312  1303               	bcf	3,6	;RP1=0, select bank1
  2979  0313  1411               	bsf	17,0	;volatile
  2980  0314                     l136:	
  2981                           ;i2c.c: 121: while(SEN == 1);
  2982                           
  2983  0314  1C11               	btfss	17,0	;volatile
  2984  0315  0008               	return
  2985  0316  2B14               	goto	l136
  2986  0317                     __end_of_I2C_Start:	
  2987                           
  2988                           	psect	text16
  2989  03B2                     __ptext16:	
  2990 ;; *************** function _I2C_Read *****************
  2991 ;; Defined at:
  2992 ;;		line 214 in file "i2c.c"
  2993 ;; Parameters:    Size  Location     Type
  2994 ;;  v_ackOption_    1    wreg     unsigned char 
  2995 ;; Auto vars:     Size  Location     Type
  2996 ;;  v_ackOption_    1    1[COMMON] unsigned char 
  2997 ;;  v_i2cData_u8    1    2[COMMON] unsigned char 
  2998 ;; Return value:  Size  Location     Type
  2999 ;;                  1    wreg      unsigned char 
  3000 ;; Registers used:
  3001 ;;		wreg, status,2, status,0, pclath, cstack
  3002 ;; Tracked objects:
  3003 ;;		On entry : 0/0
  3004 ;;		On exit  : 0/0
  3005 ;;		Unchanged: 0/0
  3006 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3007 ;;      Params:         0       0       0       0       0
  3008 ;;      Locals:         2       0       0       0       0
  3009 ;;      Temps:          1       0       0       0       0
  3010 ;;      Totals:         3       0       0       0       0
  3011 ;;Total ram usage:        3 bytes
  3012 ;; Hardware stack levels used:    1
  3013 ;; Hardware stack levels required when called:    1
  3014 ;; This function calls:
  3015 ;;		_i2c_Ack
  3016 ;;		_i2c_NoAck
  3017 ;;		_i2c_WaitForIdle
  3018 ;; This function is called by:
  3019 ;;		_RTC_GetDateTime
  3020 ;; This function uses a non-reentrant model
  3021 ;;
  3022                           
  3023                           
  3024                           ;psect for function _I2C_Read
  3025  03B2                     _I2C_Read:	
  3026                           
  3027                           ;incstack = 0
  3028                           ; Regs used in _I2C_Read: [wreg+status,2+status,0+pclath+cstack]
  3029                           ;I2C_Read@v_ackOption_u8 stored from wreg
  3030  03B2  00F1               	movwf	I2C_Read@v_ackOption_u8
  3031                           
  3032                           ;i2c.c: 216: uint8_t v_i2cData_u8=0x00;
  3033  03B3  01F2               	clrf	I2C_Read@v_i2cData_u8
  3034                           
  3035                           ;i2c.c: 218: RCEN = 1;
  3036  03B4  1683               	bsf	3,5	;RP0=1, select bank1
  3037  03B5  1303               	bcf	3,6	;RP1=0, select bank1
  3038  03B6  1591               	bsf	17,3	;volatile
  3039  03B7                     l154:	
  3040                           ;i2c.c: 219: while(BF==0);
  3041                           
  3042  03B7  1C14               	btfss	20,0	;volatile
  3043  03B8  2BB7               	goto	l154
  3044                           
  3045                           ;i2c.c: 220: v_i2cData_u8 = SSPBUF;
  3046  03B9  1283               	bcf	3,5	;RP0=0, select bank0
  3047  03BA  1303               	bcf	3,6	;RP1=0, select bank0
  3048  03BB  0813               	movf	19,w	;volatile
  3049  03BC  00F0               	movwf	??_I2C_Read
  3050  03BD  0870               	movf	??_I2C_Read,w
  3051  03BE  00F2               	movwf	I2C_Read@v_i2cData_u8
  3052                           
  3053                           ;i2c.c: 221: i2c_WaitForIdle();
  3054  03BF  120A  118A  2335  120A  118A  	fcall	_i2c_WaitForIdle
  3055                           
  3056                           ;i2c.c: 223: if(v_ackOption_u8==1)
  3057  03C4  0371               	decf	I2C_Read@v_ackOption_u8,w
  3058  03C5  1D03               	btfss	3,2
  3059  03C6  2BCD               	goto	l1259
  3060                           
  3061                           ;i2c.c: 224: {
  3062                           ;i2c.c: 225: i2c_Ack();
  3063  03C7  120A  118A  231D  120A  118A  	fcall	_i2c_Ack
  3064                           
  3065                           ;i2c.c: 226: }
  3066  03CC  2BD0               	goto	l1261
  3067  03CD                     l1259:	
  3068                           
  3069                           ;i2c.c: 227: else
  3070                           ;i2c.c: 228: {
  3071                           ;i2c.c: 229: i2c_NoAck();
  3072  03CD  120A  118A  2324   	fcall	_i2c_NoAck
  3073  03D0                     l1261:	
  3074                           
  3075                           ;i2c.c: 230: }
  3076                           ;i2c.c: 232: return v_i2cData_u8;
  3077  03D0  0872               	movf	I2C_Read@v_i2cData_u8,w
  3078  03D1  0008               	return
  3079  03D2                     __end_of_I2C_Read:	
  3080                           
  3081                           	psect	text17
  3082  0335                     __ptext17:	
  3083 ;; *************** function _i2c_WaitForIdle *****************
  3084 ;; Defined at:
  3085 ;;		line 258 in file "i2c.c"
  3086 ;; Parameters:    Size  Location     Type
  3087 ;;		None
  3088 ;; Auto vars:     Size  Location     Type
  3089 ;;		None
  3090 ;; Return value:  Size  Location     Type
  3091 ;;                  1    wreg      void 
  3092 ;; Registers used:
  3093 ;;		None
  3094 ;; Tracked objects:
  3095 ;;		On entry : 0/0
  3096 ;;		On exit  : 0/0
  3097 ;;		Unchanged: 0/0
  3098 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3099 ;;      Params:         0       0       0       0       0
  3100 ;;      Locals:         0       0       0       0       0
  3101 ;;      Temps:          0       0       0       0       0
  3102 ;;      Totals:         0       0       0       0       0
  3103 ;;Total ram usage:        0 bytes
  3104 ;; Hardware stack levels used:    1
  3105 ;; This function calls:
  3106 ;;		Nothing
  3107 ;; This function is called by:
  3108 ;;		_I2C_Write
  3109 ;;		_I2C_Read
  3110 ;; This function uses a non-reentrant model
  3111 ;;
  3112                           
  3113                           
  3114                           ;psect for function _i2c_WaitForIdle
  3115  0335                     _i2c_WaitForIdle:	
  3116  0335                     l162:	
  3117                           ;i2c.c: 260: while ( (SEN == 1) || (RSEN == 1) || (PEN == 1) || (RCEN == 1) || (R_W == 1
      +                          ) );
  3118                           
  3119                           ;incstack = 0
  3120                           ; Regs used in _i2c_WaitForIdle: []
  3121                           
  3122  0335  1683               	bsf	3,5	;RP0=1, select bank1
  3123  0336  1303               	bcf	3,6	;RP1=0, select bank1
  3124  0337  1C11               	btfss	17,0	;volatile
  3125  0338  1891               	btfsc	17,1	;volatile
  3126  0339  2B35               	goto	l162
  3127  033A  1D11               	btfss	17,2	;volatile
  3128  033B  1991               	btfsc	17,3	;volatile
  3129  033C  2B35               	goto	l162
  3130  033D  1D14               	btfss	20,2	;volatile
  3131  033E  0008               	return
  3132  033F  2B35               	goto	l162
  3133  0340                     __end_of_i2c_WaitForIdle:	
  3134                           
  3135                           	psect	text18
  3136  0324                     __ptext18:	
  3137 ;; *************** function _i2c_NoAck *****************
  3138 ;; Defined at:
  3139 ;;		line 299 in file "i2c.c"
  3140 ;; Parameters:    Size  Location     Type
  3141 ;;		None
  3142 ;; Auto vars:     Size  Location     Type
  3143 ;;		None
  3144 ;; Return value:  Size  Location     Type
  3145 ;;                  1    wreg      void 
  3146 ;; Registers used:
  3147 ;;		None
  3148 ;; Tracked objects:
  3149 ;;		On entry : 0/0
  3150 ;;		On exit  : 0/0
  3151 ;;		Unchanged: 0/0
  3152 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3153 ;;      Params:         0       0       0       0       0
  3154 ;;      Locals:         0       0       0       0       0
  3155 ;;      Temps:          0       0       0       0       0
  3156 ;;      Totals:         0       0       0       0       0
  3157 ;;Total ram usage:        0 bytes
  3158 ;; Hardware stack levels used:    1
  3159 ;; This function calls:
  3160 ;;		Nothing
  3161 ;; This function is called by:
  3162 ;;		_I2C_Read
  3163 ;; This function uses a non-reentrant model
  3164 ;;
  3165                           
  3166                           
  3167                           ;psect for function _i2c_NoAck
  3168  0324                     _i2c_NoAck:	
  3169                           
  3170                           ;i2c.c: 301: ACKDT = 1;
  3171                           
  3172                           ;incstack = 0
  3173                           ; Regs used in _i2c_NoAck: []
  3174  0324  1683               	bsf	3,5	;RP0=1, select bank1
  3175  0325  1303               	bcf	3,6	;RP1=0, select bank1
  3176  0326  1691               	bsf	17,5	;volatile
  3177                           
  3178                           ;i2c.c: 302: ACKEN = 1;
  3179  0327  1611               	bsf	17,4	;volatile
  3180  0328                     l174:	
  3181                           ;i2c.c: 303: while(ACKEN == 1);
  3182                           
  3183  0328  1E11               	btfss	17,4	;volatile
  3184  0329  0008               	return
  3185  032A  2B28               	goto	l174
  3186  032B                     __end_of_i2c_NoAck:	
  3187                           
  3188                           	psect	text19
  3189  031D                     __ptext19:	
  3190 ;; *************** function _i2c_Ack *****************
  3191 ;; Defined at:
  3192 ;;		line 279 in file "i2c.c"
  3193 ;; Parameters:    Size  Location     Type
  3194 ;;		None
  3195 ;; Auto vars:     Size  Location     Type
  3196 ;;		None
  3197 ;; Return value:  Size  Location     Type
  3198 ;;                  1    wreg      void 
  3199 ;; Registers used:
  3200 ;;		None
  3201 ;; Tracked objects:
  3202 ;;		On entry : 0/0
  3203 ;;		On exit  : 0/0
  3204 ;;		Unchanged: 0/0
  3205 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3206 ;;      Params:         0       0       0       0       0
  3207 ;;      Locals:         0       0       0       0       0
  3208 ;;      Temps:          0       0       0       0       0
  3209 ;;      Totals:         0       0       0       0       0
  3210 ;;Total ram usage:        0 bytes
  3211 ;; Hardware stack levels used:    1
  3212 ;; This function calls:
  3213 ;;		Nothing
  3214 ;; This function is called by:
  3215 ;;		_I2C_Read
  3216 ;; This function uses a non-reentrant model
  3217 ;;
  3218                           
  3219                           
  3220                           ;psect for function _i2c_Ack
  3221  031D                     _i2c_Ack:	
  3222                           
  3223                           ;i2c.c: 281: ACKDT = 0;
  3224                           
  3225                           ;incstack = 0
  3226                           ; Regs used in _i2c_Ack: []
  3227  031D  1683               	bsf	3,5	;RP0=1, select bank1
  3228  031E  1303               	bcf	3,6	;RP1=0, select bank1
  3229  031F  1291               	bcf	17,5	;volatile
  3230                           
  3231                           ;i2c.c: 282: ACKEN = 1;
  3232  0320  1611               	bsf	17,4	;volatile
  3233  0321                     l168:	
  3234                           ;i2c.c: 283: while(ACKEN == 1);
  3235                           
  3236  0321  1E11               	btfss	17,4	;volatile
  3237  0322  0008               	return
  3238  0323  2B21               	goto	l168
  3239  0324                     __end_of_i2c_Ack:	
  3240  007E                     btemp	set	126	;btemp
  3241  007E                     wtemp0	set	126


Data Sizes:
    Strings     0
    Constant    0
    Data        10
    BSS         0
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     24      34
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    RTC_GetDateTime@rtc	PTR struct . size(1) Largest target is 7
		 -> main@rtc(BANK0[7]), 

    RTC_SetDateTime@rtc	PTR struct . size(1) Largest target is 7
		 -> main@rtc(BANK0[7]), 


Critical Paths under _main in COMMON

    _main->_vDisplay
    _vDisplay->___awdiv
    _DELAY_ms->_DELAY_us
    _ui8Hex2DECDisplay->___bmul
    _ui8Dec2HexDisplay->___awdiv
    _RTC_SetDateTime->_I2C_Write
    _RTC_Init->_I2C_Write
    _RTC_GetDateTime->_I2C_Read

Critical Paths under _main in BANK0

    _main->_ui8Dec2HexDisplay

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                21    21      0    7248
                                              3 BANK0     21    21      0
                           _DELAY_ms
                    _RTC_GetDateTime
                           _RTC_Init
                    _RTC_SetDateTime
                            ___awdiv
                            ___awmod
                  _ui8Dec2HexDisplay
                  _ui8Hex2DECDisplay
                           _vDisplay
 ---------------------------------------------------------------------------------
 (1) _vDisplay                                             5     2      3    2095
                                              9 COMMON     5     2      3
                           _DELAY_ms
                            ___awdiv (ARG)
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (2) _DELAY_ms                                             2     0      2     576
                                              2 COMMON     2     0      2
                           _DELAY_us
 ---------------------------------------------------------------------------------
 (3) _DELAY_us                                             2     0      2     129
                                              0 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (1) _ui8Hex2DECDisplay                                    4     4      0     213
                                              4 COMMON     4     4      0
                             ___bmul
 ---------------------------------------------------------------------------------
 (2) ___bmul                                               4     3      1     145
                                              0 COMMON     4     3      1
 ---------------------------------------------------------------------------------
 (1) _ui8Dec2HexDisplay                                    6     6      0    1453
                                              9 COMMON     3     3      0
                                              0 BANK0      3     3      0
                            ___awdiv
                            ___awmod
 ---------------------------------------------------------------------------------
 (2) ___awmod                                              7     3      4     720
                                              0 COMMON     7     3      4
 ---------------------------------------------------------------------------------
 (2) ___awdiv                                              9     5      4     618
                                              0 COMMON     9     5      4
 ---------------------------------------------------------------------------------
 (1) _RTC_SetDateTime                                      1     1      0     203
                                              1 COMMON     1     1      0
                          _I2C_Start
                           _I2C_Stop
                          _I2C_Write
 ---------------------------------------------------------------------------------
 (1) _RTC_Init                                             0     0      0      22
                           _I2C_Init
                          _I2C_Start
                           _I2C_Stop
                          _I2C_Write
 ---------------------------------------------------------------------------------
 (2) _I2C_Init                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _RTC_GetDateTime                                      2     2      0     249
                                              3 COMMON     2     2      0
                           _I2C_Read
                          _I2C_Start
                           _I2C_Stop
                          _I2C_Write
 ---------------------------------------------------------------------------------
 (2) _I2C_Write                                            1     1      0      22
                                              0 COMMON     1     1      0
                    _i2c_WaitForIdle
 ---------------------------------------------------------------------------------
 (2) _I2C_Stop                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _I2C_Start                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _I2C_Read                                             3     3      0      46
                                              0 COMMON     3     3      0
                            _i2c_Ack
                          _i2c_NoAck
                    _i2c_WaitForIdle
 ---------------------------------------------------------------------------------
 (3) _i2c_WaitForIdle                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _i2c_NoAck                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _i2c_Ack                                              0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _DELAY_ms
     _DELAY_us
   _RTC_GetDateTime
     _I2C_Read
       _i2c_Ack
       _i2c_NoAck
       _i2c_WaitForIdle
     _I2C_Start
     _I2C_Stop
     _I2C_Write
       _i2c_WaitForIdle
   _RTC_Init
     _I2C_Init
     _I2C_Start
     _I2C_Stop
     _I2C_Write
       _i2c_WaitForIdle
   _RTC_SetDateTime
     _I2C_Start
     _I2C_Stop
     _I2C_Write
       _i2c_WaitForIdle
   ___awdiv
   ___awmod
   _ui8Dec2HexDisplay
     ___awdiv
     ___awmod
   _ui8Hex2DECDisplay
     ___bmul
   _vDisplay
     _DELAY_ms
       _DELAY_us
     ___awdiv (ARG)
     ___awmod (ARG)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BANK3               60      0       0       9        0.0%
BITBANK3            60      0       0       8        0.0%
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
BANK2               60      0       0      11        0.0%
BITBANK2            60      0       0      10        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               50      0       0       7        0.0%
BITBANK1            50      0       0       6        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50     18      22       5       42.5%
BITBANK0            50      0       0       4        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      E       E       1      100.0%
BITCOMMON            E      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0      30      12        0.0%
ABS                  0      0      30       3        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA             100      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V1.43 build -156212558 
Symbol Table                                                                                   Sun Sep 17 13:41:34 2017

                         pc 0002              ___bmul@product 0072          __size_of_I2C_Start 0006  
               __CFG_CP$OFF 0000            ?_i2c_WaitForIdle 0070          __size_of_I2C_Write 000D  
                        _BF 04A0                ___awdiv@sign 0076                          fsr 0004  
                       l142 031A                         l136 0314                         l162 0335  
                       l154 03B7                         l148 0350                         l174 0328  
                       l168 0321                         _PEN 048A                __CFG_CPD$OFF 0000  
                       _SEN 0488                         u815 04A3                         u825 04AF  
                       u835 04B9                         u915 0457                         u925 0460  
                       u795 0497                         u895 0446                         _R_W 04A2  
   __end_of_RTC_SetDateTime 052A                         fsr0 0004                         indf 0000  
              ___awmod@sign 0076                __CFG_FOSC$HS 0000                __CFG_LVP$OFF 0000  
                      l1211 0340                        l1311 04B8                        l1303 0494  
                      l1305 04A2                        l1233 0388                        l1315 04C3  
                      l1331 0436                        l1261 03D0                        l1319 04CB  
                      l1343 0443                        l1335 043D                        l1271 036E  
                      l1345 0451                        l1353 046A                        l1259 03CD  
                      l1267 0368                        l1293 048C                        l1357 0472  
                      l1349 045F                        l1541 0753                        l1287 0481  
                      l1631 06C0                        l1607 06A2                        l1561 077F  
                      l1651 06D9                        l1643 06CF                        l1619 06B1  
                      l1653 06DC                        l1549 0768                        l1663 0741  
                      l1655 06E6                        l1583 0658                        l1593 0664  
                      l1569 0790                        l1595 0693                        _IOCB 0096  
                      _RCEN 048B                        _RSEN 0489                 main@ucHours 002B  
               main@ucMonth 002D                __CFG_WRT$OFF 0000                        _main 060D  
          __end_of_I2C_Init 0366            __end_of_I2C_Read 03D2                        btemp 007E  
          __end_of_I2C_Stop 031D                        start 0000            __end_of_DELAY_ms 039C  
          __end_of_DELAY_us 034B           ___bmul@multiplier 0073             __end_of_i2c_Ack 0324  
                     ?_main 0070                       _ACKEN 048C                       _ACKDT 048D  
           __end_of___awdiv 04D0               __CFG_WDTE$OFF 0000             __end_of___awmod 0477  
           ___awdiv@divisor 0070             ___awdiv@counter 0075                       _PORTB 0006  
                     _PORTD 0008                       _TRISD 0088            __end_of_RTC_Init 03F2  
         __end_of_I2C_Start 0317           __end_of_I2C_Write 0358              __CFG_BOREN$OFF 0000  
                     pclath 000A   ui8Hex2DECDisplay@ui8Input 0077                       status 0003  
                     wtemp0 007E    ui8Dec2HexDisplay@ui8Temp 0022             __initialization 07F0  
              __end_of_main 07F0                      ??_main 0023          RTC_SetDateTime@rtc 0071  
          ?_RTC_SetDateTime 0070          __size_of_i2c_NoAck 0007            ___awdiv@dividend 0072  
                    _SSPADD 0093                      _TRISC3 043B                      _TRISC4 043C  
                    _SSPCON 0014                      _SSPBUF 0013                   ??_i2c_Ack 0070  
            __CFG_PWRTE$OFF 0000            __end_of_vDisplay 058E       I2C_Write@v_i2cData_u8 0070  
                    ___bmul 0366                   ??___awdiv 0074                   ??___awmod 0074  
          ___awdiv@quotient 0077             ___awmod@divisor 0070             ___awmod@counter 0075  
          DELAY_ms@ms_count 0072                   ?_I2C_Init 0070                   ?_I2C_Read 0070  
                 ?_I2C_Stop 0070                   ?_DELAY_ms 0072                   ?_DELAY_us 0070  
   __end_of__initialization 07FC         ___bmul@multiplicand 0070              __pcstackCOMMON 0070  
              __pidataBANK0 032B           __end_of_i2c_NoAck 032B                   ?_RTC_Init 0070  
                ??_I2C_Init 0070              _OPTION_REGbits 0081                  ??_I2C_Read 0070  
ui8Dec2HexDisplay@ui8Output 0020                  ??_I2C_Stop 0070            vDisplay@ui8First 007D  
                ??_DELAY_ms 0074                  ??_DELAY_us 0072    __size_of_RTC_GetDateTime 007F  
            main@ui8SetMode 0030           _ui8Hex2DECDisplay 039C                  __pmaintext 060D  
                   ?___bmul 0070          ?_ui8Hex2DECDisplay 0070                  ??_RTC_Init 0071  
       ??_ui8Hex2DECDisplay 0074           _ui8Dec2HexDisplay 03F2    __size_of_i2c_WaitForIdle 000B  
        ?_ui8Dec2HexDisplay 0070                   ?_vDisplay 0079            DELAY_us@us_count 0070  
                   _SSPSTAT 0094         ??_ui8Dec2HexDisplay 0079                     _i2c_Ack 031D  
 __end_of_ui8Hex2DECDisplay 03B2                   _I2C_Start 0311                   _I2C_Write 034B  
           __size_of___bmul 0011                     ___awdiv 0477                     ___awmod 042C  
                 _ANSELbits 0188   __end_of_ui8Dec2HexDisplay 042C                     __ptext1 052A  
                   __ptext2 0388                     __ptext3 0340                     __ptext4 039C  
                   __ptext5 0366                     __ptext6 03F2                     __ptext7 042C  
                   __ptext8 0477                     __ptext9 04D0            ___awmod@dividend 0072  
                ??_vDisplay 007C                     main@rtc 0031        end_of_initialization 07FC  
    I2C_Read@v_ackOption_u8 0071                  ?_I2C_Start 0070                  ?_I2C_Write 0070  
         ??_RTC_GetDateTime 0073                   _PORTBbits 0006                   _PORTCbits 0007  
                 _TRISBbits 0086                   _TRISCbits 0087                   _TRISEbits 0089  
         __size_of_I2C_Init 000E           __size_of_I2C_Read 0020           __size_of_I2C_Stop 0006  
         __size_of_DELAY_ms 0014           __size_of_DELAY_us 000B    __size_of_RTC_SetDateTime 005A  
         ??_i2c_WaitForIdle 0070                  main@ucDate 002C  __size_of_ui8Hex2DECDisplay 0016  
                main@ucYear 0029              __end_of___bmul 0377  __size_of_ui8Dec2HexDisplay 003A  
                 _i2c_NoAck 0324           __size_of_RTC_Init 0020         start_initialization 07F0  
               ??_I2C_Start 0070                 ??_I2C_Write 0070           vDisplay@ui8Fourth 007B  
         vDisplay@ui8Second 0079                    ??___bmul 0071                  init_fetch0 0377  
               __pdataBANK0 0038                  ?_i2c_NoAck 0070                   ___latbits 0002  
             __pcstackBANK0 0020           __size_of_vDisplay 0064             main@ui8SetValue 002F  
           vDisplay@ui8Thrd 007A                   _ucBCD_ARR 0038                    ?_i2c_Ack 0070  
         ??_RTC_SetDateTime 0071                    ?___awdiv 0070                    ?___awmod 0070  
      I2C_Read@v_i2cData_u8 0072                    _I2C_Init 0358                    _I2C_Read 03B2  
                  _I2C_Stop 0317                    _DELAY_ms 0388                    _DELAY_us 0340  
           _RTC_GetDateTime 058E                    _RTC_Init 03D2                 ??_i2c_NoAck 0070  
           _i2c_WaitForIdle 0335                    _WPUBbits 0095                   main@ucMin 002A  
                 main@ucSec 002E    ui8Hex2DECDisplay@ui8Temp 0076            __size_of_i2c_Ack 0007  
          __size_of___awdiv 0059            __size_of___awmod 004B     __end_of_RTC_GetDateTime 060D  
                _ANSELHbits 0189                    __ptext10 03D2                    __ptext11 0358  
                  __ptext12 058E                    __ptext13 034B                    __ptext14 0317  
                  __ptext15 0311                    __ptext16 03B2                    __ptext17 0335  
                  __ptext18 0324                    __ptext19 031D                    _vDisplay 052A  
 ui8Dec2HexDisplay@ui8Input 0021               __size_of_main 01E3     __end_of_i2c_WaitForIdle 0340  
                  init_ram0 037B          RTC_GetDateTime@rtc 0074             _RTC_SetDateTime 04D0  
          ?_RTC_GetDateTime 0070  
